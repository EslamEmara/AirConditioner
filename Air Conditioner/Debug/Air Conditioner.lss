
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00001b6a  00001bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080009c  0080009c  00001c3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e7f  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa3  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a18  00000000  00000000  00005d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  0000777c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce0  00000000  00000000  00007e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e6d  00000000  00000000  00008b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000a979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3b       	cpi	r26, 0xBB	; 187
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 05 	call	0xb2e	; 0xb2e <main>
      8a:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_Init>:
	char Str_number[3];
	convert_2DigitInt_to_str(gDesired_temp,Str_number);
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Desired Temp");
	LCD_displayStringRowColumn(DESIRED_TEMP_ROW_COLUMN,Str_number);
}
      92:	0e 94 14 04 	call	0x828	; 0x828 <LCD_init>
      96:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Keypad_init>
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 31 05 	call	0xa62	; 0xa62 <Lm35_init>
      a0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      a8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      ac:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
      b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
      b4:	0e 94 3c 05 	call	0xa78	; 0xa78 <Motor_init>
      b8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <gLcd_mode>
      bc:	89 e1       	ldi	r24, 0x19	; 25
      be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gDesired_temp>
      c2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <gTimeOut>
      c6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <digit_count>
      ca:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <num_int>
      ce:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <keypad_reading>
      d2:	08 95       	ret

000000d4 <convert_2DigitInt_to_str>:
      d4:	fb 01       	movw	r30, r22
      d6:	8a 30       	cpi	r24, 0x0A	; 10
      d8:	20 f4       	brcc	.+8      	; 0xe2 <convert_2DigitInt_to_str+0xe>
      da:	80 5d       	subi	r24, 0xD0	; 208
      dc:	80 83       	st	Z, r24
      de:	11 82       	std	Z+1, r1	; 0x01
      e0:	08 95       	ret
      e2:	9d ec       	ldi	r25, 0xCD	; 205
      e4:	89 9f       	mul	r24, r25
      e6:	91 2d       	mov	r25, r1
      e8:	11 24       	eor	r1, r1
      ea:	96 95       	lsr	r25
      ec:	96 95       	lsr	r25
      ee:	96 95       	lsr	r25
      f0:	20 e3       	ldi	r18, 0x30	; 48
      f2:	29 0f       	add	r18, r25
      f4:	20 83       	st	Z, r18
      f6:	99 0f       	add	r25, r25
      f8:	29 2f       	mov	r18, r25
      fa:	22 0f       	add	r18, r18
      fc:	22 0f       	add	r18, r18
      fe:	92 0f       	add	r25, r18
     100:	89 1b       	sub	r24, r25
     102:	80 5d       	subi	r24, 0xD0	; 208
     104:	81 83       	std	Z+1, r24	; 0x01
     106:	12 82       	std	Z+2, r1	; 0x02
     108:	08 95       	ret

0000010a <Char_Arr_ToInt>:
     10a:	fc 01       	movw	r30, r24
     10c:	91 81       	ldd	r25, Z+1	; 0x01
     10e:	91 11       	cpse	r25, r1
     110:	03 c0       	rjmp	.+6      	; 0x118 <Char_Arr_ToInt+0xe>
     112:	80 81       	ld	r24, Z
     114:	80 53       	subi	r24, 0x30	; 48
     116:	08 95       	ret
     118:	20 81       	ld	r18, Z
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	20 53       	subi	r18, 0x30	; 48
     11e:	31 09       	sbc	r19, r1
     120:	22 0f       	add	r18, r18
     122:	82 2f       	mov	r24, r18
     124:	88 0f       	add	r24, r24
     126:	88 0f       	add	r24, r24
     128:	82 0f       	add	r24, r18
     12a:	89 0f       	add	r24, r25
     12c:	80 53       	subi	r24, 0x30	; 48
     12e:	08 95       	ret

00000130 <App_GetUserInput>:
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 0b 02 	call	0x416	; 0x416 <Keypad_read>
     136:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <keypad_reading>
     13a:	88 23       	and	r24, r24
     13c:	e1 f1       	breq	.+120    	; 0x1b6 <App_GetUserInput+0x86>
     13e:	90 ed       	ldi	r25, 0xD0	; 208
     140:	98 0f       	add	r25, r24
     142:	9a 30       	cpi	r25, 0x0A	; 10
     144:	10 f5       	brcc	.+68     	; 0x18a <App_GetUserInput+0x5a>
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <gLcd_mode>
     14c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <digit_count>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	d8 f4       	brcc	.+54     	; 0x18a <App_GetUserInput+0x5a>
     154:	29 2f       	mov	r18, r25
     156:	30 e0       	ldi	r19, 0x00	; 0
     158:	f9 01       	movw	r30, r18
     15a:	e4 56       	subi	r30, 0x64	; 100
     15c:	ff 4f       	sbci	r31, 0xFF	; 255
     15e:	80 83       	st	Z, r24
     160:	f9 01       	movw	r30, r18
     162:	e3 56       	subi	r30, 0x63	; 99
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	10 82       	st	Z, r1
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <digit_count>
     16e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_clearScreen>
     172:	43 e8       	ldi	r20, 0x83	; 131
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_displayStringRowColumn>
     17e:	4c e9       	ldi	r20, 0x9C	; 156
     180:	50 e0       	ldi	r21, 0x00	; 0
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_displayStringRowColumn>
     18a:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <keypad_reading>
     18e:	8d 33       	cpi	r24, 0x3D	; 61
     190:	a1 f4       	brne	.+40     	; 0x1ba <App_GetUserInput+0x8a>
     192:	8c e9       	ldi	r24, 0x9C	; 156
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 85 00 	call	0x10a	; 0x10a <Char_Arr_ToInt>
     19a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <num_int>
     19e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <digit_count>
     1a2:	ec e9       	ldi	r30, 0x9C	; 156
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	10 82       	st	Z, r1
     1a8:	11 82       	std	Z+1, r1	; 0x01
     1aa:	12 82       	std	Z+2, r1	; 0x02
     1ac:	8f 50       	subi	r24, 0x0F	; 15
     1ae:	80 31       	cpi	r24, 0x10	; 16
     1b0:	30 f0       	brcs	.+12     	; 0x1be <App_GetUserInput+0x8e>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	08 95       	ret
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	08 95       	ret
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	08 95       	ret
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	08 95       	ret

000001c2 <App_MeasureCurrentTemp>:
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 39 05 	call	0xa72	; 0xa72 <Lm35_GetTemp>
     1c8:	08 95       	ret

000001ca <App_AdjustTemp>:
     1ca:	68 17       	cp	r22, r24
     1cc:	70 f4       	brcc	.+28     	; 0x1ea <App_AdjustTemp+0x20>
     1ce:	20 e5       	ldi	r18, 0x50	; 80
     1d0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1d4:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1d8:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     1dc:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     1e0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     1e4:	0e 94 71 05 	call	0xae2	; 0xae2 <Motor_moveForward>
     1e8:	08 95       	ret
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1f0:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1f4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     1f8:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     1fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     200:	0e 94 71 05 	call	0xae2	; 0xae2 <Motor_moveForward>
     204:	08 95       	ret

00000206 <App_PrintCurrenTemp>:
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <App_PrintCurrenTemp+0x6>
     20c:	1f 92       	push	r1
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	be 01       	movw	r22, r28
     214:	6f 5f       	subi	r22, 0xFF	; 255
     216:	7f 4f       	sbci	r23, 0xFF	; 255
     218:	0e 94 6a 00 	call	0xd4	; 0xd4 <convert_2DigitInt_to_str>
     21c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_clearScreen>
     220:	ae 01       	movw	r20, r28
     222:	4f 5f       	subi	r20, 0xFF	; 255
     224:	5f 4f       	sbci	r21, 0xFF	; 255
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_displayStringRowColumn>
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <app>:

void app(){
     23a:	cf 93       	push	r28
	uint8_t current_temp = App_MeasureCurrentTemp();;
     23c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <App_MeasureCurrentTemp>
     240:	c8 2f       	mov	r28, r24
	uint8_t fun_return=0;
	fun_return = App_GetUserInput();
     242:	0e 94 98 00 	call	0x130	; 0x130 <App_GetUserInput>
	if (fun_return != 255){
     246:	8f 3f       	cpi	r24, 0xFF	; 255
     248:	a1 f0       	breq	.+40     	; 0x272 <app+0x38>
		
		 if (fun_return == 1){
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	39 f4       	brne	.+14     	; 0x25c <app+0x22>
			 gDesired_temp = num_int;
     24e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <num_int>
     252:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gDesired_temp>
			 gLcd_mode = ACTUAL_MODE;
     256:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <gLcd_mode>
     25a:	0b c0       	rjmp	.+22     	; 0x272 <app+0x38>

		}
		else{
			gDesired_temp = 25;
     25c:	89 e1       	ldi	r24, 0x19	; 25
     25e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gDesired_temp>
			LCD_clearScreen();
     262:	0e 94 2d 05 	call	0xa5a	; 0xa5a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Not Valid!");
     266:	40 e9       	ldi	r20, 0x90	; 144
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	80 e0       	ldi	r24, 0x00	; 0
     26e:	0e 94 22 05 	call	0xa44	; 0xa44 <LCD_displayStringRowColumn>
			
		}
		
	}
		if(gLcd_mode == ACTUAL_MODE){							/*Desired temprature mode*/
     272:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <gLcd_mode>
     276:	81 11       	cpse	r24, r1
     278:	08 c0       	rjmp	.+16     	; 0x28a <app+0x50>
			App_PrintCurrenTemp(current_temp);
     27a:	8c 2f       	mov	r24, r28
     27c:	0e 94 03 01 	call	0x206	; 0x206 <App_PrintCurrenTemp>
			App_AdjustTemp(current_temp,gDesired_temp);
     280:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <gDesired_temp>
     284:	8c 2f       	mov	r24, r28
     286:	0e 94 e5 00 	call	0x1ca	; 0x1ca <App_AdjustTemp>
		}
	
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <MapKeyPad4x4_cont>:
*of the pressed button continuously 
*This function is designed for 4x4 keypad
*/

uint8_t MapKeyPad4x4_cont(uint8_t row){
	switch (row)
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	29 f1       	breq	.+74     	; 0x2dc <MapKeyPad4x4_cont+0x4e>
     292:	38 f0       	brcs	.+14     	; 0x2a2 <MapKeyPad4x4_cont+0x14>
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	09 f4       	brne	.+2      	; 0x29a <MapKeyPad4x4_cont+0xc>
     298:	3e c0       	rjmp	.+124    	; 0x316 <MapKeyPad4x4_cont+0x88>
     29a:	83 30       	cpi	r24, 0x03	; 3
     29c:	09 f4       	brne	.+2      	; 0x2a0 <MapKeyPad4x4_cont+0x12>
     29e:	56 c0       	rjmp	.+172    	; 0x34c <MapKeyPad4x4_cont+0xbe>
     2a0:	6f c0       	rjmp	.+222    	; 0x380 <MapKeyPad4x4_cont+0xf2>
	{
		case 0:											/*elements of first row*/
		{
			if (!DIO_GetPinValue(COL_1)){
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2aa:	88 23       	and	r24, r24
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <MapKeyPad4x4_cont+0x22>
     2ae:	6a c0       	rjmp	.+212    	; 0x384 <MapKeyPad4x4_cont+0xf6>
				return '7';
			}
			else if (!DIO_GetPinValue(COL_2)){
     2b0:	65 e0       	ldi	r22, 0x05	; 5
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2b8:	88 23       	and	r24, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <MapKeyPad4x4_cont+0x30>
     2bc:	65 c0       	rjmp	.+202    	; 0x388 <MapKeyPad4x4_cont+0xfa>
				return '8';
			}
			else if (!DIO_GetPinValue(COL_3)){
     2be:	66 e0       	ldi	r22, 0x06	; 6
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2c6:	88 23       	and	r24, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <MapKeyPad4x4_cont+0x3e>
     2ca:	60 c0       	rjmp	.+192    	; 0x38c <MapKeyPad4x4_cont+0xfe>
				return '9';
			}
			else if (!DIO_GetPinValue(COL_4)){
     2cc:	67 e0       	ldi	r22, 0x07	; 7
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2d4:	81 11       	cpse	r24, r1
     2d6:	5c c0       	rjmp	.+184    	; 0x390 <MapKeyPad4x4_cont+0x102>
				return '/';
     2d8:	8f e2       	ldi	r24, 0x2F	; 47
     2da:	08 95       	ret
			}
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (!DIO_GetPinValue(COL_1)){
     2dc:	64 e0       	ldi	r22, 0x04	; 4
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2e4:	88 23       	and	r24, r24
     2e6:	09 f4       	brne	.+2      	; 0x2ea <MapKeyPad4x4_cont+0x5c>
     2e8:	55 c0       	rjmp	.+170    	; 0x394 <MapKeyPad4x4_cont+0x106>
				return '4';
			}
			else if (!DIO_GetPinValue(COL_2)){
     2ea:	65 e0       	ldi	r22, 0x05	; 5
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     2f2:	88 23       	and	r24, r24
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <MapKeyPad4x4_cont+0x6a>
     2f6:	50 c0       	rjmp	.+160    	; 0x398 <MapKeyPad4x4_cont+0x10a>
				return '5';
			}
			else if (!DIO_GetPinValue(COL_3)){
     2f8:	66 e0       	ldi	r22, 0x06	; 6
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     300:	88 23       	and	r24, r24
     302:	09 f4       	brne	.+2      	; 0x306 <MapKeyPad4x4_cont+0x78>
     304:	4b c0       	rjmp	.+150    	; 0x39c <MapKeyPad4x4_cont+0x10e>
				return '6';
			}
			else if (!DIO_GetPinValue(COL_4)){
     306:	67 e0       	ldi	r22, 0x07	; 7
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     30e:	81 11       	cpse	r24, r1
     310:	47 c0       	rjmp	.+142    	; 0x3a0 <MapKeyPad4x4_cont+0x112>
				return '*';
     312:	8a e2       	ldi	r24, 0x2A	; 42
     314:	08 95       	ret
			}
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (!DIO_GetPinValue(COL_1)){
     316:	64 e0       	ldi	r22, 0x04	; 4
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     31e:	88 23       	and	r24, r24
     320:	09 f4       	brne	.+2      	; 0x324 <MapKeyPad4x4_cont+0x96>
     322:	40 c0       	rjmp	.+128    	; 0x3a4 <MapKeyPad4x4_cont+0x116>
				return '1';
			}
			else if (!DIO_GetPinValue(COL_2)){
     324:	65 e0       	ldi	r22, 0x05	; 5
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     32c:	88 23       	and	r24, r24
     32e:	e1 f1       	breq	.+120    	; 0x3a8 <MapKeyPad4x4_cont+0x11a>
				return '2';
			}
			else if (!DIO_GetPinValue(COL_3)){
     330:	66 e0       	ldi	r22, 0x06	; 6
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     338:	88 23       	and	r24, r24
     33a:	c1 f1       	breq	.+112    	; 0x3ac <MapKeyPad4x4_cont+0x11e>
				return '3';
			}
			else if (!DIO_GetPinValue(COL_4)){
     33c:	67 e0       	ldi	r22, 0x07	; 7
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     344:	81 11       	cpse	r24, r1
     346:	34 c0       	rjmp	.+104    	; 0x3b0 <MapKeyPad4x4_cont+0x122>
				return '-';
     348:	8d e2       	ldi	r24, 0x2D	; 45
     34a:	08 95       	ret
			}
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (!DIO_GetPinValue(COL_1)){
     34c:	64 e0       	ldi	r22, 0x04	; 4
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     354:	88 23       	and	r24, r24
     356:	71 f1       	breq	.+92     	; 0x3b4 <MapKeyPad4x4_cont+0x126>
				return 'o';
			}
			else if (!DIO_GetPinValue(COL_2)){
     358:	65 e0       	ldi	r22, 0x05	; 5
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     360:	88 23       	and	r24, r24
     362:	51 f1       	breq	.+84     	; 0x3b8 <MapKeyPad4x4_cont+0x12a>
				return '0';
			}
			else if (!DIO_GetPinValue(COL_3)){
     364:	66 e0       	ldi	r22, 0x06	; 6
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     36c:	88 23       	and	r24, r24
     36e:	31 f1       	breq	.+76     	; 0x3bc <MapKeyPad4x4_cont+0x12e>
				return '=';
			}
			else if (!DIO_GetPinValue(COL_4)){
     370:	67 e0       	ldi	r22, 0x07	; 7
     372:	82 e0       	ldi	r24, 0x02	; 2
     374:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
     378:	81 11       	cpse	r24, r1
     37a:	22 c0       	rjmp	.+68     	; 0x3c0 <MapKeyPad4x4_cont+0x132>
				return '+';
     37c:	8b e2       	ldi	r24, 0x2B	; 43
     37e:	08 95       	ret
			}
		}
		default:
			return 0;									
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	08 95       	ret
	switch (row)
	{
		case 0:											/*elements of first row*/
		{
			if (!DIO_GetPinValue(COL_1)){
				return '7';
     384:	87 e3       	ldi	r24, 0x37	; 55
     386:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_2)){
				return '8';
     388:	88 e3       	ldi	r24, 0x38	; 56
     38a:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_3)){
				return '9';
     38c:	89 e3       	ldi	r24, 0x39	; 57
     38e:	08 95       	ret
		}
		default:
			return 0;									
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	08 95       	ret
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (!DIO_GetPinValue(COL_1)){
				return '4';
     394:	84 e3       	ldi	r24, 0x34	; 52
     396:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_2)){
				return '5';
     398:	85 e3       	ldi	r24, 0x35	; 53
     39a:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_3)){
				return '6';
     39c:	86 e3       	ldi	r24, 0x36	; 54
     39e:	08 95       	ret
		}
		default:
			return 0;									
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	08 95       	ret
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (!DIO_GetPinValue(COL_1)){
				return '1';
     3a4:	81 e3       	ldi	r24, 0x31	; 49
     3a6:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_2)){
				return '2';
     3a8:	82 e3       	ldi	r24, 0x32	; 50
     3aa:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_3)){
				return '3';
     3ac:	83 e3       	ldi	r24, 0x33	; 51
     3ae:	08 95       	ret
		}
		default:
			return 0;									
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	08 95       	ret
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (!DIO_GetPinValue(COL_1)){
				return 'o';
     3b4:	8f e6       	ldi	r24, 0x6F	; 111
     3b6:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_2)){
				return '0';
     3b8:	80 e3       	ldi	r24, 0x30	; 48
     3ba:	08 95       	ret
			}
			else if (!DIO_GetPinValue(COL_3)){
				return '=';
     3bc:	8d e3       	ldi	r24, 0x3D	; 61
     3be:	08 95       	ret
			else if (!DIO_GetPinValue(COL_4)){
				return '+';
			}
		}
		default:
			return 0;									
     3c0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
}
     3c2:	08 95       	ret

000003c4 <Keypad_init>:
*======================= make sure you configured the keypad pins in "keypad_config.h"========================
*/
#define  LOW 0
void Keypad_init(){
	#ifdef ROW_1						/*Configure rows as output*/
		DIO_SetPinDirection(ROW_1,OUTPUT);
     3c4:	41 e0       	ldi	r20, 0x01	; 1
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	#ifdef ROW_2
		DIO_SetPinDirection(ROW_2,OUTPUT);
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	#ifdef ROW_3
		DIO_SetPinDirection(ROW_3,OUTPUT);
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	#ifdef ROW_4
		DIO_SetPinDirection(ROW_4,OUTPUT);
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	63 e0       	ldi	r22, 0x03	; 3
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_1						/*configure columns as inputs with pull up resistors*/
		DIO_SetPinDirection(COL_1,PULLUP);
     3ec:	42 e0       	ldi	r20, 0x02	; 2
     3ee:	64 e0       	ldi	r22, 0x04	; 4
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_2
		DIO_SetPinDirection(COL_2,PULLUP);
     3f6:	42 e0       	ldi	r20, 0x02	; 2
     3f8:	65 e0       	ldi	r22, 0x05	; 5
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_3
		DIO_SetPinDirection(COL_3,PULLUP);
     400:	42 e0       	ldi	r20, 0x02	; 2
     402:	66 e0       	ldi	r22, 0x06	; 6
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	#endif
	
	#ifdef COL_4
		DIO_SetPinDirection(COL_4,PULLUP);
     40a:	42 e0       	ldi	r20, 0x02	; 2
     40c:	67 e0       	ldi	r22, 0x07	; 7
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
     414:	08 95       	ret

00000416 <Keypad_read>:
*Inputs: none
*return: Ascii code of the pressed button {'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'o','0','=','+'}
*if no button is pressed it return NO_KEY_PRESSED which is defined in keypad.h
*/
uint8_t Keypad_read(EN_KEYPAD_ReadingMode MODE)
{
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
	uint8_t mapping_return = 0;							/*variable to save the return of mapping function*/
	uint8_t (*CallFunc) (uint8_t);								/*pointer to function that will be called in reading columns according to mode*/
	
	if (MODE == ONE_PRESS){
     41e:	81 11       	cpse	r24, r1
     420:	03 c0       	rjmp	.+6      	; 0x428 <Keypad_read+0x12>
		CallFunc = MapKeyPad4x4_OnePress;
     422:	07 ea       	ldi	r16, 0xA7	; 167
     424:	12 e0       	ldi	r17, 0x02	; 2
     426:	02 c0       	rjmp	.+4      	; 0x42c <Keypad_read+0x16>
	}
	else{
		CallFunc = MapKeyPad4x4_cont;
     428:	07 e4       	ldi	r16, 0x47	; 71
     42a:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	for (int rows =0 ; rows<ROWS; rows++)				/*loop on the rows*/
     42c:	c0 e0       	ldi	r28, 0x00	; 0
     42e:	d0 e0       	ldi	r29, 0x00	; 0
     430:	74 c0       	rjmp	.+232    	; 0x51a <Keypad_read+0x104>
	{	
		if (rows == 0){
     432:	20 97       	sbiw	r28, 0x00	; 0
     434:	d9 f4       	brne	.+54     	; 0x46c <Keypad_read+0x56>
			DIO_SetPinValue(ROW_1,0);						/*move the 0 from one pin to other*/
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_2,1);
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_3,1);
     44a:	41 e0       	ldi	r20, 0x01	; 1
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_4,1);
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			mapping_return = CallFunc(rows);		/*check for pressed column*/
     45e:	8c 2f       	mov	r24, r28
     460:	f8 01       	movw	r30, r16
     462:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <Keypad_read+0x54>
     468:	57 c0       	rjmp	.+174    	; 0x518 <Keypad_read+0x102>
     46a:	5c c0       	rjmp	.+184    	; 0x524 <Keypad_read+0x10e>
				return mapping_return;					/*return value if button is pressed in the row*/
			}
		}
		else if (rows == 1){
     46c:	c1 30       	cpi	r28, 0x01	; 1
     46e:	d1 05       	cpc	r29, r1
     470:	d1 f4       	brne	.+52     	; 0x4a6 <Keypad_read+0x90>
			
			DIO_SetPinValue(ROW_1,1);						/*move the 0 from one pin to other*/
     472:	41 e0       	ldi	r20, 0x01	; 1
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_2,0);
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_3,1);
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	62 e0       	ldi	r22, 0x02	; 2
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_4,1);
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	63 e0       	ldi	r22, 0x03	; 3
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			mapping_return = CallFunc(rows);
     49a:	8c 2f       	mov	r24, r28
     49c:	f8 01       	movw	r30, r16
     49e:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     4a0:	88 23       	and	r24, r24
     4a2:	d1 f1       	breq	.+116    	; 0x518 <Keypad_read+0x102>
     4a4:	3f c0       	rjmp	.+126    	; 0x524 <Keypad_read+0x10e>
				return mapping_return;
			}
		}
		else if (rows == 2){
     4a6:	c2 30       	cpi	r28, 0x02	; 2
     4a8:	d1 05       	cpc	r29, r1
     4aa:	d1 f4       	brne	.+52     	; 0x4e0 <Keypad_read+0xca>
				
			DIO_SetPinValue(ROW_1,1);						/*move the 0 from one pin to other*/
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_2,1);
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_3,0);
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_4,1);
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			mapping_return = CallFunc(rows);
     4d4:	8c 2f       	mov	r24, r28
     4d6:	f8 01       	movw	r30, r16
     4d8:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     4da:	88 23       	and	r24, r24
     4dc:	e9 f0       	breq	.+58     	; 0x518 <Keypad_read+0x102>
     4de:	22 c0       	rjmp	.+68     	; 0x524 <Keypad_read+0x10e>
				return mapping_return;
			}
		}
		else if (rows == 3){
     4e0:	c3 30       	cpi	r28, 0x03	; 3
     4e2:	d1 05       	cpc	r29, r1
     4e4:	c9 f4       	brne	.+50     	; 0x518 <Keypad_read+0x102>
				
			DIO_SetPinValue(ROW_1,1);						/*move the 0 from one pin to other*/
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_2,1);
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_3,1);
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			DIO_SetPinValue(ROW_4,0);	
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
			mapping_return = CallFunc(rows);
     50e:	8c 2f       	mov	r24, r28
     510:	f8 01       	movw	r30, r16
     512:	09 95       	icall
			if (mapping_return != NO_KEY_PRESSED){
     514:	81 11       	cpse	r24, r1
     516:	06 c0       	rjmp	.+12     	; 0x524 <Keypad_read+0x10e>
	}
	else{
		CallFunc = MapKeyPad4x4_cont;
	}
	
	for (int rows =0 ; rows<ROWS; rows++)				/*loop on the rows*/
     518:	21 96       	adiw	r28, 0x01	; 1
     51a:	c4 30       	cpi	r28, 0x04	; 4
     51c:	d1 05       	cpc	r29, r1
     51e:	0c f4       	brge	.+2      	; 0x522 <Keypad_read+0x10c>
     520:	88 cf       	rjmp	.-240    	; 0x432 <Keypad_read+0x1c>
				return mapping_return;
			}
		}
		
	}
	return NO_KEY_PRESSED;
     522:	80 e0       	ldi	r24, 0x00	; 0
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <read_one_press>:
*I/O parameters:	uint8_t* last_value reserves the last pin state 
*return:	return pin state one time only and return any other value for the rest of readings
*
*/
uint8_t read_one_press(uint8_t port,uint8_t pin,uint8_t* last_value)
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	ea 01       	movw	r28, r20
	uint8_t current_value =0;

	uint8_t return_value = 0;
	
	current_value = DIO_GetPinValue(port,pin);
     534:	0e 94 2c 07 	call	0xe58	; 0xe58 <DIO_GetPinValue>
	
	if (current_value!= (*last_value)){
     538:	98 81       	ld	r25, Y
     53a:	89 13       	cpse	r24, r25
     53c:	02 c0       	rjmp	.+4      	; 0x542 <read_one_press+0x14>
		return_value = current_value;					/*return pressed value */
	}
	else return_value = 2;								/*return any other value*/
     53e:	92 e0       	ldi	r25, 0x02	; 2
     540:	01 c0       	rjmp	.+2      	; 0x544 <read_one_press+0x16>
	uint8_t return_value = 0;
	
	current_value = DIO_GetPinValue(port,pin);
	
	if (current_value!= (*last_value)){
		return_value = current_value;					/*return pressed value */
     542:	98 2f       	mov	r25, r24
	}
	else return_value = 2;								/*return any other value*/
	
	*last_value = current_value;							/*update variables*/
     544:	88 83       	st	Y, r24
	
	return return_value;
}
     546:	89 2f       	mov	r24, r25
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <MapKeyPad4x4_OnePress>:
*This function is designed for 4x4 keypad
*/

uint8_t MapKeyPad4x4_OnePress(uint8_t row){
	static uint8_t lastpresses[16] = {0};
	switch (row)
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	69 f1       	breq	.+90     	; 0x5ac <MapKeyPad4x4_OnePress+0x5e>
     552:	38 f0       	brcs	.+14     	; 0x562 <MapKeyPad4x4_OnePress+0x14>
     554:	82 30       	cpi	r24, 0x02	; 2
     556:	09 f4       	brne	.+2      	; 0x55a <MapKeyPad4x4_OnePress+0xc>
     558:	4e c0       	rjmp	.+156    	; 0x5f6 <MapKeyPad4x4_OnePress+0xa8>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	09 f4       	brne	.+2      	; 0x560 <MapKeyPad4x4_OnePress+0x12>
     55e:	70 c0       	rjmp	.+224    	; 0x640 <MapKeyPad4x4_OnePress+0xf2>
     560:	91 c0       	rjmp	.+290    	; 0x684 <MapKeyPad4x4_OnePress+0x136>
	{
		case 0:											/*elements of first row*/
		{
			if (read_one_press(COL_1,&lastpresses[0])==LOW){
     562:	4f e9       	ldi	r20, 0x9F	; 159
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	64 e0       	ldi	r22, 0x04	; 4
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     56e:	88 23       	and	r24, r24
     570:	09 f4       	brne	.+2      	; 0x574 <MapKeyPad4x4_OnePress+0x26>
     572:	8a c0       	rjmp	.+276    	; 0x688 <MapKeyPad4x4_OnePress+0x13a>
				return '7';
			}
			else if (read_one_press(COL_2,&lastpresses[1])==LOW){
     574:	40 ea       	ldi	r20, 0xA0	; 160
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	65 e0       	ldi	r22, 0x05	; 5
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     580:	88 23       	and	r24, r24
     582:	09 f4       	brne	.+2      	; 0x586 <MapKeyPad4x4_OnePress+0x38>
     584:	83 c0       	rjmp	.+262    	; 0x68c <MapKeyPad4x4_OnePress+0x13e>
				return '8';
			}
			else if (read_one_press(COL_3,&lastpresses[2])==LOW){
     586:	41 ea       	ldi	r20, 0xA1	; 161
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	66 e0       	ldi	r22, 0x06	; 6
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     592:	88 23       	and	r24, r24
     594:	09 f4       	brne	.+2      	; 0x598 <MapKeyPad4x4_OnePress+0x4a>
     596:	7c c0       	rjmp	.+248    	; 0x690 <MapKeyPad4x4_OnePress+0x142>
				return '9';
			}
			else if (read_one_press(COL_4,&lastpresses[3])==LOW){
     598:	42 ea       	ldi	r20, 0xA2	; 162
     59a:	50 e0       	ldi	r21, 0x00	; 0
     59c:	67 e0       	ldi	r22, 0x07	; 7
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     5a4:	81 11       	cpse	r24, r1
     5a6:	76 c0       	rjmp	.+236    	; 0x694 <MapKeyPad4x4_OnePress+0x146>
				return '/';
     5a8:	8f e2       	ldi	r24, 0x2F	; 47
     5aa:	08 95       	ret
			}
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (read_one_press(COL_1,&lastpresses[4])==LOW){
     5ac:	43 ea       	ldi	r20, 0xA3	; 163
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	64 e0       	ldi	r22, 0x04	; 4
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     5b8:	88 23       	and	r24, r24
     5ba:	09 f4       	brne	.+2      	; 0x5be <MapKeyPad4x4_OnePress+0x70>
     5bc:	6d c0       	rjmp	.+218    	; 0x698 <MapKeyPad4x4_OnePress+0x14a>
				return '4';
			}
			else if (read_one_press(COL_2,&lastpresses[5])==LOW){
     5be:	44 ea       	ldi	r20, 0xA4	; 164
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	65 e0       	ldi	r22, 0x05	; 5
     5c4:	82 e0       	ldi	r24, 0x02	; 2
     5c6:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     5ca:	88 23       	and	r24, r24
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <MapKeyPad4x4_OnePress+0x82>
     5ce:	66 c0       	rjmp	.+204    	; 0x69c <MapKeyPad4x4_OnePress+0x14e>
				return '5';
			}
			else if (read_one_press(COL_3,&lastpresses[6])==LOW){
     5d0:	45 ea       	ldi	r20, 0xA5	; 165
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	66 e0       	ldi	r22, 0x06	; 6
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     5dc:	88 23       	and	r24, r24
     5de:	09 f4       	brne	.+2      	; 0x5e2 <MapKeyPad4x4_OnePress+0x94>
     5e0:	5f c0       	rjmp	.+190    	; 0x6a0 <MapKeyPad4x4_OnePress+0x152>
				return '6';
			}
			else if (read_one_press(COL_4,&lastpresses[7])==LOW){
     5e2:	46 ea       	ldi	r20, 0xA6	; 166
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	67 e0       	ldi	r22, 0x07	; 7
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     5ee:	81 11       	cpse	r24, r1
     5f0:	59 c0       	rjmp	.+178    	; 0x6a4 <MapKeyPad4x4_OnePress+0x156>
				return '*';
     5f2:	8a e2       	ldi	r24, 0x2A	; 42
     5f4:	08 95       	ret
			}
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (read_one_press(COL_1,&lastpresses[8])==LOW){
     5f6:	47 ea       	ldi	r20, 0xA7	; 167
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	64 e0       	ldi	r22, 0x04	; 4
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     602:	88 23       	and	r24, r24
     604:	09 f4       	brne	.+2      	; 0x608 <MapKeyPad4x4_OnePress+0xba>
     606:	50 c0       	rjmp	.+160    	; 0x6a8 <MapKeyPad4x4_OnePress+0x15a>
				return '1';
			}
			else if (read_one_press(COL_2,&lastpresses[9])==LOW){
     608:	48 ea       	ldi	r20, 0xA8	; 168
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	65 e0       	ldi	r22, 0x05	; 5
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     614:	88 23       	and	r24, r24
     616:	09 f4       	brne	.+2      	; 0x61a <MapKeyPad4x4_OnePress+0xcc>
     618:	49 c0       	rjmp	.+146    	; 0x6ac <MapKeyPad4x4_OnePress+0x15e>
				return '2';
			}
			else if (read_one_press(COL_3,&lastpresses[10])==LOW){
     61a:	49 ea       	ldi	r20, 0xA9	; 169
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	66 e0       	ldi	r22, 0x06	; 6
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     626:	88 23       	and	r24, r24
     628:	09 f4       	brne	.+2      	; 0x62c <MapKeyPad4x4_OnePress+0xde>
     62a:	42 c0       	rjmp	.+132    	; 0x6b0 <MapKeyPad4x4_OnePress+0x162>
				return '3';
			}
			else if (read_one_press(COL_4,&lastpresses[11])==LOW){
     62c:	4a ea       	ldi	r20, 0xAA	; 170
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	67 e0       	ldi	r22, 0x07	; 7
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     638:	81 11       	cpse	r24, r1
     63a:	3c c0       	rjmp	.+120    	; 0x6b4 <MapKeyPad4x4_OnePress+0x166>
				return '-';
     63c:	8d e2       	ldi	r24, 0x2D	; 45
     63e:	08 95       	ret
			}
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (read_one_press(COL_1,&lastpresses[12])==LOW){
     640:	4b ea       	ldi	r20, 0xAB	; 171
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	64 e0       	ldi	r22, 0x04	; 4
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     64c:	88 23       	and	r24, r24
     64e:	a1 f1       	breq	.+104    	; 0x6b8 <MapKeyPad4x4_OnePress+0x16a>
				return 'o';
			}
			else if (read_one_press(COL_2,&lastpresses[13])==LOW){
     650:	4c ea       	ldi	r20, 0xAC	; 172
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	65 e0       	ldi	r22, 0x05	; 5
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     65c:	88 23       	and	r24, r24
     65e:	71 f1       	breq	.+92     	; 0x6bc <MapKeyPad4x4_OnePress+0x16e>
				return '0';
			}
			else if (read_one_press(COL_3,&lastpresses[14])==LOW){
     660:	4d ea       	ldi	r20, 0xAD	; 173
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	66 e0       	ldi	r22, 0x06	; 6
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     66c:	88 23       	and	r24, r24
     66e:	41 f1       	breq	.+80     	; 0x6c0 <MapKeyPad4x4_OnePress+0x172>
				return '=';
			}
			else if (read_one_press(COL_4,&lastpresses[15])==LOW){
     670:	4e ea       	ldi	r20, 0xAE	; 174
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	67 e0       	ldi	r22, 0x07	; 7
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	0e 94 97 02 	call	0x52e	; 0x52e <read_one_press>
     67c:	81 11       	cpse	r24, r1
     67e:	22 c0       	rjmp	.+68     	; 0x6c4 <MapKeyPad4x4_OnePress+0x176>
				return '+';
     680:	8b e2       	ldi	r24, 0x2B	; 43
     682:	08 95       	ret
			}
		}
		default:
		return 0;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret
	switch (row)
	{
		case 0:											/*elements of first row*/
		{
			if (read_one_press(COL_1,&lastpresses[0])==LOW){
				return '7';
     688:	87 e3       	ldi	r24, 0x37	; 55
     68a:	08 95       	ret
			}
			else if (read_one_press(COL_2,&lastpresses[1])==LOW){
				return '8';
     68c:	88 e3       	ldi	r24, 0x38	; 56
     68e:	08 95       	ret
			}
			else if (read_one_press(COL_3,&lastpresses[2])==LOW){
				return '9';
     690:	89 e3       	ldi	r24, 0x39	; 57
     692:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret
			break;
		}
		case 1:											/*elements of second row*/
		{
			if (read_one_press(COL_1,&lastpresses[4])==LOW){
				return '4';
     698:	84 e3       	ldi	r24, 0x34	; 52
     69a:	08 95       	ret
			}
			else if (read_one_press(COL_2,&lastpresses[5])==LOW){
				return '5';
     69c:	85 e3       	ldi	r24, 0x35	; 53
     69e:	08 95       	ret
			}
			else if (read_one_press(COL_3,&lastpresses[6])==LOW){
				return '6';
     6a0:	86 e3       	ldi	r24, 0x36	; 54
     6a2:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
			break;
		}
		case 2:											/*elements of third row*/
		{
			if (read_one_press(COL_1,&lastpresses[8])==LOW){
				return '1';
     6a8:	81 e3       	ldi	r24, 0x31	; 49
     6aa:	08 95       	ret
			}
			else if (read_one_press(COL_2,&lastpresses[9])==LOW){
				return '2';
     6ac:	82 e3       	ldi	r24, 0x32	; 50
     6ae:	08 95       	ret
			}
			else if (read_one_press(COL_3,&lastpresses[10])==LOW){
				return '3';
     6b0:	83 e3       	ldi	r24, 0x33	; 51
     6b2:	08 95       	ret
		}
		default:
		return 0;
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret
			break;
		}
		case 3:											/*elements of fourth row*/
		{
			if (read_one_press(COL_1,&lastpresses[12])==LOW){
				return 'o';
     6b8:	8f e6       	ldi	r24, 0x6F	; 111
     6ba:	08 95       	ret
			}
			else if (read_one_press(COL_2,&lastpresses[13])==LOW){
				return '0';
     6bc:	80 e3       	ldi	r24, 0x30	; 48
     6be:	08 95       	ret
			}
			else if (read_one_press(COL_3,&lastpresses[14])==LOW){
				return '=';
     6c0:	8d e3       	ldi	r24, 0x3D	; 61
     6c2:	08 95       	ret
			else if (read_one_press(COL_4,&lastpresses[15])==LOW){
				return '+';
			}
		}
		default:
		return 0;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return NO_KEY_PRESSED;										/*return if no key is pressed in the selected row*/
     6c6:	08 95       	ret

000006c8 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
	//CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, LOW);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	61 e0       	ldi	r22, 0x01	; 1
     6d4:	83 e0       	ldi	r24, 0x03	; 3
     6d6:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tas = 50ns */
	Timer_Delay(0.000001, timer0_config1);
     6e4:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     6e8:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     6ec:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     6f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     6f4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     6f8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     6fc:	6d eb       	ldi	r22, 0xBD	; 189
     6fe:	77 e3       	ldi	r23, 0x37	; 55
     700:	86 e8       	ldi	r24, 0x86	; 134
     702:	95 e3       	ldi	r25, 0x35	; 53
     704:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     708:	41 e0       	ldi	r20, 0x01	; 1
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     712:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     716:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     71a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     71e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     722:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     726:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     72a:	6d eb       	ldi	r22, 0xBD	; 189
     72c:	77 e3       	ldi	r23, 0x37	; 55
     72e:	86 e8       	ldi	r24, 0x86	; 134
     730:	95 e3       	ldi	r25, 0x35	; 53
     732:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
		DIO_SetUpperHalfPortValue(LCD_DATA_PORT, (command & 0xF0));
     736:	6c 2f       	mov	r22, r28
     738:	60 7f       	andi	r22, 0xF0	; 240
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	0e 94 10 07 	call	0xe20	; 0xe20 <DIO_SetUpperHalfPortValue>
		//DIO_SetPortValue(LCD_DATA_PORT, (command & 0xF0) >> 4);
		DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (command & 0xF0) >> 4);
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     740:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     744:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     748:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     74c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     750:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     754:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     758:	6d eb       	ldi	r22, 0xBD	; 189
     75a:	77 e3       	ldi	r23, 0x37	; 55
     75c:	86 e8       	ldi	r24, 0x86	; 134
     75e:	95 e3       	ldi	r25, 0x35	; 53
     760:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	63 e0       	ldi	r22, 0x03	; 3
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     76e:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     772:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     776:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     77a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     77e:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     782:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     786:	6d eb       	ldi	r22, 0xBD	; 189
     788:	77 e3       	ldi	r23, 0x37	; 55
     78a:	86 e8       	ldi	r24, 0x86	; 134
     78c:	95 e3       	ldi	r25, 0x35	; 53
     78e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
//	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	63 e0       	ldi	r22, 0x03	; 3
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     79c:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     7a0:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     7a4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     7a8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     7ac:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     7b0:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     7b4:	6d eb       	ldi	r22, 0xBD	; 189
     7b6:	77 e3       	ldi	r23, 0x37	; 55
     7b8:	86 e8       	ldi	r24, 0x86	; 134
     7ba:	95 e3       	ldi	r25, 0x35	; 53
     7bc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, ((command & 0x0F) << 4));
     7c0:	80 e1       	ldi	r24, 0x10	; 16
     7c2:	c8 9f       	mul	r28, r24
     7c4:	b0 01       	movw	r22, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	0e 94 10 07 	call	0xe20	; 0xe20 <DIO_SetUpperHalfPortValue>
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (command & 0x0F));
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     7ce:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     7d2:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     7d6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     7da:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     7de:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     7e2:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     7e6:	6d eb       	ldi	r22, 0xBD	; 189
     7e8:	77 e3       	ldi	r23, 0x37	; 55
     7ea:	86 e8       	ldi	r24, 0x86	; 134
     7ec:	95 e3       	ldi	r25, 0x35	; 53
     7ee:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	63 e0       	ldi	r22, 0x03	; 3
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     7fc:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     800:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     804:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     808:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     80c:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     810:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     814:	6d eb       	ldi	r22, 0xBD	; 189
     816:	77 e3       	ldi	r23, 0x37	; 55
     818:	86 e8       	ldi	r24, 0x86	; 134
     81a:	95 e3       	ldi	r25, 0x35	; 53
     81c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
#endif
}
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	08 95       	ret

00000828 <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
//	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, E, OUTPUT);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	63 e0       	ldi	r22, 0x03	; 3
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT);
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	83 e0       	ldi	r24, 0x03	; 3
     838:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT);
     83c:	41 e0       	ldi	r20, 0x01	; 1
     83e:	62 e0       	ldi	r22, 0x02	; 2
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
	
	DIO_SetPortValue(LCD_CTRL_PORT_DIR, 0x00);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 00 07 	call	0xe00	; 0xe00 <DIO_SetPortValue>
	DIO_SetPortValue(LCD_DATA_PORT_DIR, 0x00);
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	83 e0       	ldi	r24, 0x03	; 3
     852:	0e 94 00 07 	call	0xe00	; 0xe00 <DIO_SetPortValue>

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			//LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 4, OUTPUT);
     856:	41 e0       	ldi	r20, 0x01	; 1
     858:	64 e0       	ldi	r22, 0x04	; 4
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 5, OUTPUT);
     860:	41 e0       	ldi	r20, 0x01	; 1
     862:	65 e0       	ldi	r22, 0x05	; 5
     864:	83 e0       	ldi	r24, 0x03	; 3
     866:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 6, OUTPUT);
     86a:	41 e0       	ldi	r20, 0x01	; 1
     86c:	66 e0       	ldi	r22, 0x06	; 6
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 7, OUTPUT);
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	67 e0       	ldi	r22, 0x07	; 7
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 0, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 1, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 2, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 3, OUTPUT);
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     884:	88 e2       	ldi	r24, 0x28	; 40
     886:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
		//LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		DIO_SetPortDirection(LCD_DATA_PORT_DIR, OUTPUT);
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     88a:	8c e0       	ldi	r24, 0x0C	; 12
     88c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
     896:	08 95       	ret

00000898 <LCD_displayCharacter>:
	Timer_Delay(0.000001, timer0_config1);
#endif
}

void LCD_displayCharacter(uint8_t data)
{
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	c8 2f       	mov	r28, r24
	//SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, HIGH);
     8a0:	41 e0       	ldi	r20, 0x01	; 1
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	62 e0       	ldi	r22, 0x02	; 2
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tas = 50ns */
	Timer_Delay(0.000001, timer0_config1);
     8b4:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     8b8:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     8bc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     8c0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     8c4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     8c8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     8cc:	6d eb       	ldi	r22, 0xBD	; 189
     8ce:	77 e3       	ldi	r23, 0x37	; 55
     8d0:	86 e8       	ldi	r24, 0x86	; 134
     8d2:	95 e3       	ldi	r25, 0x35	; 53
     8d4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     8d8:	41 e0       	ldi	r20, 0x01	; 1
     8da:	63 e0       	ldi	r22, 0x03	; 3
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     8e2:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     8e6:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     8ea:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     8ee:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     8f2:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     8f6:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     8fa:	6d eb       	ldi	r22, 0xBD	; 189
     8fc:	77 e3       	ldi	r23, 0x37	; 55
     8fe:	86 e8       	ldi	r24, 0x86	; 134
     900:	95 e3       	ldi	r25, 0x35	; 53
     902:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, (data & 0xF0));
     906:	6c 2f       	mov	r22, r28
     908:	60 7f       	andi	r22, 0xF0	; 240
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 10 07 	call	0xe20	; 0xe20 <DIO_SetUpperHalfPortValue>
//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (data & 0xF0)>>4);
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     910:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     914:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     918:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     91c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     920:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     924:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     928:	6d eb       	ldi	r22, 0xBD	; 189
     92a:	77 e3       	ldi	r23, 0x37	; 55
     92c:	86 e8       	ldi	r24, 0x86	; 134
     92e:	95 e3       	ldi	r25, 0x35	; 53
     930:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	63 e0       	ldi	r22, 0x03	; 3
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     93e:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     942:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     946:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     94a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     94e:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     952:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     956:	6d eb       	ldi	r22, 0xBD	; 189
     958:	77 e3       	ldi	r23, 0x37	; 55
     95a:	86 e8       	ldi	r24, 0x86	; 134
     95c:	95 e3       	ldi	r25, 0x35	; 53
     95e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
//	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     96c:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     970:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     974:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     978:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     97c:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     980:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     984:	6d eb       	ldi	r22, 0xBD	; 189
     986:	77 e3       	ldi	r23, 0x37	; 55
     988:	86 e8       	ldi	r24, 0x86	; 134
     98a:	95 e3       	ldi	r25, 0x35	; 53
     98c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, ((data & 0x0F) << 4));
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	c8 9f       	mul	r28, r24
     994:	b0 01       	movw	r22, r0
     996:	11 24       	eor	r1, r1
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	0e 94 10 07 	call	0xe20	; 0xe20 <DIO_SetUpperHalfPortValue>
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (data & 0x0F));
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     99e:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     9a2:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     9a6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     9aa:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     9ae:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     9b2:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     9b6:	6d eb       	ldi	r22, 0xBD	; 189
     9b8:	77 e3       	ldi	r23, 0x37	; 55
     9ba:	86 e8       	ldi	r24, 0x86	; 134
     9bc:	95 e3       	ldi	r25, 0x35	; 53
     9be:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	63 e0       	ldi	r22, 0x03	; 3
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     9cc:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     9d0:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     9d4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     9d8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     9dc:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     9e0:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     9e4:	6d eb       	ldi	r22, 0xBD	; 189
     9e6:	77 e3       	ldi	r23, 0x37	; 55
     9e8:	86 e8       	ldi	r24, 0x86	; 134
     9ea:	95 e3       	ldi	r25, 0x35	; 53
     9ec:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <Timer_Delay>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
#endif
}
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <LCD_displayString>:

void LCD_displayString(char *Str)
{
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     a00:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     a04:	0e 94 4c 04 	call	0x898	; 0x898 <LCD_displayCharacter>
		i++;
     a08:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
     a0a:	f8 01       	movw	r30, r16
     a0c:	ec 0f       	add	r30, r28
     a0e:	f1 1d       	adc	r31, r1
     a10:	80 81       	ld	r24, Z
     a12:	81 11       	cpse	r24, r1
     a14:	f7 cf       	rjmp	.-18     	; 0xa04 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
     a16:	cf 91       	pop	r28
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	08 95       	ret

00000a1e <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address = 0;

	/* first of all calculate the required address */
	switch(row)
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	39 f0       	breq	.+14     	; 0xa30 <LCD_goToRowColumn+0x12>
     a22:	58 f0       	brcs	.+22     	; 0xa3a <LCD_goToRowColumn+0x1c>
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	31 f0       	breq	.+12     	; 0xa34 <LCD_goToRowColumn+0x16>
     a28:	83 30       	cpi	r24, 0x03	; 3
     a2a:	31 f0       	breq	.+12     	; 0xa38 <LCD_goToRowColumn+0x1a>
	*********************************************************/
}

void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address = 0;
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	05 c0       	rjmp	.+10     	; 0xa3a <LCD_goToRowColumn+0x1c>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
     a30:	60 5c       	subi	r22, 0xC0	; 192
				break;
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <LCD_goToRowColumn+0x1c>
		case 2:
				Address=col+0x10;
     a34:	60 5f       	subi	r22, 0xF0	; 240
				break;
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <LCD_goToRowColumn+0x1c>
		case 3:
				Address=col+0x50;
     a38:	60 5b       	subi	r22, 0xB0	; 176
				break;
			
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
     a3a:	86 2f       	mov	r24, r22
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
     a42:	08 95       	ret

00000a44 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,char *Str)
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
     a4a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
     a4e:	ce 01       	movw	r24, r28
     a50:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <LCD_displayString>
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <LCD_clearScreen>:
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_sendCommand>
     a60:	08 95       	ret

00000a62 <Lm35_init>:
 */ 

#include "LM35.h"
void Lm35_init(EN_SensorID_t SensorID)
{
	ADC_Init(AutoTrig_FreeRun, ADC_Div_128, ADC_Polling, _2_56V_VoltREF); // initialize ADC
     a62:	20 ec       	ldi	r18, 0xC0	; 192
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	67 e0       	ldi	r22, 0x07	; 7
     a68:	80 e2       	ldi	r24, 0x20	; 32
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 9c 05 	call	0xb38	; 0xb38 <ADC_Init>
     a70:	08 95       	ret

00000a72 <Lm35_GetTemp>:
}
uint8_t Lm35_GetTemp(EN_SensorID_t SensorID)
{
	return ADC_GetReading(SensorID); // get the converted reading from ADC data register
     a72:	0e 94 b0 05 	call	0xb60	; 0xb60 <ADC_GetReading>
}
     a76:	08 95       	ret

00000a78 <Motor_init>:
 * Expected OUTPUT: Setting Pins of PWM and Direction as output.
					Initializing PWM.
 */

void Motor_init(ST_MOTORconfig_t config)
{
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <Motor_init+0x8>
     a80:	00 d0       	rcall	.+0      	; 0xa82 <Motor_init+0xa>
     a82:	1f 92       	push	r1
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	49 83       	std	Y+1, r20	; 0x01
     a8a:	5a 83       	std	Y+2, r21	; 0x02
     a8c:	6b 83       	std	Y+3, r22	; 0x03
     a8e:	7c 83       	std	Y+4, r23	; 0x04
	if(config.PWM_ID == PWM1)
     a90:	18 2f       	mov	r17, r24
     a92:	81 11       	cpse	r24, r1
     a94:	06 c0       	rjmp	.+12     	; 0xaa2 <Motor_init+0x2a>
		pwm_init(PWM1,NON_INVERTING_MODE,PRESCALAR);
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <pwm_init>
		
	if(config.PWM_ID == PWM2)
     aa2:	11 30       	cpi	r17, 0x01	; 1
     aa4:	31 f4       	brne	.+12     	; 0xab2 <Motor_init+0x3a>
		pwm_init(PWM2,NON_INVERTING_MODE,PRESCALAR);
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <pwm_init>
			
	if (config.DIR1_PIN <= 7 && config.DIR2_PIN <= 7 ){
     ab2:	6a 81       	ldd	r22, Y+2	; 0x02
     ab4:	68 30       	cpi	r22, 0x08	; 8
     ab6:	60 f4       	brcc	.+24     	; 0xad0 <Motor_init+0x58>
     ab8:	1c 81       	ldd	r17, Y+4	; 0x04
     aba:	18 30       	cpi	r17, 0x08	; 8
     abc:	48 f4       	brcc	.+18     	; 0xad0 <Motor_init+0x58>
		DIO_SetPinDirection(config.DIR1_PORT,config.DIR1_PIN,OUTPUT);
     abe:	41 e0       	ldi	r20, 0x01	; 1
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>
		DIO_SetPinDirection(config.DIR2_PORT,config.DIR2_PIN,OUTPUT);
     ac6:	41 e0       	ldi	r20, 0x01	; 1
     ac8:	61 2f       	mov	r22, r17
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	0e 94 be 05 	call	0xb7c	; 0xb7c <DIO_SetPinDirection>

	}

	
}
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	08 95       	ret

00000ae2 <Motor_moveForward>:
 *	Inputs ST_MOTORconfig_t motor ID config , uint8_t speed percentage from 0 to 100
 *	void return. 
 *	Expected output: Motor rotate clockwise if inputs are valid 
 */
void Motor_moveForward(ST_MOTORconfig_t config,uint8_t speed)
{
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	00 d0       	rcall	.+0      	; 0xaea <Motor_moveForward+0x8>
     aea:	00 d0       	rcall	.+0      	; 0xaec <Motor_moveForward+0xa>
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	94 2f       	mov	r25, r20
     af4:	6b 83       	std	Y+3, r22	; 0x03
     af6:	7c 83       	std	Y+4, r23	; 0x04
     af8:	8d 83       	std	Y+5, r24	; 0x05
     afa:	12 2f       	mov	r17, r18
	DIO_SetPinValue(config.DIR1_PORT,config.DIR1_PIN,MOTOR_LOW);
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	65 2f       	mov	r22, r21
     b00:	89 2f       	mov	r24, r25
     b02:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>
	DIO_SetPinValue(config.DIR2_PORT,config.DIR2_PIN,MOTOR_HIGH);
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	6c 81       	ldd	r22, Y+4	; 0x04
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	0e 94 8b 06 	call	0xd16	; 0xd16 <DIO_SetPinValue>

	if (speed>=0 && speed <=100)
     b10:	15 36       	cpi	r17, 0x65	; 101
     b12:	20 f4       	brcc	.+8      	; 0xb1c <Motor_moveForward+0x3a>
		pwm_SetSpeed(config.PWM_ID,speed);
     b14:	61 2f       	mov	r22, r17
     b16:	8d 81       	ldd	r24, Y+5	; 0x05
     b18:	0e 94 0a 08 	call	0x1014	; 0x1014 <pwm_SetSpeed>
}
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	08 95       	ret

00000b2e <main>:


int main(void)
{
	
	App_Init();
     b2e:	0e 94 49 00 	call	0x92	; 0x92 <App_Init>

    while (1) 
    {
		app();
     b32:	0e 94 1d 01 	call	0x23a	; 0x23a <app>
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <main+0x4>

00000b38 <ADC_Init>:
 */
void ADC_Init(ADC_Mode Mode, ADC_Prescale Prescaler, ADC_ConvCompleteCheck int_or_pol,
               ADC_VoltRef ref_volt)
{
	// reset registers
	ADMUX  = 0x00;
     b38:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
     b3a:	16 b8       	out	0x06, r1	; 6
    // set ADEN in ADCSRA (ADC Enable)
    SET_BIT(ADCSRA,7);
     b3c:	36 b1       	in	r19, 0x06	; 6
     b3e:	30 68       	ori	r19, 0x80	; 128
     b40:	36 b9       	out	0x06, r19	; 6
	// enable channel & define the refrence voltage
	ADMUX |= ref_volt;  //0b11000010
     b42:	37 b1       	in	r19, 0x07	; 7
     b44:	23 2b       	or	r18, r19
     b46:	27 b9       	out	0x07, r18	; 7
	// set preescaler & trigger mode & int_or_polling
	ADCSRA |=  (Prescaler | Mode | int_or_pol); //0b00011011;
     b48:	26 b1       	in	r18, 0x06	; 6
     b4a:	86 2b       	or	r24, r22
     b4c:	48 2b       	or	r20, r24
     b4e:	24 2b       	or	r18, r20
     b50:	26 b9       	out	0x06, r18	; 6
	// clear SFIOR (last 4 bits)
	SFIOR &= ~(0xE0);
     b52:	80 b7       	in	r24, 0x30	; 48
     b54:	8f 71       	andi	r24, 0x1F	; 31
     b56:	80 bf       	out	0x30, r24	; 48
	// set auto-trigger mode
	SFIOR |= (Mode>>8);
     b58:	80 b7       	in	r24, 0x30	; 48
     b5a:	98 2b       	or	r25, r24
     b5c:	90 bf       	out	0x30, r25	; 48
     b5e:	08 95       	ret

00000b60 <ADC_GetReading>:
 * Ex: uint16_t result = Adc_getReading(ADC3_Channel);
 */
uint16_t ADC_GetReading(ADC_Ch_Select channel)
{
	// select ADC channel
	ADMUX |=  channel;
     b60:	97 b1       	in	r25, 0x07	; 7
     b62:	89 2b       	or	r24, r25
     b64:	87 b9       	out	0x07, r24	; 7
	// set ADSC in ADCSRA ADC (start conversion)
	SET_BIT(ADCSRA,6);
     b66:	86 b1       	in	r24, 0x06	; 6
     b68:	80 64       	ori	r24, 0x40	; 64
     b6a:	86 b9       	out	0x06, r24	; 6
	// wait until flag is set (conversion completed)
	while(!GET_BIT(ADCSRA,4));
     b6c:	34 9b       	sbis	0x06, 4	; 6
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <ADC_GetReading+0xc>
	
	uint16_t reading = ADC_DATA; // store ADC data register value
     b70:	86 b1       	in	r24, 0x06	; 6
     b72:	80 61       	ori	r24, 0x10	; 16
     b74:	86 b9       	out	0x06, r24	; 6
	
     b76:	84 b1       	in	r24, 0x04	; 4
     b78:	95 b1       	in	r25, 0x05	; 5
	// clear the flag (must be done after reading adc data)
	SET_BIT(ADCSRA,4);
	
     b7a:	08 95       	ret

00000b7c <DIO_SetPinDirection>:
		case portC :
		PORTC_REG = (PORTC_REG & 0xF0) | Value ;
		break;
		
		case portD :
		PORTD_REG = (PORTD_REG & 0xF0) |  Value  ;
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	c9 f1       	breq	.+114    	; 0xbf2 <DIO_SetPinDirection+0x76>
     b80:	38 f0       	brcs	.+14     	; 0xb90 <DIO_SetPinDirection+0x14>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	09 f4       	brne	.+2      	; 0xb88 <DIO_SetPinDirection+0xc>
     b86:	66 c0       	rjmp	.+204    	; 0xc54 <DIO_SetPinDirection+0xd8>
     b88:	83 30       	cpi	r24, 0x03	; 3
     b8a:	09 f4       	brne	.+2      	; 0xb8e <DIO_SetPinDirection+0x12>
     b8c:	94 c0       	rjmp	.+296    	; 0xcb6 <DIO_SetPinDirection+0x13a>
     b8e:	08 95       	ret
     b90:	41 30       	cpi	r20, 0x01	; 1
     b92:	59 f4       	brne	.+22     	; 0xbaa <DIO_SetPinDirection+0x2e>
     b94:	2a b3       	in	r18, 0x1a	; 26
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_SetPinDirection+0x24>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	6a 95       	dec	r22
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_SetPinDirection+0x20>
     ba4:	82 2b       	or	r24, r18
     ba6:	8a bb       	out	0x1a, r24	; 26
     ba8:	08 95       	ret
     baa:	41 11       	cpse	r20, r1
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <DIO_SetPinDirection+0x4a>
     bae:	2a b3       	in	r18, 0x1a	; 26
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_SetPinDirection+0x3e>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	6a 95       	dec	r22
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_SetPinDirection+0x3a>
     bbe:	80 95       	com	r24
     bc0:	82 23       	and	r24, r18
     bc2:	8a bb       	out	0x1a, r24	; 26
     bc4:	08 95       	ret
     bc6:	42 30       	cpi	r20, 0x02	; 2
     bc8:	09 f0       	breq	.+2      	; 0xbcc <DIO_SetPinDirection+0x50>
     bca:	a4 c0       	rjmp	.+328    	; 0xd14 <DIO_SetPinDirection+0x198>
     bcc:	2a b3       	in	r18, 0x1a	; 26
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_SetPinDirection+0x5c>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	6a 95       	dec	r22
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_SetPinDirection+0x58>
     bdc:	98 2f       	mov	r25, r24
     bde:	90 95       	com	r25
     be0:	92 23       	and	r25, r18
     be2:	9a bb       	out	0x1a, r25	; 26
     be4:	90 b7       	in	r25, 0x30	; 48
     be6:	9b 7f       	andi	r25, 0xFB	; 251
     be8:	90 bf       	out	0x30, r25	; 48
     bea:	9b b3       	in	r25, 0x1b	; 27
     bec:	89 2b       	or	r24, r25
     bee:	8b bb       	out	0x1b, r24	; 27
     bf0:	08 95       	ret
     bf2:	41 30       	cpi	r20, 0x01	; 1
     bf4:	59 f4       	brne	.+22     	; 0xc0c <DIO_SetPinDirection+0x90>
     bf6:	27 b3       	in	r18, 0x17	; 23
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_SetPinDirection+0x86>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	6a 95       	dec	r22
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_SetPinDirection+0x82>
     c06:	82 2b       	or	r24, r18
     c08:	87 bb       	out	0x17, r24	; 23
     c0a:	08 95       	ret
     c0c:	41 11       	cpse	r20, r1
     c0e:	0c c0       	rjmp	.+24     	; 0xc28 <DIO_SetPinDirection+0xac>
     c10:	27 b3       	in	r18, 0x17	; 23
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_SetPinDirection+0xa0>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	6a 95       	dec	r22
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_SetPinDirection+0x9c>
     c20:	80 95       	com	r24
     c22:	82 23       	and	r24, r18
     c24:	87 bb       	out	0x17, r24	; 23
     c26:	08 95       	ret
     c28:	42 30       	cpi	r20, 0x02	; 2
     c2a:	09 f0       	breq	.+2      	; 0xc2e <DIO_SetPinDirection+0xb2>
     c2c:	73 c0       	rjmp	.+230    	; 0xd14 <DIO_SetPinDirection+0x198>
     c2e:	27 b3       	in	r18, 0x17	; 23
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_SetPinDirection+0xbe>
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	6a 95       	dec	r22
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_SetPinDirection+0xba>
     c3e:	98 2f       	mov	r25, r24
     c40:	90 95       	com	r25
     c42:	92 23       	and	r25, r18
     c44:	97 bb       	out	0x17, r25	; 23
     c46:	90 b7       	in	r25, 0x30	; 48
     c48:	9b 7f       	andi	r25, 0xFB	; 251
     c4a:	90 bf       	out	0x30, r25	; 48
     c4c:	98 b3       	in	r25, 0x18	; 24
     c4e:	89 2b       	or	r24, r25
     c50:	88 bb       	out	0x18, r24	; 24
     c52:	08 95       	ret
     c54:	41 30       	cpi	r20, 0x01	; 1
     c56:	59 f4       	brne	.+22     	; 0xc6e <DIO_SetPinDirection+0xf2>
     c58:	24 b3       	in	r18, 0x14	; 20
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_SetPinDirection+0xe8>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	6a 95       	dec	r22
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_SetPinDirection+0xe4>
     c68:	82 2b       	or	r24, r18
     c6a:	84 bb       	out	0x14, r24	; 20
     c6c:	08 95       	ret
     c6e:	41 11       	cpse	r20, r1
     c70:	0c c0       	rjmp	.+24     	; 0xc8a <DIO_SetPinDirection+0x10e>
     c72:	24 b3       	in	r18, 0x14	; 20
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <DIO_SetPinDirection+0x102>
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	6a 95       	dec	r22
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <DIO_SetPinDirection+0xfe>
     c82:	80 95       	com	r24
     c84:	82 23       	and	r24, r18
     c86:	84 bb       	out	0x14, r24	; 20
     c88:	08 95       	ret
     c8a:	42 30       	cpi	r20, 0x02	; 2
     c8c:	09 f0       	breq	.+2      	; 0xc90 <DIO_SetPinDirection+0x114>
     c8e:	42 c0       	rjmp	.+132    	; 0xd14 <DIO_SetPinDirection+0x198>
     c90:	24 b3       	in	r18, 0x14	; 20
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_SetPinDirection+0x120>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	6a 95       	dec	r22
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_SetPinDirection+0x11c>
     ca0:	98 2f       	mov	r25, r24
     ca2:	90 95       	com	r25
     ca4:	92 23       	and	r25, r18
     ca6:	94 bb       	out	0x14, r25	; 20
     ca8:	90 b7       	in	r25, 0x30	; 48
     caa:	9b 7f       	andi	r25, 0xFB	; 251
     cac:	90 bf       	out	0x30, r25	; 48
     cae:	95 b3       	in	r25, 0x15	; 21
     cb0:	89 2b       	or	r24, r25
     cb2:	85 bb       	out	0x15, r24	; 21
     cb4:	08 95       	ret
     cb6:	41 30       	cpi	r20, 0x01	; 1
     cb8:	59 f4       	brne	.+22     	; 0xcd0 <DIO_SetPinDirection+0x154>
     cba:	21 b3       	in	r18, 0x11	; 17
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_SetPinDirection+0x14a>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_SetPinDirection+0x146>
     cca:	82 2b       	or	r24, r18
     ccc:	81 bb       	out	0x11, r24	; 17
     cce:	08 95       	ret
     cd0:	41 11       	cpse	r20, r1
     cd2:	0c c0       	rjmp	.+24     	; 0xcec <DIO_SetPinDirection+0x170>
     cd4:	21 b3       	in	r18, 0x11	; 17
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_SetPinDirection+0x164>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	6a 95       	dec	r22
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_SetPinDirection+0x160>
     ce4:	80 95       	com	r24
     ce6:	82 23       	and	r24, r18
     ce8:	81 bb       	out	0x11, r24	; 17
     cea:	08 95       	ret
     cec:	42 30       	cpi	r20, 0x02	; 2
     cee:	91 f4       	brne	.+36     	; 0xd14 <DIO_SetPinDirection+0x198>
     cf0:	21 b3       	in	r18, 0x11	; 17
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_SetPinDirection+0x180>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	6a 95       	dec	r22
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_SetPinDirection+0x17c>
     d00:	98 2f       	mov	r25, r24
     d02:	90 95       	com	r25
     d04:	92 23       	and	r25, r18
     d06:	91 bb       	out	0x11, r25	; 17
     d08:	90 b7       	in	r25, 0x30	; 48
     d0a:	9b 7f       	andi	r25, 0xFB	; 251
     d0c:	90 bf       	out	0x30, r25	; 48
     d0e:	92 b3       	in	r25, 0x12	; 18
     d10:	89 2b       	or	r24, r25
     d12:	82 bb       	out	0x12, r24	; 18
     d14:	08 95       	ret

00000d16 <DIO_SetPinValue>:
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	11 f1       	breq	.+68     	; 0xd5e <DIO_SetPinValue+0x48>
     d1a:	30 f0       	brcs	.+12     	; 0xd28 <DIO_SetPinValue+0x12>
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	d1 f1       	breq	.+116    	; 0xd94 <DIO_SetPinValue+0x7e>
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_SetPinValue+0x10>
     d24:	52 c0       	rjmp	.+164    	; 0xdca <DIO_SetPinValue+0xb4>
     d26:	08 95       	ret
     d28:	41 30       	cpi	r20, 0x01	; 1
     d2a:	59 f4       	brne	.+22     	; 0xd42 <DIO_SetPinValue+0x2c>
     d2c:	2b b3       	in	r18, 0x1b	; 27
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_SetPinValue+0x22>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	6a 95       	dec	r22
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_SetPinValue+0x1e>
     d3c:	82 2b       	or	r24, r18
     d3e:	8b bb       	out	0x1b, r24	; 27
     d40:	08 95       	ret
     d42:	41 11       	cpse	r20, r1
     d44:	5c c0       	rjmp	.+184    	; 0xdfe <DIO_SetPinValue+0xe8>
     d46:	2b b3       	in	r18, 0x1b	; 27
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_SetPinValue+0x3c>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_SetPinValue+0x38>
     d56:	80 95       	com	r24
     d58:	82 23       	and	r24, r18
     d5a:	8b bb       	out	0x1b, r24	; 27
     d5c:	08 95       	ret
     d5e:	41 30       	cpi	r20, 0x01	; 1
     d60:	59 f4       	brne	.+22     	; 0xd78 <DIO_SetPinValue+0x62>
     d62:	28 b3       	in	r18, 0x18	; 24
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_SetPinValue+0x58>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	6a 95       	dec	r22
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_SetPinValue+0x54>
     d72:	82 2b       	or	r24, r18
     d74:	88 bb       	out	0x18, r24	; 24
     d76:	08 95       	ret
     d78:	41 11       	cpse	r20, r1
     d7a:	41 c0       	rjmp	.+130    	; 0xdfe <DIO_SetPinValue+0xe8>
     d7c:	28 b3       	in	r18, 0x18	; 24
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_SetPinValue+0x72>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	6a 95       	dec	r22
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_SetPinValue+0x6e>
     d8c:	80 95       	com	r24
     d8e:	82 23       	and	r24, r18
     d90:	88 bb       	out	0x18, r24	; 24
     d92:	08 95       	ret
     d94:	41 30       	cpi	r20, 0x01	; 1
     d96:	59 f4       	brne	.+22     	; 0xdae <DIO_SetPinValue+0x98>
     d98:	25 b3       	in	r18, 0x15	; 21
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_SetPinValue+0x8e>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	6a 95       	dec	r22
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_SetPinValue+0x8a>
     da8:	82 2b       	or	r24, r18
     daa:	85 bb       	out	0x15, r24	; 21
     dac:	08 95       	ret
     dae:	41 11       	cpse	r20, r1
     db0:	26 c0       	rjmp	.+76     	; 0xdfe <DIO_SetPinValue+0xe8>
     db2:	25 b3       	in	r18, 0x15	; 21
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_SetPinValue+0xa8>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	6a 95       	dec	r22
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_SetPinValue+0xa4>
     dc2:	80 95       	com	r24
     dc4:	82 23       	and	r24, r18
     dc6:	85 bb       	out	0x15, r24	; 21
     dc8:	08 95       	ret
     dca:	41 30       	cpi	r20, 0x01	; 1
     dcc:	59 f4       	brne	.+22     	; 0xde4 <DIO_SetPinValue+0xce>
     dce:	22 b3       	in	r18, 0x12	; 18
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <DIO_SetPinValue+0xc4>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	6a 95       	dec	r22
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <DIO_SetPinValue+0xc0>
     dde:	82 2b       	or	r24, r18
     de0:	82 bb       	out	0x12, r24	; 18
     de2:	08 95       	ret
     de4:	41 11       	cpse	r20, r1
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <DIO_SetPinValue+0xe8>
     de8:	22 b3       	in	r18, 0x12	; 18
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_SetPinValue+0xde>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	6a 95       	dec	r22
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_SetPinValue+0xda>
     df8:	80 95       	com	r24
     dfa:	82 23       	and	r24, r18
     dfc:	82 bb       	out	0x12, r24	; 18
     dfe:	08 95       	ret

00000e00 <DIO_SetPortValue>:
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	41 f0       	breq	.+16     	; 0xe14 <DIO_SetPortValue+0x14>
     e04:	28 f0       	brcs	.+10     	; 0xe10 <DIO_SetPortValue+0x10>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	39 f0       	breq	.+14     	; 0xe18 <DIO_SetPortValue+0x18>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	39 f0       	breq	.+14     	; 0xe1c <DIO_SetPortValue+0x1c>
     e0e:	08 95       	ret
     e10:	6b bb       	out	0x1b, r22	; 27
     e12:	08 95       	ret
     e14:	68 bb       	out	0x18, r22	; 24
     e16:	08 95       	ret
     e18:	65 bb       	out	0x15, r22	; 21
     e1a:	08 95       	ret
     e1c:	62 bb       	out	0x12, r22	; 18
     e1e:	08 95       	ret

00000e20 <DIO_SetUpperHalfPortValue>:
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	59 f0       	breq	.+22     	; 0xe3a <DIO_SetUpperHalfPortValue+0x1a>
     e24:	28 f0       	brcs	.+10     	; 0xe30 <DIO_SetUpperHalfPortValue+0x10>
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	69 f0       	breq	.+26     	; 0xe44 <DIO_SetUpperHalfPortValue+0x24>
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	81 f0       	breq	.+32     	; 0xe4e <DIO_SetUpperHalfPortValue+0x2e>
     e2e:	08 95       	ret
     e30:	8b b3       	in	r24, 0x1b	; 27
     e32:	8f 70       	andi	r24, 0x0F	; 15
     e34:	68 2b       	or	r22, r24
     e36:	6b bb       	out	0x1b, r22	; 27
     e38:	08 95       	ret
     e3a:	88 b3       	in	r24, 0x18	; 24
     e3c:	8f 70       	andi	r24, 0x0F	; 15
     e3e:	68 2b       	or	r22, r24
     e40:	68 bb       	out	0x18, r22	; 24
     e42:	08 95       	ret
     e44:	85 b3       	in	r24, 0x15	; 21
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	68 2b       	or	r22, r24
     e4a:	65 bb       	out	0x15, r22	; 21
     e4c:	08 95       	ret
     e4e:	82 b3       	in	r24, 0x12	; 18
     e50:	8f 70       	andi	r24, 0x0F	; 15
     e52:	68 2b       	or	r22, r24
     e54:	62 bb       	out	0x12, r22	; 18
     e56:	08 95       	ret

00000e58 <DIO_GetPinValue>:
}


uint8_t DIO_GetPinValue (uint8_t PortNumber , uint8_t PinNumber) {
	uint8_t value = 0 ; 
	switch (PortNumber) {
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	79 f0       	breq	.+30     	; 0xe7a <DIO_GetPinValue+0x22>
     e5c:	28 f0       	brcs	.+10     	; 0xe68 <DIO_GetPinValue+0x10>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	a9 f0       	breq	.+42     	; 0xe8c <DIO_GetPinValue+0x34>
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	e1 f0       	breq	.+56     	; 0xe9e <DIO_GetPinValue+0x46>
     e66:	24 c0       	rjmp	.+72     	; 0xeb0 <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
     e68:	89 b3       	in	r24, 0x19	; 25
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_GetPinValue+0x1a>
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_GetPinValue+0x16>
     e76:	81 70       	andi	r24, 0x01	; 1
		break;
     e78:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
     e7a:	86 b3       	in	r24, 0x16	; 22
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_GetPinValue+0x2c>
     e80:	95 95       	asr	r25
     e82:	87 95       	ror	r24
     e84:	6a 95       	dec	r22
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_GetPinValue+0x28>
     e88:	81 70       	andi	r24, 0x01	; 1
		break;
     e8a:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
     e8c:	83 b3       	in	r24, 0x13	; 19
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_GetPinValue+0x3e>
     e92:	95 95       	asr	r25
     e94:	87 95       	ror	r24
     e96:	6a 95       	dec	r22
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_GetPinValue+0x3a>
     e9a:	81 70       	andi	r24, 0x01	; 1
		break;
     e9c:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
     e9e:	80 b3       	in	r24, 0x10	; 16
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_GetPinValue+0x50>
     ea4:	95 95       	asr	r25
     ea6:	87 95       	ror	r24
     ea8:	6a 95       	dec	r22
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_GetPinValue+0x4c>
     eac:	81 70       	andi	r24, 0x01	; 1
		break;
     eae:	08 95       	ret
	}
}


uint8_t DIO_GetPinValue (uint8_t PortNumber , uint8_t PinNumber) {
	uint8_t value = 0 ; 
     eb0:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
     eb2:	08 95       	ret

00000eb4 <pwm_init>:
pwm mode	>> NON_INVERTING_MODE , INVERTING_MODE
prescalar	>> 0 , 8 , 64 , 256 , 1024
*/

void pwm_init (uint8_t ID , uint8_t mode , uint16_t prescalar) {
	if (ID == PWM1) {
     eb4:	81 11       	cpse	r24, r1
     eb6:	56 c0       	rjmp	.+172    	; 0xf64 <pwm_init+0xb0>
		portb_DIR |= (1<<3) ;
     eb8:	87 b3       	in	r24, 0x17	; 23
     eba:	88 60       	ori	r24, 0x08	; 8
     ebc:	87 bb       	out	0x17, r24	; 23
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
     ebe:	61 11       	cpse	r22, r1
     ec0:	27 c0       	rjmp	.+78     	; 0xf10 <pwm_init+0x5c>
			switch (prescalar) {
     ec2:	40 34       	cpi	r20, 0x40	; 64
     ec4:	51 05       	cpc	r21, r1
     ec6:	c1 f0       	breq	.+48     	; 0xef8 <pwm_init+0x44>
     ec8:	38 f4       	brcc	.+14     	; 0xed8 <pwm_init+0x24>
     eca:	41 15       	cp	r20, r1
     ecc:	51 05       	cpc	r21, r1
     ece:	61 f0       	breq	.+24     	; 0xee8 <pwm_init+0x34>
     ed0:	48 30       	cpi	r20, 0x08	; 8
     ed2:	51 05       	cpc	r21, r1
     ed4:	69 f0       	breq	.+26     	; 0xef0 <pwm_init+0x3c>
     ed6:	08 95       	ret
     ed8:	41 15       	cp	r20, r1
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	58 07       	cpc	r21, r24
     ede:	81 f0       	breq	.+32     	; 0xf00 <pwm_init+0x4c>
     ee0:	41 15       	cp	r20, r1
     ee2:	54 40       	sbci	r21, 0x04	; 4
     ee4:	89 f0       	breq	.+34     	; 0xf08 <pwm_init+0x54>
     ee6:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x69 ;
     ee8:	83 b7       	in	r24, 0x33	; 51
     eea:	89 66       	ori	r24, 0x69	; 105
     eec:	83 bf       	out	0x33, r24	; 51
					break ;
     eee:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x6A ;
     ef0:	83 b7       	in	r24, 0x33	; 51
     ef2:	8a 66       	ori	r24, 0x6A	; 106
     ef4:	83 bf       	out	0x33, r24	; 51
					break ;
     ef6:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x6B ;
     ef8:	83 b7       	in	r24, 0x33	; 51
     efa:	8b 66       	ori	r24, 0x6B	; 107
     efc:	83 bf       	out	0x33, r24	; 51
					break ;
     efe:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x6C ;
     f00:	83 b7       	in	r24, 0x33	; 51
     f02:	8c 66       	ori	r24, 0x6C	; 108
     f04:	83 bf       	out	0x33, r24	; 51
					break ;
     f06:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x6D ;
     f08:	83 b7       	in	r24, 0x33	; 51
     f0a:	8d 66       	ori	r24, 0x6D	; 109
     f0c:	83 bf       	out	0x33, r24	; 51
					break ;
     f0e:	08 95       	ret
				}
			}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
     f10:	61 30       	cpi	r22, 0x01	; 1
     f12:	09 f0       	breq	.+2      	; 0xf16 <pwm_init+0x62>
     f14:	7e c0       	rjmp	.+252    	; 0x1012 <pwm_init+0x15e>
			switch (prescalar) {
     f16:	40 34       	cpi	r20, 0x40	; 64
     f18:	51 05       	cpc	r21, r1
     f1a:	c1 f0       	breq	.+48     	; 0xf4c <pwm_init+0x98>
     f1c:	38 f4       	brcc	.+14     	; 0xf2c <pwm_init+0x78>
     f1e:	41 15       	cp	r20, r1
     f20:	51 05       	cpc	r21, r1
     f22:	61 f0       	breq	.+24     	; 0xf3c <pwm_init+0x88>
     f24:	48 30       	cpi	r20, 0x08	; 8
     f26:	51 05       	cpc	r21, r1
     f28:	69 f0       	breq	.+26     	; 0xf44 <pwm_init+0x90>
     f2a:	08 95       	ret
     f2c:	41 15       	cp	r20, r1
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	58 07       	cpc	r21, r24
     f32:	81 f0       	breq	.+32     	; 0xf54 <pwm_init+0xa0>
     f34:	41 15       	cp	r20, r1
     f36:	54 40       	sbci	r21, 0x04	; 4
     f38:	89 f0       	breq	.+34     	; 0xf5c <pwm_init+0xa8>
     f3a:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x79 ;
     f3c:	83 b7       	in	r24, 0x33	; 51
     f3e:	89 67       	ori	r24, 0x79	; 121
     f40:	83 bf       	out	0x33, r24	; 51
					break ;
     f42:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x7A ;
     f44:	83 b7       	in	r24, 0x33	; 51
     f46:	8a 67       	ori	r24, 0x7A	; 122
     f48:	83 bf       	out	0x33, r24	; 51
					break ;
     f4a:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x7B ;
     f4c:	83 b7       	in	r24, 0x33	; 51
     f4e:	8b 67       	ori	r24, 0x7B	; 123
     f50:	83 bf       	out	0x33, r24	; 51
					break ;
     f52:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x7C ;
     f54:	83 b7       	in	r24, 0x33	; 51
     f56:	8c 67       	ori	r24, 0x7C	; 124
     f58:	83 bf       	out	0x33, r24	; 51
					break ;
     f5a:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x7D ;
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	8d 67       	ori	r24, 0x7D	; 125
     f60:	83 bf       	out	0x33, r24	; 51
					break ;
     f62:	08 95       	ret
				}
			}
	}
	else if (ID == PWM2) {
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <pwm_init+0xb6>
     f68:	54 c0       	rjmp	.+168    	; 0x1012 <pwm_init+0x15e>
		 portd_DIR |= ( 1<< 7 ) ;
     f6a:	81 b3       	in	r24, 0x11	; 17
     f6c:	80 68       	ori	r24, 0x80	; 128
     f6e:	81 bb       	out	0x11, r24	; 17
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
     f70:	61 11       	cpse	r22, r1
     f72:	27 c0       	rjmp	.+78     	; 0xfc2 <pwm_init+0x10e>
			switch (prescalar) {
     f74:	40 34       	cpi	r20, 0x40	; 64
     f76:	51 05       	cpc	r21, r1
     f78:	c1 f0       	breq	.+48     	; 0xfaa <pwm_init+0xf6>
     f7a:	38 f4       	brcc	.+14     	; 0xf8a <pwm_init+0xd6>
     f7c:	41 15       	cp	r20, r1
     f7e:	51 05       	cpc	r21, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <pwm_init+0xe6>
     f82:	48 30       	cpi	r20, 0x08	; 8
     f84:	51 05       	cpc	r21, r1
     f86:	69 f0       	breq	.+26     	; 0xfa2 <pwm_init+0xee>
     f88:	08 95       	ret
     f8a:	41 15       	cp	r20, r1
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	58 07       	cpc	r21, r24
     f90:	81 f0       	breq	.+32     	; 0xfb2 <pwm_init+0xfe>
     f92:	41 15       	cp	r20, r1
     f94:	54 40       	sbci	r21, 0x04	; 4
     f96:	89 f0       	breq	.+34     	; 0xfba <pwm_init+0x106>
     f98:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x69 ;
     f9a:	85 b5       	in	r24, 0x25	; 37
     f9c:	89 66       	ori	r24, 0x69	; 105
     f9e:	85 bd       	out	0x25, r24	; 37
					break ;
     fa0:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x6A ;
     fa2:	85 b5       	in	r24, 0x25	; 37
     fa4:	8a 66       	ori	r24, 0x6A	; 106
     fa6:	85 bd       	out	0x25, r24	; 37
					break ;
     fa8:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x6B ;
     faa:	85 b5       	in	r24, 0x25	; 37
     fac:	8b 66       	ori	r24, 0x6B	; 107
     fae:	85 bd       	out	0x25, r24	; 37
					break ;
     fb0:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x6C ;
     fb2:	85 b5       	in	r24, 0x25	; 37
     fb4:	8c 66       	ori	r24, 0x6C	; 108
     fb6:	85 bd       	out	0x25, r24	; 37
					break ;
     fb8:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x6D ;
     fba:	85 b5       	in	r24, 0x25	; 37
     fbc:	8d 66       	ori	r24, 0x6D	; 109
     fbe:	85 bd       	out	0x25, r24	; 37
					break ;
     fc0:	08 95       	ret
			}
		}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
     fc2:	61 30       	cpi	r22, 0x01	; 1
     fc4:	31 f5       	brne	.+76     	; 0x1012 <pwm_init+0x15e>
			switch (prescalar) {
     fc6:	40 34       	cpi	r20, 0x40	; 64
     fc8:	51 05       	cpc	r21, r1
     fca:	c1 f0       	breq	.+48     	; 0xffc <pwm_init+0x148>
     fcc:	38 f4       	brcc	.+14     	; 0xfdc <pwm_init+0x128>
     fce:	41 15       	cp	r20, r1
     fd0:	51 05       	cpc	r21, r1
     fd2:	61 f0       	breq	.+24     	; 0xfec <pwm_init+0x138>
     fd4:	48 30       	cpi	r20, 0x08	; 8
     fd6:	51 05       	cpc	r21, r1
     fd8:	69 f0       	breq	.+26     	; 0xff4 <pwm_init+0x140>
     fda:	08 95       	ret
     fdc:	41 15       	cp	r20, r1
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	58 07       	cpc	r21, r24
     fe2:	81 f0       	breq	.+32     	; 0x1004 <pwm_init+0x150>
     fe4:	41 15       	cp	r20, r1
     fe6:	54 40       	sbci	r21, 0x04	; 4
     fe8:	89 f0       	breq	.+34     	; 0x100c <pwm_init+0x158>
     fea:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x79 ;
     fec:	85 b5       	in	r24, 0x25	; 37
     fee:	89 67       	ori	r24, 0x79	; 121
     ff0:	85 bd       	out	0x25, r24	; 37
					break ;
     ff2:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x7A ;
     ff4:	85 b5       	in	r24, 0x25	; 37
     ff6:	8a 67       	ori	r24, 0x7A	; 122
     ff8:	85 bd       	out	0x25, r24	; 37
					break ;
     ffa:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x7B ;
     ffc:	85 b5       	in	r24, 0x25	; 37
     ffe:	8b 67       	ori	r24, 0x7B	; 123
    1000:	85 bd       	out	0x25, r24	; 37
					break ;
    1002:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x7C ;
    1004:	85 b5       	in	r24, 0x25	; 37
    1006:	8c 67       	ori	r24, 0x7C	; 124
    1008:	85 bd       	out	0x25, r24	; 37
					break ;
    100a:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x7D ;
    100c:	85 b5       	in	r24, 0x25	; 37
    100e:	8d 67       	ori	r24, 0x7D	; 125
    1010:	85 bd       	out	0x25, r24	; 37
    1012:	08 95       	ret

00001014 <pwm_SetSpeed>:
					break ;
			}
		}
	}
}
void pwm_SetSpeed (uint8_t ID ,uint8_t percentage) {
    1014:	28 2f       	mov	r18, r24
	uint8_t duty_cycle = 255 * percentage / 100 ; 
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	63 9f       	mul	r22, r19
    101a:	c0 01       	movw	r24, r0
    101c:	11 24       	eor	r1, r1
    101e:	64 e6       	ldi	r22, 0x64	; 100
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__divmodhi4>
	if (ID == PWM1) {
    1026:	21 11       	cpse	r18, r1
    1028:	02 c0       	rjmp	.+4      	; 0x102e <pwm_SetSpeed+0x1a>
		T0_OutCmp_REG = duty_cycle ; 
    102a:	6c bf       	out	0x3c, r22	; 60
    102c:	08 95       	ret
	}
	else if (ID == PWM2) {
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	09 f4       	brne	.+2      	; 0x1034 <pwm_SetSpeed+0x20>
		T2_OutCmp_REG = duty_cycle ;
    1032:	63 bd       	out	0x23, r22	; 35
    1034:	08 95       	ret

00001036 <adjustPrescalarT0>:
void Timer_Stop(EN_TIMER_t timer){
	if (timer == TIMER1){
		TCCR1B =0x00;
	}
	else{
		REG(timer) = 0x00;
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	51 f4       	brne	.+20     	; 0x1050 <adjustPrescalarT0+0x1a>
    103c:	83 b7       	in	r24, 0x33	; 51
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	83 bf       	out	0x33, r24	; 51
    1042:	83 b7       	in	r24, 0x33	; 51
    1044:	8d 7f       	andi	r24, 0xFD	; 253
    1046:	83 bf       	out	0x33, r24	; 51
    1048:	83 b7       	in	r24, 0x33	; 51
    104a:	8b 7f       	andi	r24, 0xFB	; 251
    104c:	83 bf       	out	0x33, r24	; 51
    104e:	08 95       	ret
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	91 05       	cpc	r25, r1
    1054:	51 f4       	brne	.+20     	; 0x106a <adjustPrescalarT0+0x34>
    1056:	83 b7       	in	r24, 0x33	; 51
    1058:	8e 7f       	andi	r24, 0xFE	; 254
    105a:	83 bf       	out	0x33, r24	; 51
    105c:	83 b7       	in	r24, 0x33	; 51
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	83 bf       	out	0x33, r24	; 51
    1062:	83 b7       	in	r24, 0x33	; 51
    1064:	8b 7f       	andi	r24, 0xFB	; 251
    1066:	83 bf       	out	0x33, r24	; 51
    1068:	08 95       	ret
    106a:	80 34       	cpi	r24, 0x40	; 64
    106c:	91 05       	cpc	r25, r1
    106e:	51 f4       	brne	.+20     	; 0x1084 <adjustPrescalarT0+0x4e>
    1070:	83 b7       	in	r24, 0x33	; 51
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	83 bf       	out	0x33, r24	; 51
    1076:	83 b7       	in	r24, 0x33	; 51
    1078:	82 60       	ori	r24, 0x02	; 2
    107a:	83 bf       	out	0x33, r24	; 51
    107c:	83 b7       	in	r24, 0x33	; 51
    107e:	8b 7f       	andi	r24, 0xFB	; 251
    1080:	83 bf       	out	0x33, r24	; 51
    1082:	08 95       	ret
    1084:	81 15       	cp	r24, r1
    1086:	21 e0       	ldi	r18, 0x01	; 1
    1088:	92 07       	cpc	r25, r18
    108a:	51 f4       	brne	.+20     	; 0x10a0 <adjustPrescalarT0+0x6a>
    108c:	83 b7       	in	r24, 0x33	; 51
    108e:	8e 7f       	andi	r24, 0xFE	; 254
    1090:	83 bf       	out	0x33, r24	; 51
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	8d 7f       	andi	r24, 0xFD	; 253
    1096:	83 bf       	out	0x33, r24	; 51
    1098:	83 b7       	in	r24, 0x33	; 51
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	83 bf       	out	0x33, r24	; 51
    109e:	08 95       	ret
    10a0:	81 15       	cp	r24, r1
    10a2:	94 40       	sbci	r25, 0x04	; 4
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <adjustPrescalarT0+0x82>
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	83 bf       	out	0x33, r24	; 51
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	8d 7f       	andi	r24, 0xFD	; 253
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	83 b7       	in	r24, 0x33	; 51
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	83 bf       	out	0x33, r24	; 51
    10b8:	08 95       	ret

000010ba <adjustPrescalarT1>:
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	51 f4       	brne	.+20     	; 0x10d4 <adjustPrescalarT1+0x1a>
    10c0:	8e b5       	in	r24, 0x2e	; 46
    10c2:	81 60       	ori	r24, 0x01	; 1
    10c4:	8e bd       	out	0x2e, r24	; 46
    10c6:	8e b5       	in	r24, 0x2e	; 46
    10c8:	8d 7f       	andi	r24, 0xFD	; 253
    10ca:	8e bd       	out	0x2e, r24	; 46
    10cc:	8e b5       	in	r24, 0x2e	; 46
    10ce:	8b 7f       	andi	r24, 0xFB	; 251
    10d0:	8e bd       	out	0x2e, r24	; 46
    10d2:	08 95       	ret
    10d4:	88 30       	cpi	r24, 0x08	; 8
    10d6:	91 05       	cpc	r25, r1
    10d8:	51 f4       	brne	.+20     	; 0x10ee <adjustPrescalarT1+0x34>
    10da:	8e b5       	in	r24, 0x2e	; 46
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	8e bd       	out	0x2e, r24	; 46
    10e0:	8e b5       	in	r24, 0x2e	; 46
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	8e bd       	out	0x2e, r24	; 46
    10e6:	8e b5       	in	r24, 0x2e	; 46
    10e8:	8b 7f       	andi	r24, 0xFB	; 251
    10ea:	8e bd       	out	0x2e, r24	; 46
    10ec:	08 95       	ret
    10ee:	80 34       	cpi	r24, 0x40	; 64
    10f0:	91 05       	cpc	r25, r1
    10f2:	51 f4       	brne	.+20     	; 0x1108 <adjustPrescalarT1+0x4e>
    10f4:	8e b5       	in	r24, 0x2e	; 46
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	8e bd       	out	0x2e, r24	; 46
    10fa:	8e b5       	in	r24, 0x2e	; 46
    10fc:	82 60       	ori	r24, 0x02	; 2
    10fe:	8e bd       	out	0x2e, r24	; 46
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	8b 7f       	andi	r24, 0xFB	; 251
    1104:	8e bd       	out	0x2e, r24	; 46
    1106:	08 95       	ret
    1108:	81 15       	cp	r24, r1
    110a:	21 e0       	ldi	r18, 0x01	; 1
    110c:	92 07       	cpc	r25, r18
    110e:	51 f4       	brne	.+20     	; 0x1124 <adjustPrescalarT1+0x6a>
    1110:	8e b5       	in	r24, 0x2e	; 46
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8e bd       	out	0x2e, r24	; 46
    1116:	8e b5       	in	r24, 0x2e	; 46
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	8e bd       	out	0x2e, r24	; 46
    111c:	8e b5       	in	r24, 0x2e	; 46
    111e:	84 60       	ori	r24, 0x04	; 4
    1120:	8e bd       	out	0x2e, r24	; 46
    1122:	08 95       	ret
    1124:	81 15       	cp	r24, r1
    1126:	94 40       	sbci	r25, 0x04	; 4
    1128:	49 f4       	brne	.+18     	; 0x113c <adjustPrescalarT1+0x82>
    112a:	8e b5       	in	r24, 0x2e	; 46
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	8e bd       	out	0x2e, r24	; 46
    1130:	8e b5       	in	r24, 0x2e	; 46
    1132:	8d 7f       	andi	r24, 0xFD	; 253
    1134:	8e bd       	out	0x2e, r24	; 46
    1136:	8e b5       	in	r24, 0x2e	; 46
    1138:	84 60       	ori	r24, 0x04	; 4
    113a:	8e bd       	out	0x2e, r24	; 46
    113c:	08 95       	ret

0000113e <adjustPrescalarT2>:
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	51 f4       	brne	.+20     	; 0x1158 <adjustPrescalarT2+0x1a>
    1144:	85 b5       	in	r24, 0x25	; 37
    1146:	81 60       	ori	r24, 0x01	; 1
    1148:	85 bd       	out	0x25, r24	; 37
    114a:	85 b5       	in	r24, 0x25	; 37
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	85 bd       	out	0x25, r24	; 37
    1150:	85 b5       	in	r24, 0x25	; 37
    1152:	8b 7f       	andi	r24, 0xFB	; 251
    1154:	85 bd       	out	0x25, r24	; 37
    1156:	08 95       	ret
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	91 05       	cpc	r25, r1
    115c:	51 f4       	brne	.+20     	; 0x1172 <adjustPrescalarT2+0x34>
    115e:	85 b5       	in	r24, 0x25	; 37
    1160:	8e 7f       	andi	r24, 0xFE	; 254
    1162:	85 bd       	out	0x25, r24	; 37
    1164:	85 b5       	in	r24, 0x25	; 37
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	85 bd       	out	0x25, r24	; 37
    116a:	85 b5       	in	r24, 0x25	; 37
    116c:	8b 7f       	andi	r24, 0xFB	; 251
    116e:	85 bd       	out	0x25, r24	; 37
    1170:	08 95       	ret
    1172:	80 32       	cpi	r24, 0x20	; 32
    1174:	91 05       	cpc	r25, r1
    1176:	51 f4       	brne	.+20     	; 0x118c <adjustPrescalarT2+0x4e>
    1178:	85 b5       	in	r24, 0x25	; 37
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	85 bd       	out	0x25, r24	; 37
    117e:	85 b5       	in	r24, 0x25	; 37
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	85 bd       	out	0x25, r24	; 37
    1184:	85 b5       	in	r24, 0x25	; 37
    1186:	8b 7f       	andi	r24, 0xFB	; 251
    1188:	85 bd       	out	0x25, r24	; 37
    118a:	08 95       	ret
    118c:	80 34       	cpi	r24, 0x40	; 64
    118e:	91 05       	cpc	r25, r1
    1190:	51 f4       	brne	.+20     	; 0x11a6 <adjustPrescalarT2+0x68>
    1192:	85 b5       	in	r24, 0x25	; 37
    1194:	8e 7f       	andi	r24, 0xFE	; 254
    1196:	85 bd       	out	0x25, r24	; 37
    1198:	85 b5       	in	r24, 0x25	; 37
    119a:	8d 7f       	andi	r24, 0xFD	; 253
    119c:	85 bd       	out	0x25, r24	; 37
    119e:	85 b5       	in	r24, 0x25	; 37
    11a0:	84 60       	ori	r24, 0x04	; 4
    11a2:	85 bd       	out	0x25, r24	; 37
    11a4:	08 95       	ret
    11a6:	80 38       	cpi	r24, 0x80	; 128
    11a8:	91 05       	cpc	r25, r1
    11aa:	51 f4       	brne	.+20     	; 0x11c0 <adjustPrescalarT2+0x82>
    11ac:	85 b5       	in	r24, 0x25	; 37
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	85 bd       	out	0x25, r24	; 37
    11b2:	85 b5       	in	r24, 0x25	; 37
    11b4:	8d 7f       	andi	r24, 0xFD	; 253
    11b6:	85 bd       	out	0x25, r24	; 37
    11b8:	85 b5       	in	r24, 0x25	; 37
    11ba:	84 60       	ori	r24, 0x04	; 4
    11bc:	85 bd       	out	0x25, r24	; 37
    11be:	08 95       	ret
    11c0:	81 15       	cp	r24, r1
    11c2:	21 e0       	ldi	r18, 0x01	; 1
    11c4:	92 07       	cpc	r25, r18
    11c6:	51 f4       	brne	.+20     	; 0x11dc <adjustPrescalarT2+0x9e>
    11c8:	85 b5       	in	r24, 0x25	; 37
    11ca:	8e 7f       	andi	r24, 0xFE	; 254
    11cc:	85 bd       	out	0x25, r24	; 37
    11ce:	85 b5       	in	r24, 0x25	; 37
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	85 bd       	out	0x25, r24	; 37
    11d4:	85 b5       	in	r24, 0x25	; 37
    11d6:	84 60       	ori	r24, 0x04	; 4
    11d8:	85 bd       	out	0x25, r24	; 37
    11da:	08 95       	ret
    11dc:	81 15       	cp	r24, r1
    11de:	94 40       	sbci	r25, 0x04	; 4
    11e0:	49 f4       	brne	.+18     	; 0x11f4 <adjustPrescalarT2+0xb6>
    11e2:	85 b5       	in	r24, 0x25	; 37
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	85 bd       	out	0x25, r24	; 37
    11e8:	85 b5       	in	r24, 0x25	; 37
    11ea:	82 60       	ori	r24, 0x02	; 2
    11ec:	85 bd       	out	0x25, r24	; 37
    11ee:	85 b5       	in	r24, 0x25	; 37
    11f0:	84 60       	ori	r24, 0x04	; 4
    11f2:	85 bd       	out	0x25, r24	; 37
    11f4:	08 95       	ret

000011f6 <Timer_Delay>:
    11f6:	4f 92       	push	r4
    11f8:	5f 92       	push	r5
    11fa:	6f 92       	push	r6
    11fc:	7f 92       	push	r7
    11fe:	8f 92       	push	r8
    1200:	9f 92       	push	r9
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2a 97       	sbiw	r28, 0x0a	; 10
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
    122a:	09 83       	std	Y+1, r16	; 0x01
    122c:	1a 83       	std	Y+2, r17	; 0x02
    122e:	2b 83       	std	Y+3, r18	; 0x03
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	4d 83       	std	Y+5, r20	; 0x05
    1234:	5e 83       	std	Y+6, r21	; 0x06
    1236:	03 35       	cpi	r16, 0x53	; 83
    1238:	09 f0       	breq	.+2      	; 0x123c <Timer_Delay+0x46>
    123a:	71 c0       	rjmp	.+226    	; 0x131e <Timer_Delay+0x128>
    123c:	37 c0       	rjmp	.+110    	; 0x12ac <Timer_Delay+0xb6>
    123e:	6a 81       	ldd	r22, Y+2	; 0x02
    1240:	7b 81       	ldd	r23, Y+3	; 0x03
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	e1 2f       	mov	r30, r17
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e7 58       	subi	r30, 0x87	; 135
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	a0 80       	ld	r10, Z
    1254:	b1 80       	ldd	r11, Z+1	; 0x01
    1256:	95 01       	movw	r18, r10
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__udivmodsi4>
    1260:	84 2f       	mov	r24, r20
    1262:	95 2f       	mov	r25, r21
    1264:	42 2e       	mov	r4, r18
    1266:	53 2e       	mov	r5, r19
    1268:	64 2e       	mov	r6, r20
    126a:	75 2e       	mov	r7, r21
    126c:	62 2f       	mov	r22, r18
    126e:	73 2f       	mov	r23, r19
    1270:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    1274:	6f 83       	std	Y+7, r22	; 0x07
    1276:	78 87       	std	Y+8, r23	; 0x08
    1278:	89 87       	std	Y+9, r24	; 0x09
    127a:	9a 87       	std	Y+10, r25	; 0x0a
    127c:	a7 01       	movw	r20, r14
    127e:	96 01       	movw	r18, r12
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	8f e7       	ldi	r24, 0x7F	; 127
    1286:	93 e4       	ldi	r25, 0x43	; 67
    1288:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
    129c:	88 23       	and	r24, r24
    129e:	24 f4       	brge	.+8      	; 0x12a8 <Timer_Delay+0xb2>
    12a0:	45 28       	or	r4, r5
    12a2:	46 28       	or	r4, r6
    12a4:	47 28       	or	r4, r7
    12a6:	49 f4       	brne	.+18     	; 0x12ba <Timer_Delay+0xc4>
    12a8:	1f 5f       	subi	r17, 0xFF	; 255
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <Timer_Delay+0xb8>
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	15 30       	cpi	r17, 0x05	; 5
    12b0:	30 f2       	brcs	.-116    	; 0x123e <Timer_Delay+0x48>
    12b2:	01 e0       	ldi	r16, 0x01	; 1
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <Timer_Delay+0xc8>
    12ba:	85 01       	movw	r16, r10
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	88 23       	and	r24, r24
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <Timer_Delay+0xce>
    12c2:	38 c1       	rjmp	.+624    	; 0x1534 <Timer_Delay+0x33e>
    12c4:	c8 01       	movw	r24, r16
    12c6:	0e 94 1b 08 	call	0x1036	; 0x1036 <adjustPrescalarT0>
    12ca:	6a 81       	ldd	r22, Y+2	; 0x02
    12cc:	7b 81       	ldd	r23, Y+3	; 0x03
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    12d6:	a7 01       	movw	r20, r14
    12d8:	96 01       	movw	r18, r12
    12da:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
    12e2:	b8 01       	movw	r22, r16
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    12ec:	9b 01       	movw	r18, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	c7 01       	movw	r24, r14
    12f2:	b6 01       	movw	r22, r12
    12f4:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    12f8:	9b 01       	movw	r18, r22
    12fa:	ac 01       	movw	r20, r24
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	8f e7       	ldi	r24, 0x7F	; 127
    1302:	93 e4       	ldi	r25, 0x43	; 67
    1304:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
    1308:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fixsfsi>
    130c:	62 bf       	out	0x32, r22	; 50
    130e:	08 b6       	in	r0, 0x38	; 56
    1310:	00 fe       	sbrs	r0, 0
    1312:	fd cf       	rjmp	.-6      	; 0x130e <Timer_Delay+0x118>
    1314:	88 b7       	in	r24, 0x38	; 56
    1316:	81 60       	ori	r24, 0x01	; 1
    1318:	88 bf       	out	0x38, r24	; 56
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	10 c1       	rjmp	.+544    	; 0x153e <Timer_Delay+0x348>
    131e:	05 34       	cpi	r16, 0x45	; 69
    1320:	09 f0       	breq	.+2      	; 0x1324 <Timer_Delay+0x12e>
    1322:	71 c0       	rjmp	.+226    	; 0x1406 <Timer_Delay+0x210>
    1324:	37 c0       	rjmp	.+110    	; 0x1394 <Timer_Delay+0x19e>
    1326:	6a 81       	ldd	r22, Y+2	; 0x02
    1328:	7b 81       	ldd	r23, Y+3	; 0x03
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	e1 2f       	mov	r30, r17
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	e5 59       	subi	r30, 0x95	; 149
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	a0 80       	ld	r10, Z
    133c:	b1 80       	ldd	r11, Z+1	; 0x01
    133e:	95 01       	movw	r18, r10
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__udivmodsi4>
    1348:	84 2f       	mov	r24, r20
    134a:	95 2f       	mov	r25, r21
    134c:	42 2e       	mov	r4, r18
    134e:	53 2e       	mov	r5, r19
    1350:	64 2e       	mov	r6, r20
    1352:	75 2e       	mov	r7, r21
    1354:	62 2f       	mov	r22, r18
    1356:	73 2f       	mov	r23, r19
    1358:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    135c:	6f 83       	std	Y+7, r22	; 0x07
    135e:	78 87       	std	Y+8, r23	; 0x08
    1360:	89 87       	std	Y+9, r24	; 0x09
    1362:	9a 87       	std	Y+10, r25	; 0x0a
    1364:	a7 01       	movw	r20, r14
    1366:	96 01       	movw	r18, r12
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	8f e7       	ldi	r24, 0x7F	; 127
    136e:	93 e4       	ldi	r25, 0x43	; 67
    1370:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	6f 81       	ldd	r22, Y+7	; 0x07
    137a:	78 85       	ldd	r23, Y+8	; 0x08
    137c:	89 85       	ldd	r24, Y+9	; 0x09
    137e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1380:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
    1384:	88 23       	and	r24, r24
    1386:	24 f4       	brge	.+8      	; 0x1390 <Timer_Delay+0x19a>
    1388:	45 28       	or	r4, r5
    138a:	46 28       	or	r4, r6
    138c:	47 28       	or	r4, r7
    138e:	49 f4       	brne	.+18     	; 0x13a2 <Timer_Delay+0x1ac>
    1390:	1f 5f       	subi	r17, 0xFF	; 255
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <Timer_Delay+0x1a0>
    1394:	10 e0       	ldi	r17, 0x00	; 0
    1396:	17 30       	cpi	r17, 0x07	; 7
    1398:	30 f2       	brcs	.-116    	; 0x1326 <Timer_Delay+0x130>
    139a:	01 e0       	ldi	r16, 0x01	; 1
    139c:	10 e0       	ldi	r17, 0x00	; 0
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <Timer_Delay+0x1b0>
    13a2:	85 01       	movw	r16, r10
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <Timer_Delay+0x1b6>
    13aa:	c6 c0       	rjmp	.+396    	; 0x1538 <Timer_Delay+0x342>
    13ac:	c8 01       	movw	r24, r16
    13ae:	0e 94 9f 08 	call	0x113e	; 0x113e <adjustPrescalarT2>
    13b2:	6a 81       	ldd	r22, Y+2	; 0x02
    13b4:	7b 81       	ldd	r23, Y+3	; 0x03
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    13be:	a7 01       	movw	r20, r14
    13c0:	96 01       	movw	r18, r12
    13c2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    13c6:	6b 01       	movw	r12, r22
    13c8:	7c 01       	movw	r14, r24
    13ca:	b8 01       	movw	r22, r16
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    13e0:	9b 01       	movw	r18, r22
    13e2:	ac 01       	movw	r20, r24
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	8f e7       	ldi	r24, 0x7F	; 127
    13ea:	93 e4       	ldi	r25, 0x43	; 67
    13ec:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
    13f0:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fixsfsi>
    13f4:	64 bd       	out	0x24, r22	; 36
    13f6:	08 b6       	in	r0, 0x38	; 56
    13f8:	06 fe       	sbrs	r0, 6
    13fa:	fd cf       	rjmp	.-6      	; 0x13f6 <Timer_Delay+0x200>
    13fc:	88 b7       	in	r24, 0x38	; 56
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	88 bf       	out	0x38, r24	; 56
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	9c c0       	rjmp	.+312    	; 0x153e <Timer_Delay+0x348>
    1406:	0f 34       	cpi	r16, 0x4F	; 79
    1408:	e9 f1       	breq	.+122    	; 0x1484 <Timer_Delay+0x28e>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	98 c0       	rjmp	.+304    	; 0x153e <Timer_Delay+0x348>
    140e:	6a 81       	ldd	r22, Y+2	; 0x02
    1410:	7b 81       	ldd	r23, Y+3	; 0x03
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	e1 2f       	mov	r30, r17
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	e7 58       	subi	r30, 0x87	; 135
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	a0 80       	ld	r10, Z
    1424:	b1 80       	ldd	r11, Z+1	; 0x01
    1426:	95 01       	movw	r18, r10
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__udivmodsi4>
    1430:	29 01       	movw	r4, r18
    1432:	3a 01       	movw	r6, r20
    1434:	b9 01       	movw	r22, r18
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    143e:	6f 83       	std	Y+7, r22	; 0x07
    1440:	78 87       	std	Y+8, r23	; 0x08
    1442:	89 87       	std	Y+9, r24	; 0x09
    1444:	9a 87       	std	Y+10, r25	; 0x0a
    1446:	a7 01       	movw	r20, r14
    1448:	96 01       	movw	r18, r12
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	80 e8       	ldi	r24, 0x80	; 128
    1450:	97 e4       	ldi	r25, 0x47	; 71
    1452:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
    1466:	88 23       	and	r24, r24
    1468:	5c f4       	brge	.+22     	; 0x1480 <Timer_Delay+0x28a>
    146a:	c3 01       	movw	r24, r6
    146c:	b2 01       	movw	r22, r4
    146e:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__gesf2>
    147c:	18 16       	cp	r1, r24
    147e:	4c f0       	brlt	.+18     	; 0x1492 <Timer_Delay+0x29c>
    1480:	1f 5f       	subi	r17, 0xFF	; 255
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <Timer_Delay+0x290>
    1484:	10 e0       	ldi	r17, 0x00	; 0
    1486:	15 30       	cpi	r17, 0x05	; 5
    1488:	10 f2       	brcs	.-124    	; 0x140e <Timer_Delay+0x218>
    148a:	01 e0       	ldi	r16, 0x01	; 1
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Timer_Delay+0x2a0>
    1492:	85 01       	movw	r16, r10
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <Timer_Delay+0x2a6>
    149a:	50 c0       	rjmp	.+160    	; 0x153c <Timer_Delay+0x346>
    149c:	c8 01       	movw	r24, r16
    149e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <adjustPrescalarT1>
    14a2:	6a 81       	ldd	r22, Y+2	; 0x02
    14a4:	7b 81       	ldd	r23, Y+3	; 0x03
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    14ae:	a7 01       	movw	r20, r14
    14b0:	96 01       	movw	r18, r12
    14b2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    14b6:	2b 01       	movw	r4, r22
    14b8:	3c 01       	movw	r6, r24
    14ba:	b8 01       	movw	r22, r16
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    14c4:	4b 01       	movw	r8, r22
    14c6:	5c 01       	movw	r10, r24
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	c3 01       	movw	r24, r6
    14ce:	b2 01       	movw	r22, r4
    14d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    14d4:	9b 01       	movw	r18, r22
    14d6:	ac 01       	movw	r20, r24
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	80 e8       	ldi	r24, 0x80	; 128
    14de:	97 e4       	ldi	r25, 0x47	; 71
    14e0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
    14e4:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixunssfsi>
    14e8:	7d bd       	out	0x2d, r23	; 45
    14ea:	6a 81       	ldd	r22, Y+2	; 0x02
    14ec:	7b 81       	ldd	r23, Y+3	; 0x03
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	9d 81       	ldd	r25, Y+5	; 0x05
    14f2:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    14f6:	a7 01       	movw	r20, r14
    14f8:	96 01       	movw	r18, r12
    14fa:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    14fe:	a5 01       	movw	r20, r10
    1500:	94 01       	movw	r18, r8
    1502:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	97 e4       	ldi	r25, 0x47	; 71
    1512:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
    1516:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixunssfsi>
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	67 2b       	or	r22, r23
    151e:	09 f4       	brne	.+2      	; 0x1522 <Timer_Delay+0x32c>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	2c bd       	out	0x2c, r18	; 44
    1524:	08 b6       	in	r0, 0x38	; 56
    1526:	02 fe       	sbrs	r0, 2
    1528:	fd cf       	rjmp	.-6      	; 0x1524 <Timer_Delay+0x32e>
    152a:	88 b7       	in	r24, 0x38	; 56
    152c:	84 60       	ori	r24, 0x04	; 4
    152e:	88 bf       	out	0x38, r24	; 56
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	05 c0       	rjmp	.+10     	; 0x153e <Timer_Delay+0x348>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	03 c0       	rjmp	.+6      	; 0x153e <Timer_Delay+0x348>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	01 c0       	rjmp	.+2      	; 0x153e <Timer_Delay+0x348>
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	2a 96       	adiw	r28, 0x0a	; 10
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	cf 90       	pop	r12
    155a:	bf 90       	pop	r11
    155c:	af 90       	pop	r10
    155e:	9f 90       	pop	r9
    1560:	8f 90       	pop	r8
    1562:	7f 90       	pop	r7
    1564:	6f 90       	pop	r6
    1566:	5f 90       	pop	r5
    1568:	4f 90       	pop	r4
    156a:	08 95       	ret

0000156c <__vector_10>:
}


/* ISR DEFINITIONS */

void __vector_10(){
    156c:	1f 92       	push	r1
    156e:	0f 92       	push	r0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	0f 92       	push	r0
    1574:	11 24       	eor	r1, r1
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
	TIMER0_CM_ISR();
    158e:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <TIMER0_CM_ISR>
    1592:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <TIMER0_CM_ISR+0x1>
    1596:	09 95       	icall
}
    1598:	ff 91       	pop	r31
    159a:	ef 91       	pop	r30
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_7>:

void __vector_7(){
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	2f 93       	push	r18
    15c6:	3f 93       	push	r19
    15c8:	4f 93       	push	r20
    15ca:	5f 93       	push	r21
    15cc:	6f 93       	push	r22
    15ce:	7f 93       	push	r23
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	af 93       	push	r26
    15d6:	bf 93       	push	r27
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
	TIMER1_CMA_ISR();
    15dc:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <TIMER1_CMA_ISR>
    15e0:	f0 91 ba 00 	lds	r31, 0x00BA	; 0x8000ba <TIMER1_CMA_ISR+0x1>
    15e4:	09 95       	icall
}
    15e6:	ff 91       	pop	r31
    15e8:	ef 91       	pop	r30
    15ea:	bf 91       	pop	r27
    15ec:	af 91       	pop	r26
    15ee:	9f 91       	pop	r25
    15f0:	8f 91       	pop	r24
    15f2:	7f 91       	pop	r23
    15f4:	6f 91       	pop	r22
    15f6:	5f 91       	pop	r21
    15f8:	4f 91       	pop	r20
    15fa:	3f 91       	pop	r19
    15fc:	2f 91       	pop	r18
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <__vector_4>:

void __vector_4(){
    1608:	1f 92       	push	r1
    160a:	0f 92       	push	r0
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	0f 92       	push	r0
    1610:	11 24       	eor	r1, r1
    1612:	2f 93       	push	r18
    1614:	3f 93       	push	r19
    1616:	4f 93       	push	r20
    1618:	5f 93       	push	r21
    161a:	6f 93       	push	r22
    161c:	7f 93       	push	r23
    161e:	8f 93       	push	r24
    1620:	9f 93       	push	r25
    1622:	af 93       	push	r26
    1624:	bf 93       	push	r27
    1626:	ef 93       	push	r30
    1628:	ff 93       	push	r31
	TIMER2_CM_ISR();
    162a:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <TIMER2_CM_ISR>
    162e:	f0 91 b8 00 	lds	r31, 0x00B8	; 0x8000b8 <TIMER2_CM_ISR+0x1>
    1632:	09 95       	icall
}
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__subsf3>:
    1656:	50 58       	subi	r21, 0x80	; 128

00001658 <__addsf3>:
    1658:	bb 27       	eor	r27, r27
    165a:	aa 27       	eor	r26, r26
    165c:	0e 94 43 0b 	call	0x1686	; 0x1686 <__addsf3x>
    1660:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    1664:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    1668:	38 f0       	brcs	.+14     	; 0x1678 <__addsf3+0x20>
    166a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    166e:	20 f0       	brcs	.+8      	; 0x1678 <__addsf3+0x20>
    1670:	39 f4       	brne	.+14     	; 0x1680 <__addsf3+0x28>
    1672:	9f 3f       	cpi	r25, 0xFF	; 255
    1674:	19 f4       	brne	.+6      	; 0x167c <__addsf3+0x24>
    1676:	26 f4       	brtc	.+8      	; 0x1680 <__addsf3+0x28>
    1678:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    167c:	0e f4       	brtc	.+2      	; 0x1680 <__addsf3+0x28>
    167e:	e0 95       	com	r30
    1680:	e7 fb       	bst	r30, 7
    1682:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>

00001686 <__addsf3x>:
    1686:	e9 2f       	mov	r30, r25
    1688:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    168c:	58 f3       	brcs	.-42     	; 0x1664 <__addsf3+0xc>
    168e:	ba 17       	cp	r27, r26
    1690:	62 07       	cpc	r22, r18
    1692:	73 07       	cpc	r23, r19
    1694:	84 07       	cpc	r24, r20
    1696:	95 07       	cpc	r25, r21
    1698:	20 f0       	brcs	.+8      	; 0x16a2 <__addsf3x+0x1c>
    169a:	79 f4       	brne	.+30     	; 0x16ba <__addsf3x+0x34>
    169c:	a6 f5       	brtc	.+104    	; 0x1706 <__addsf3x+0x80>
    169e:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    16a2:	0e f4       	brtc	.+2      	; 0x16a6 <__addsf3x+0x20>
    16a4:	e0 95       	com	r30
    16a6:	0b 2e       	mov	r0, r27
    16a8:	ba 2f       	mov	r27, r26
    16aa:	a0 2d       	mov	r26, r0
    16ac:	0b 01       	movw	r0, r22
    16ae:	b9 01       	movw	r22, r18
    16b0:	90 01       	movw	r18, r0
    16b2:	0c 01       	movw	r0, r24
    16b4:	ca 01       	movw	r24, r20
    16b6:	a0 01       	movw	r20, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	ff 27       	eor	r31, r31
    16bc:	59 1b       	sub	r21, r25
    16be:	99 f0       	breq	.+38     	; 0x16e6 <__addsf3x+0x60>
    16c0:	59 3f       	cpi	r21, 0xF9	; 249
    16c2:	50 f4       	brcc	.+20     	; 0x16d8 <__addsf3x+0x52>
    16c4:	50 3e       	cpi	r21, 0xE0	; 224
    16c6:	68 f1       	brcs	.+90     	; 0x1722 <__addsf3x+0x9c>
    16c8:	1a 16       	cp	r1, r26
    16ca:	f0 40       	sbci	r31, 0x00	; 0
    16cc:	a2 2f       	mov	r26, r18
    16ce:	23 2f       	mov	r18, r19
    16d0:	34 2f       	mov	r19, r20
    16d2:	44 27       	eor	r20, r20
    16d4:	58 5f       	subi	r21, 0xF8	; 248
    16d6:	f3 cf       	rjmp	.-26     	; 0x16be <__addsf3x+0x38>
    16d8:	46 95       	lsr	r20
    16da:	37 95       	ror	r19
    16dc:	27 95       	ror	r18
    16de:	a7 95       	ror	r26
    16e0:	f0 40       	sbci	r31, 0x00	; 0
    16e2:	53 95       	inc	r21
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__addsf3x+0x52>
    16e6:	7e f4       	brtc	.+30     	; 0x1706 <__addsf3x+0x80>
    16e8:	1f 16       	cp	r1, r31
    16ea:	ba 0b       	sbc	r27, r26
    16ec:	62 0b       	sbc	r22, r18
    16ee:	73 0b       	sbc	r23, r19
    16f0:	84 0b       	sbc	r24, r20
    16f2:	ba f0       	brmi	.+46     	; 0x1722 <__addsf3x+0x9c>
    16f4:	91 50       	subi	r25, 0x01	; 1
    16f6:	a1 f0       	breq	.+40     	; 0x1720 <__addsf3x+0x9a>
    16f8:	ff 0f       	add	r31, r31
    16fa:	bb 1f       	adc	r27, r27
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	c2 f7       	brpl	.-16     	; 0x16f4 <__addsf3x+0x6e>
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <__addsf3x+0x9c>
    1706:	ba 0f       	add	r27, r26
    1708:	62 1f       	adc	r22, r18
    170a:	73 1f       	adc	r23, r19
    170c:	84 1f       	adc	r24, r20
    170e:	48 f4       	brcc	.+18     	; 0x1722 <__addsf3x+0x9c>
    1710:	87 95       	ror	r24
    1712:	77 95       	ror	r23
    1714:	67 95       	ror	r22
    1716:	b7 95       	ror	r27
    1718:	f7 95       	ror	r31
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	08 f0       	brcs	.+2      	; 0x1720 <__addsf3x+0x9a>
    171e:	b0 cf       	rjmp	.-160    	; 0x1680 <__addsf3+0x28>
    1720:	93 95       	inc	r25
    1722:	88 0f       	add	r24, r24
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__addsf3x+0xa2>
    1726:	99 27       	eor	r25, r25
    1728:	ee 0f       	add	r30, r30
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	08 95       	ret

00001730 <__cmpsf2>:
    1730:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fp_cmp>
    1734:	08 f4       	brcc	.+2      	; 0x1738 <__cmpsf2+0x8>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	08 95       	ret

0000173a <__divsf3>:
    173a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divsf3x>
    173e:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    1742:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    1746:	58 f0       	brcs	.+22     	; 0x175e <__divsf3+0x24>
    1748:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    174c:	40 f0       	brcs	.+16     	; 0x175e <__divsf3+0x24>
    174e:	29 f4       	brne	.+10     	; 0x175a <__divsf3+0x20>
    1750:	5f 3f       	cpi	r21, 0xFF	; 255
    1752:	29 f0       	breq	.+10     	; 0x175e <__divsf3+0x24>
    1754:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1758:	51 11       	cpse	r21, r1
    175a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    175e:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>

00001762 <__divsf3x>:
    1762:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    1766:	68 f3       	brcs	.-38     	; 0x1742 <__divsf3+0x8>

00001768 <__divsf3_pse>:
    1768:	99 23       	and	r25, r25
    176a:	b1 f3       	breq	.-20     	; 0x1758 <__divsf3+0x1e>
    176c:	55 23       	and	r21, r21
    176e:	91 f3       	breq	.-28     	; 0x1754 <__divsf3+0x1a>
    1770:	95 1b       	sub	r25, r21
    1772:	55 0b       	sbc	r21, r21
    1774:	bb 27       	eor	r27, r27
    1776:	aa 27       	eor	r26, r26
    1778:	62 17       	cp	r22, r18
    177a:	73 07       	cpc	r23, r19
    177c:	84 07       	cpc	r24, r20
    177e:	38 f0       	brcs	.+14     	; 0x178e <__divsf3_pse+0x26>
    1780:	9f 5f       	subi	r25, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	44 1f       	adc	r20, r20
    178a:	aa 1f       	adc	r26, r26
    178c:	a9 f3       	breq	.-22     	; 0x1778 <__divsf3_pse+0x10>
    178e:	35 d0       	rcall	.+106    	; 0x17fa <__divsf3_pse+0x92>
    1790:	0e 2e       	mov	r0, r30
    1792:	3a f0       	brmi	.+14     	; 0x17a2 <__divsf3_pse+0x3a>
    1794:	e0 e8       	ldi	r30, 0x80	; 128
    1796:	32 d0       	rcall	.+100    	; 0x17fc <__divsf3_pse+0x94>
    1798:	91 50       	subi	r25, 0x01	; 1
    179a:	50 40       	sbci	r21, 0x00	; 0
    179c:	e6 95       	lsr	r30
    179e:	00 1c       	adc	r0, r0
    17a0:	ca f7       	brpl	.-14     	; 0x1794 <__divsf3_pse+0x2c>
    17a2:	2b d0       	rcall	.+86     	; 0x17fa <__divsf3_pse+0x92>
    17a4:	fe 2f       	mov	r31, r30
    17a6:	29 d0       	rcall	.+82     	; 0x17fa <__divsf3_pse+0x92>
    17a8:	66 0f       	add	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	bb 1f       	adc	r27, r27
    17b0:	26 17       	cp	r18, r22
    17b2:	37 07       	cpc	r19, r23
    17b4:	48 07       	cpc	r20, r24
    17b6:	ab 07       	cpc	r26, r27
    17b8:	b0 e8       	ldi	r27, 0x80	; 128
    17ba:	09 f0       	breq	.+2      	; 0x17be <__divsf3_pse+0x56>
    17bc:	bb 0b       	sbc	r27, r27
    17be:	80 2d       	mov	r24, r0
    17c0:	bf 01       	movw	r22, r30
    17c2:	ff 27       	eor	r31, r31
    17c4:	93 58       	subi	r25, 0x83	; 131
    17c6:	5f 4f       	sbci	r21, 0xFF	; 255
    17c8:	3a f0       	brmi	.+14     	; 0x17d8 <__divsf3_pse+0x70>
    17ca:	9e 3f       	cpi	r25, 0xFE	; 254
    17cc:	51 05       	cpc	r21, r1
    17ce:	78 f0       	brcs	.+30     	; 0x17ee <__divsf3_pse+0x86>
    17d0:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    17d4:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    17d8:	5f 3f       	cpi	r21, 0xFF	; 255
    17da:	e4 f3       	brlt	.-8      	; 0x17d4 <__divsf3_pse+0x6c>
    17dc:	98 3e       	cpi	r25, 0xE8	; 232
    17de:	d4 f3       	brlt	.-12     	; 0x17d4 <__divsf3_pse+0x6c>
    17e0:	86 95       	lsr	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	b7 95       	ror	r27
    17e8:	f7 95       	ror	r31
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__divsf3_pse+0x78>
    17ee:	88 0f       	add	r24, r24
    17f0:	91 1d       	adc	r25, r1
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	97 f9       	bld	r25, 7
    17f8:	08 95       	ret
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	bb 1f       	adc	r27, r27
    1804:	62 17       	cp	r22, r18
    1806:	73 07       	cpc	r23, r19
    1808:	84 07       	cpc	r24, r20
    180a:	ba 07       	cpc	r27, r26
    180c:	20 f0       	brcs	.+8      	; 0x1816 <__divsf3_pse+0xae>
    180e:	62 1b       	sub	r22, r18
    1810:	73 0b       	sbc	r23, r19
    1812:	84 0b       	sbc	r24, r20
    1814:	ba 0b       	sbc	r27, r26
    1816:	ee 1f       	adc	r30, r30
    1818:	88 f7       	brcc	.-30     	; 0x17fc <__divsf3_pse+0x94>
    181a:	e0 95       	com	r30
    181c:	08 95       	ret

0000181e <__fixsfsi>:
    181e:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixunssfsi>
    1822:	68 94       	set
    1824:	b1 11       	cpse	r27, r1
    1826:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    182a:	08 95       	ret

0000182c <__fixunssfsi>:
    182c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fp_splitA>
    1830:	88 f0       	brcs	.+34     	; 0x1854 <__fixunssfsi+0x28>
    1832:	9f 57       	subi	r25, 0x7F	; 127
    1834:	98 f0       	brcs	.+38     	; 0x185c <__fixunssfsi+0x30>
    1836:	b9 2f       	mov	r27, r25
    1838:	99 27       	eor	r25, r25
    183a:	b7 51       	subi	r27, 0x17	; 23
    183c:	b0 f0       	brcs	.+44     	; 0x186a <__fixunssfsi+0x3e>
    183e:	e1 f0       	breq	.+56     	; 0x1878 <__fixunssfsi+0x4c>
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	1a f0       	brmi	.+6      	; 0x1850 <__fixunssfsi+0x24>
    184a:	ba 95       	dec	r27
    184c:	c9 f7       	brne	.-14     	; 0x1840 <__fixunssfsi+0x14>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <__fixunssfsi+0x4c>
    1850:	b1 30       	cpi	r27, 0x01	; 1
    1852:	91 f0       	breq	.+36     	; 0x1878 <__fixunssfsi+0x4c>
    1854:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_zero>
    1858:	b1 e0       	ldi	r27, 0x01	; 1
    185a:	08 95       	ret
    185c:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    1860:	67 2f       	mov	r22, r23
    1862:	78 2f       	mov	r23, r24
    1864:	88 27       	eor	r24, r24
    1866:	b8 5f       	subi	r27, 0xF8	; 248
    1868:	39 f0       	breq	.+14     	; 0x1878 <__fixunssfsi+0x4c>
    186a:	b9 3f       	cpi	r27, 0xF9	; 249
    186c:	cc f3       	brlt	.-14     	; 0x1860 <__fixunssfsi+0x34>
    186e:	86 95       	lsr	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b3 95       	inc	r27
    1876:	d9 f7       	brne	.-10     	; 0x186e <__fixunssfsi+0x42>
    1878:	3e f4       	brtc	.+14     	; 0x1888 <__fixunssfsi+0x5c>
    187a:	90 95       	com	r25
    187c:	80 95       	com	r24
    187e:	70 95       	com	r23
    1880:	61 95       	neg	r22
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	08 95       	ret

0000188a <__floatunsisf>:
    188a:	e8 94       	clt
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <__floatsisf+0x12>

0000188e <__floatsisf>:
    188e:	97 fb       	bst	r25, 7
    1890:	3e f4       	brtc	.+14     	; 0x18a0 <__floatsisf+0x12>
    1892:	90 95       	com	r25
    1894:	80 95       	com	r24
    1896:	70 95       	com	r23
    1898:	61 95       	neg	r22
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8f 4f       	sbci	r24, 0xFF	; 255
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	99 23       	and	r25, r25
    18a2:	a9 f0       	breq	.+42     	; 0x18ce <__floatsisf+0x40>
    18a4:	f9 2f       	mov	r31, r25
    18a6:	96 e9       	ldi	r25, 0x96	; 150
    18a8:	bb 27       	eor	r27, r27
    18aa:	93 95       	inc	r25
    18ac:	f6 95       	lsr	r31
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	f1 11       	cpse	r31, r1
    18b8:	f8 cf       	rjmp	.-16     	; 0x18aa <__floatsisf+0x1c>
    18ba:	fa f4       	brpl	.+62     	; 0x18fa <__floatsisf+0x6c>
    18bc:	bb 0f       	add	r27, r27
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__floatsisf+0x36>
    18c0:	60 ff       	sbrs	r22, 0
    18c2:	1b c0       	rjmp	.+54     	; 0x18fa <__floatsisf+0x6c>
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <__floatsisf+0x6c>
    18ce:	88 23       	and	r24, r24
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <__floatsisf+0x48>
    18d2:	96 e9       	ldi	r25, 0x96	; 150
    18d4:	11 c0       	rjmp	.+34     	; 0x18f8 <__floatsisf+0x6a>
    18d6:	77 23       	and	r23, r23
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <__floatsisf+0x54>
    18da:	9e e8       	ldi	r25, 0x8E	; 142
    18dc:	87 2f       	mov	r24, r23
    18de:	76 2f       	mov	r23, r22
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <__floatsisf+0x5e>
    18e2:	66 23       	and	r22, r22
    18e4:	71 f0       	breq	.+28     	; 0x1902 <__floatsisf+0x74>
    18e6:	96 e8       	ldi	r25, 0x86	; 134
    18e8:	86 2f       	mov	r24, r22
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	2a f0       	brmi	.+10     	; 0x18fa <__floatsisf+0x6c>
    18f0:	9a 95       	dec	r25
    18f2:	66 0f       	add	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	da f7       	brpl	.-10     	; 0x18f0 <__floatsisf+0x62>
    18fa:	88 0f       	add	r24, r24
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	97 f9       	bld	r25, 7
    1902:	08 95       	ret

00001904 <__fp_cmp>:
    1904:	99 0f       	add	r25, r25
    1906:	00 08       	sbc	r0, r0
    1908:	55 0f       	add	r21, r21
    190a:	aa 0b       	sbc	r26, r26
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	fe ef       	ldi	r31, 0xFE	; 254
    1910:	16 16       	cp	r1, r22
    1912:	17 06       	cpc	r1, r23
    1914:	e8 07       	cpc	r30, r24
    1916:	f9 07       	cpc	r31, r25
    1918:	c0 f0       	brcs	.+48     	; 0x194a <__fp_cmp+0x46>
    191a:	12 16       	cp	r1, r18
    191c:	13 06       	cpc	r1, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	98 f0       	brcs	.+38     	; 0x194a <__fp_cmp+0x46>
    1924:	62 1b       	sub	r22, r18
    1926:	73 0b       	sbc	r23, r19
    1928:	84 0b       	sbc	r24, r20
    192a:	95 0b       	sbc	r25, r21
    192c:	39 f4       	brne	.+14     	; 0x193c <__fp_cmp+0x38>
    192e:	0a 26       	eor	r0, r26
    1930:	61 f0       	breq	.+24     	; 0x194a <__fp_cmp+0x46>
    1932:	23 2b       	or	r18, r19
    1934:	24 2b       	or	r18, r20
    1936:	25 2b       	or	r18, r21
    1938:	21 f4       	brne	.+8      	; 0x1942 <__fp_cmp+0x3e>
    193a:	08 95       	ret
    193c:	0a 26       	eor	r0, r26
    193e:	09 f4       	brne	.+2      	; 0x1942 <__fp_cmp+0x3e>
    1940:	a1 40       	sbci	r26, 0x01	; 1
    1942:	a6 95       	lsr	r26
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	81 1d       	adc	r24, r1
    1948:	81 1d       	adc	r24, r1
    194a:	08 95       	ret

0000194c <__fp_inf>:
    194c:	97 f9       	bld	r25, 7
    194e:	9f 67       	ori	r25, 0x7F	; 127
    1950:	80 e8       	ldi	r24, 0x80	; 128
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	08 95       	ret

00001958 <__fp_nan>:
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	80 ec       	ldi	r24, 0xC0	; 192
    195c:	08 95       	ret

0000195e <__fp_pscA>:
    195e:	00 24       	eor	r0, r0
    1960:	0a 94       	dec	r0
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	18 06       	cpc	r1, r24
    1968:	09 06       	cpc	r0, r25
    196a:	08 95       	ret

0000196c <__fp_pscB>:
    196c:	00 24       	eor	r0, r0
    196e:	0a 94       	dec	r0
    1970:	12 16       	cp	r1, r18
    1972:	13 06       	cpc	r1, r19
    1974:	14 06       	cpc	r1, r20
    1976:	05 06       	cpc	r0, r21
    1978:	08 95       	ret

0000197a <__fp_round>:
    197a:	09 2e       	mov	r0, r25
    197c:	03 94       	inc	r0
    197e:	00 0c       	add	r0, r0
    1980:	11 f4       	brne	.+4      	; 0x1986 <__fp_round+0xc>
    1982:	88 23       	and	r24, r24
    1984:	52 f0       	brmi	.+20     	; 0x199a <__fp_round+0x20>
    1986:	bb 0f       	add	r27, r27
    1988:	40 f4       	brcc	.+16     	; 0x199a <__fp_round+0x20>
    198a:	bf 2b       	or	r27, r31
    198c:	11 f4       	brne	.+4      	; 0x1992 <__fp_round+0x18>
    198e:	60 ff       	sbrs	r22, 0
    1990:	04 c0       	rjmp	.+8      	; 0x199a <__fp_round+0x20>
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	8f 4f       	sbci	r24, 0xFF	; 255
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	08 95       	ret

0000199c <__fp_split3>:
    199c:	57 fd       	sbrc	r21, 7
    199e:	90 58       	subi	r25, 0x80	; 128
    19a0:	44 0f       	add	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	59 f0       	breq	.+22     	; 0x19bc <__fp_splitA+0x10>
    19a6:	5f 3f       	cpi	r21, 0xFF	; 255
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <__fp_splitA+0x1a>
    19aa:	47 95       	ror	r20

000019ac <__fp_splitA>:
    19ac:	88 0f       	add	r24, r24
    19ae:	97 fb       	bst	r25, 7
    19b0:	99 1f       	adc	r25, r25
    19b2:	61 f0       	breq	.+24     	; 0x19cc <__fp_splitA+0x20>
    19b4:	9f 3f       	cpi	r25, 0xFF	; 255
    19b6:	79 f0       	breq	.+30     	; 0x19d6 <__fp_splitA+0x2a>
    19b8:	87 95       	ror	r24
    19ba:	08 95       	ret
    19bc:	12 16       	cp	r1, r18
    19be:	13 06       	cpc	r1, r19
    19c0:	14 06       	cpc	r1, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	f2 cf       	rjmp	.-28     	; 0x19aa <__fp_split3+0xe>
    19c6:	46 95       	lsr	r20
    19c8:	f1 df       	rcall	.-30     	; 0x19ac <__fp_splitA>
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <__fp_splitA+0x30>
    19cc:	16 16       	cp	r1, r22
    19ce:	17 06       	cpc	r1, r23
    19d0:	18 06       	cpc	r1, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	f1 cf       	rjmp	.-30     	; 0x19b8 <__fp_splitA+0xc>
    19d6:	86 95       	lsr	r24
    19d8:	71 05       	cpc	r23, r1
    19da:	61 05       	cpc	r22, r1
    19dc:	08 94       	sec
    19de:	08 95       	ret

000019e0 <__fp_zero>:
    19e0:	e8 94       	clt

000019e2 <__fp_szero>:
    19e2:	bb 27       	eor	r27, r27
    19e4:	66 27       	eor	r22, r22
    19e6:	77 27       	eor	r23, r23
    19e8:	cb 01       	movw	r24, r22
    19ea:	97 f9       	bld	r25, 7
    19ec:	08 95       	ret

000019ee <__gesf2>:
    19ee:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fp_cmp>
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <__gesf2+0x8>
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	08 95       	ret

000019f8 <__mulsf3>:
    19f8:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__mulsf3x>
    19fc:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    1a00:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    1a04:	38 f0       	brcs	.+14     	; 0x1a14 <__mulsf3+0x1c>
    1a06:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    1a0a:	20 f0       	brcs	.+8      	; 0x1a14 <__mulsf3+0x1c>
    1a0c:	95 23       	and	r25, r21
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <__mulsf3+0x1c>
    1a10:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1a14:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    1a18:	11 24       	eor	r1, r1
    1a1a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>

00001a1e <__mulsf3x>:
    1a1e:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    1a22:	70 f3       	brcs	.-36     	; 0x1a00 <__mulsf3+0x8>

00001a24 <__mulsf3_pse>:
    1a24:	95 9f       	mul	r25, r21
    1a26:	c1 f3       	breq	.-16     	; 0x1a18 <__mulsf3+0x20>
    1a28:	95 0f       	add	r25, r21
    1a2a:	50 e0       	ldi	r21, 0x00	; 0
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	62 9f       	mul	r22, r18
    1a30:	f0 01       	movw	r30, r0
    1a32:	72 9f       	mul	r23, r18
    1a34:	bb 27       	eor	r27, r27
    1a36:	f0 0d       	add	r31, r0
    1a38:	b1 1d       	adc	r27, r1
    1a3a:	63 9f       	mul	r22, r19
    1a3c:	aa 27       	eor	r26, r26
    1a3e:	f0 0d       	add	r31, r0
    1a40:	b1 1d       	adc	r27, r1
    1a42:	aa 1f       	adc	r26, r26
    1a44:	64 9f       	mul	r22, r20
    1a46:	66 27       	eor	r22, r22
    1a48:	b0 0d       	add	r27, r0
    1a4a:	a1 1d       	adc	r26, r1
    1a4c:	66 1f       	adc	r22, r22
    1a4e:	82 9f       	mul	r24, r18
    1a50:	22 27       	eor	r18, r18
    1a52:	b0 0d       	add	r27, r0
    1a54:	a1 1d       	adc	r26, r1
    1a56:	62 1f       	adc	r22, r18
    1a58:	73 9f       	mul	r23, r19
    1a5a:	b0 0d       	add	r27, r0
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	62 1f       	adc	r22, r18
    1a60:	83 9f       	mul	r24, r19
    1a62:	a0 0d       	add	r26, r0
    1a64:	61 1d       	adc	r22, r1
    1a66:	22 1f       	adc	r18, r18
    1a68:	74 9f       	mul	r23, r20
    1a6a:	33 27       	eor	r19, r19
    1a6c:	a0 0d       	add	r26, r0
    1a6e:	61 1d       	adc	r22, r1
    1a70:	23 1f       	adc	r18, r19
    1a72:	84 9f       	mul	r24, r20
    1a74:	60 0d       	add	r22, r0
    1a76:	21 1d       	adc	r18, r1
    1a78:	82 2f       	mov	r24, r18
    1a7a:	76 2f       	mov	r23, r22
    1a7c:	6a 2f       	mov	r22, r26
    1a7e:	11 24       	eor	r1, r1
    1a80:	9f 57       	subi	r25, 0x7F	; 127
    1a82:	50 40       	sbci	r21, 0x00	; 0
    1a84:	9a f0       	brmi	.+38     	; 0x1aac <__mulsf3_pse+0x88>
    1a86:	f1 f0       	breq	.+60     	; 0x1ac4 <__mulsf3_pse+0xa0>
    1a88:	88 23       	and	r24, r24
    1a8a:	4a f0       	brmi	.+18     	; 0x1a9e <__mulsf3_pse+0x7a>
    1a8c:	ee 0f       	add	r30, r30
    1a8e:	ff 1f       	adc	r31, r31
    1a90:	bb 1f       	adc	r27, r27
    1a92:	66 1f       	adc	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	91 50       	subi	r25, 0x01	; 1
    1a9a:	50 40       	sbci	r21, 0x00	; 0
    1a9c:	a9 f7       	brne	.-22     	; 0x1a88 <__mulsf3_pse+0x64>
    1a9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	80 f0       	brcs	.+32     	; 0x1ac4 <__mulsf3_pse+0xa0>
    1aa4:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1aa8:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    1aac:	5f 3f       	cpi	r21, 0xFF	; 255
    1aae:	e4 f3       	brlt	.-8      	; 0x1aa8 <__mulsf3_pse+0x84>
    1ab0:	98 3e       	cpi	r25, 0xE8	; 232
    1ab2:	d4 f3       	brlt	.-12     	; 0x1aa8 <__mulsf3_pse+0x84>
    1ab4:	86 95       	lsr	r24
    1ab6:	77 95       	ror	r23
    1ab8:	67 95       	ror	r22
    1aba:	b7 95       	ror	r27
    1abc:	f7 95       	ror	r31
    1abe:	e7 95       	ror	r30
    1ac0:	9f 5f       	subi	r25, 0xFF	; 255
    1ac2:	c1 f7       	brne	.-16     	; 0x1ab4 <__mulsf3_pse+0x90>
    1ac4:	fe 2b       	or	r31, r30
    1ac6:	88 0f       	add	r24, r24
    1ac8:	91 1d       	adc	r25, r1
    1aca:	96 95       	lsr	r25
    1acc:	87 95       	ror	r24
    1ace:	97 f9       	bld	r25, 7
    1ad0:	08 95       	ret

00001ad2 <__divmodhi4>:
    1ad2:	97 fb       	bst	r25, 7
    1ad4:	07 2e       	mov	r0, r23
    1ad6:	16 f4       	brtc	.+4      	; 0x1adc <__divmodhi4+0xa>
    1ad8:	00 94       	com	r0
    1ada:	07 d0       	rcall	.+14     	; 0x1aea <__divmodhi4_neg1>
    1adc:	77 fd       	sbrc	r23, 7
    1ade:	09 d0       	rcall	.+18     	; 0x1af2 <__divmodhi4_neg2>
    1ae0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__udivmodhi4>
    1ae4:	07 fc       	sbrc	r0, 7
    1ae6:	05 d0       	rcall	.+10     	; 0x1af2 <__divmodhi4_neg2>
    1ae8:	3e f4       	brtc	.+14     	; 0x1af8 <__divmodhi4_exit>

00001aea <__divmodhi4_neg1>:
    1aea:	90 95       	com	r25
    1aec:	81 95       	neg	r24
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	08 95       	ret

00001af2 <__divmodhi4_neg2>:
    1af2:	70 95       	com	r23
    1af4:	61 95       	neg	r22
    1af6:	7f 4f       	sbci	r23, 0xFF	; 255

00001af8 <__divmodhi4_exit>:
    1af8:	08 95       	ret

00001afa <__udivmodsi4>:
    1afa:	a1 e2       	ldi	r26, 0x21	; 33
    1afc:	1a 2e       	mov	r1, r26
    1afe:	aa 1b       	sub	r26, r26
    1b00:	bb 1b       	sub	r27, r27
    1b02:	fd 01       	movw	r30, r26
    1b04:	0d c0       	rjmp	.+26     	; 0x1b20 <__udivmodsi4_ep>

00001b06 <__udivmodsi4_loop>:
    1b06:	aa 1f       	adc	r26, r26
    1b08:	bb 1f       	adc	r27, r27
    1b0a:	ee 1f       	adc	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	a2 17       	cp	r26, r18
    1b10:	b3 07       	cpc	r27, r19
    1b12:	e4 07       	cpc	r30, r20
    1b14:	f5 07       	cpc	r31, r21
    1b16:	20 f0       	brcs	.+8      	; 0x1b20 <__udivmodsi4_ep>
    1b18:	a2 1b       	sub	r26, r18
    1b1a:	b3 0b       	sbc	r27, r19
    1b1c:	e4 0b       	sbc	r30, r20
    1b1e:	f5 0b       	sbc	r31, r21

00001b20 <__udivmodsi4_ep>:
    1b20:	66 1f       	adc	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	1a 94       	dec	r1
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <__udivmodsi4_loop>
    1b2c:	60 95       	com	r22
    1b2e:	70 95       	com	r23
    1b30:	80 95       	com	r24
    1b32:	90 95       	com	r25
    1b34:	9b 01       	movw	r18, r22
    1b36:	ac 01       	movw	r20, r24
    1b38:	bd 01       	movw	r22, r26
    1b3a:	cf 01       	movw	r24, r30
    1b3c:	08 95       	ret

00001b3e <__udivmodhi4>:
    1b3e:	aa 1b       	sub	r26, r26
    1b40:	bb 1b       	sub	r27, r27
    1b42:	51 e1       	ldi	r21, 0x11	; 17
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <__udivmodhi4_ep>

00001b46 <__udivmodhi4_loop>:
    1b46:	aa 1f       	adc	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	a6 17       	cp	r26, r22
    1b4c:	b7 07       	cpc	r27, r23
    1b4e:	10 f0       	brcs	.+4      	; 0x1b54 <__udivmodhi4_ep>
    1b50:	a6 1b       	sub	r26, r22
    1b52:	b7 0b       	sbc	r27, r23

00001b54 <__udivmodhi4_ep>:
    1b54:	88 1f       	adc	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	5a 95       	dec	r21
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__udivmodhi4_loop>
    1b5c:	80 95       	com	r24
    1b5e:	90 95       	com	r25
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	08 95       	ret

00001b66 <_exit>:
    1b66:	f8 94       	cli

00001b68 <__stop_program>:
    1b68:	ff cf       	rjmp	.-2      	; 0x1b68 <__stop_program>
