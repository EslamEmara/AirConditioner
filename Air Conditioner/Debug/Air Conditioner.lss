
Air Conditioner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000018dc  00001970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008e  0080008e  0000199e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026dd  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe3  00000000  00000000  00004381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001659  00000000  00000000  00005364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  000069c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c33  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b60  00000000  00000000  00007c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000097ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_4>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__vector_7>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_10>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	62 01       	movw	r12, r4
      56:	80 01       	movw	r16, r0
      58:	64 01       	movw	r12, r8
      5a:	66 01       	movw	r12, r12
      5c:	68 01       	movw	r12, r16
      5e:	6a 01       	movw	r12, r20
      60:	6c 01       	movw	r12, r24
      62:	6e 01       	movw	r12, r28
      64:	70 01       	movw	r14, r0
      66:	72 01       	movw	r14, r4
      68:	74 01       	movw	r14, r8
      6a:	76 01       	movw	r14, r12
      6c:	78 01       	movw	r14, r16
      6e:	7a 01       	movw	r14, r20
      70:	7c 01       	movw	r14, r24
      72:	7e 01       	movw	r14, r28

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	10 e0       	ldi	r17, 0x00	; 0
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ec ed       	ldi	r30, 0xDC	; 220
      88:	f8 e1       	ldi	r31, 0x18	; 24
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	ae 38       	cpi	r26, 0x8E	; 142
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	20 e0       	ldi	r18, 0x00	; 0
      98:	ae e8       	ldi	r26, 0x8E	; 142
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a7 39       	cpi	r26, 0x97	; 151
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 1c 04 	call	0x838	; 0x838 <main>
      aa:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <TimerCounter>:
	}
}


void TimerCounter (){
	if (gLcd_mode == DESIRED_MODE)
      b2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gLcd_mode>
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	11 f4       	brne	.+4      	; 0xbe <TimerCounter+0xc>
		gTimeOut = 1;
      ba:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <gTimeOut>
      be:	08 95       	ret

000000c0 <App_Init>:

void TimerCounter (void);

void App_Init(void) {
	
	LCD_init () ; 
      c0:	0e 94 66 02 	call	0x4cc	; 0x4cc <LCD_init>
	Lm35_init (LM35_ID0) ;
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	0e 94 83 03 	call	0x706	; 0x706 <Lm35_init>
	Motor_init(	MOTOR_1_config );; 
      ca:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      ce:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      d2:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      d6:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
      da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
      de:	0e 94 8e 03 	call	0x71c	; 0x71c <Motor_init>
	set_stopWatch(WAIT_TIME, TimerCounter,1);
      e2:	21 e0       	ldi	r18, 0x01	; 1
      e4:	49 e5       	ldi	r20, 0x59	; 89
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	80 ea       	ldi	r24, 0xA0	; 160
      ee:	90 e4       	ldi	r25, 0x40	; 64
      f0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <set_stopWatch>
	LCD_displayStringRowColumn(0,0,"Current temprature");
      f4:	4b e7       	ldi	r20, 0x7B	; 123
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LCD_displayStringRowColumn>
	gLcd_mode = ACTUAL_MODE;
     100:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <gLcd_mode>
	gDesired_temp = 25;
     104:	89 e1       	ldi	r24, 0x19	; 25
     106:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	gTimeOut = 0;
     10a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <gTimeOut>
     10e:	08 95       	ret

00000110 <App_GetUserInput>:
/*
Description : function to get desired temperature from user (only 2 digits)
inputs		: none
outputs		: return value of desired temperature	|| 0 >> number entered is out of limits
*/
uint8_t App_GetUserInput() {												/*Get desired temperature from keypad (integer)*/
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <App_GetUserInput+0x8>
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	uint8_t no_of_digits = 0 ;
	uint8_t single_key = 0 ;  
	uint8_t array_of_keys [3] = {0 , 0 , 0} ; 
     11e:	19 82       	std	Y+1, r1	; 0x01
     120:	1a 82       	std	Y+2, r1	; 0x02
     122:	1b 82       	std	Y+3, r1	; 0x03
Description : function to get desired temperature from user (only 2 digits)
inputs		: none
outputs		: return value of desired temperature	|| 0 >> number entered is out of limits
*/
uint8_t App_GetUserInput() {												/*Get desired temperature from keypad (integer)*/
	uint8_t no_of_digits = 0 ;
     124:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t array_of_keys [3] = {0 , 0 , 0} ; 
	uint8_t counter = 0 ; 
	uint8_t int_keys = 0 ; 

	while (1) {
		single_key = KeyPad_getPressedKey () ;                               // get key pressed on keypad
     126:	0e 94 82 01 	call	0x304	; 0x304 <KeyPad_getPressedKey>
		if ((single_key != '=') && (single_key != '*') && (single_key != '%') && (single_key != '+') && (single_key != '-')) {									// user doesn't finish entering temperature
     12a:	8d 33       	cpi	r24, 0x3D	; 61
     12c:	b1 f0       	breq	.+44     	; 0x15a <App_GetUserInput+0x4a>
     12e:	8a 32       	cpi	r24, 0x2A	; 42
     130:	a1 f0       	breq	.+40     	; 0x15a <App_GetUserInput+0x4a>
     132:	85 32       	cpi	r24, 0x25	; 37
     134:	91 f0       	breq	.+36     	; 0x15a <App_GetUserInput+0x4a>
     136:	8b 32       	cpi	r24, 0x2B	; 43
     138:	81 f0       	breq	.+32     	; 0x15a <App_GetUserInput+0x4a>
     13a:	8d 32       	cpi	r24, 0x2D	; 45
     13c:	71 f0       	breq	.+28     	; 0x15a <App_GetUserInput+0x4a>
			gLcd_mode = DESIRED_MODE;
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <gLcd_mode>
			if (no_of_digits < 2) {									// no of digits pressed still valid
     144:	12 30       	cpi	r17, 0x02	; 2
     146:	78 f7       	brcc	.-34     	; 0x126 <App_GetUserInput+0x16>
				array_of_keys [no_of_digits] = single_key ;				// add pressed key into the array of integers
     148:	e1 e0       	ldi	r30, 0x01	; 1
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	ec 0f       	add	r30, r28
     14e:	fd 1f       	adc	r31, r29
     150:	e1 0f       	add	r30, r17
     152:	f1 1d       	adc	r31, r1
     154:	80 83       	st	Z, r24
				no_of_digits ++ ;
     156:	1f 5f       	subi	r17, 0xFF	; 255
     158:	e6 cf       	rjmp	.-52     	; 0x126 <App_GetUserInput+0x16>
			}
		}
		else if (single_key == '=') {								// here the user finished entering the temperature
     15a:	8d 33       	cpi	r24, 0x3D	; 61
     15c:	21 f7       	brne	.-56     	; 0x126 <App_GetUserInput+0x16>
     15e:	0f c0       	rjmp	.+30     	; 0x17e <App_GetUserInput+0x6e>
			for (counter = 0 ; counter < 2 ; counter ++) {				// convert array of integers into single integer
				int_keys = 10*int_keys + array_of_keys[counter] ;
     160:	88 0f       	add	r24, r24
     162:	98 2f       	mov	r25, r24
     164:	99 0f       	add	r25, r25
     166:	99 0f       	add	r25, r25
     168:	89 0f       	add	r24, r25
     16a:	e1 e0       	ldi	r30, 0x01	; 1
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	ec 0f       	add	r30, r28
     170:	fd 1f       	adc	r31, r29
     172:	e2 0f       	add	r30, r18
     174:	f1 1d       	adc	r31, r1
     176:	90 81       	ld	r25, Z
     178:	89 0f       	add	r24, r25
				array_of_keys [no_of_digits] = single_key ;				// add pressed key into the array of integers
				no_of_digits ++ ;
			}
		}
		else if (single_key == '=') {								// here the user finished entering the temperature
			for (counter = 0 ; counter < 2 ; counter ++) {				// convert array of integers into single integer
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	02 c0       	rjmp	.+4      	; 0x182 <App_GetUserInput+0x72>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	22 30       	cpi	r18, 0x02	; 2
     184:	68 f3       	brcs	.-38     	; 0x160 <App_GetUserInput+0x50>
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	01 c0       	rjmp	.+2      	; 0x18c <App_GetUserInput+0x7c>
				int_keys = 10*int_keys + array_of_keys[counter] ;
			}
			no_of_digits = 0 ;										// assign zero to no_of_digits to start again 
			for (counter = 0 ; counter < 3 ; counter ++) {			// assign zeros to the array after finishing
     18a:	9f 5f       	subi	r25, 0xFF	; 255
     18c:	93 30       	cpi	r25, 0x03	; 3
     18e:	e8 f3       	brcs	.-6      	; 0x18a <App_GetUserInput+0x7a>
				array_of_keys [counter] = 0 ;
			}
			// return converted value
			if ((int_keys >= 15) && (int_keys <= 30)) {				//check limits on inputs >= 15 , <= 30
     190:	91 ef       	ldi	r25, 0xF1	; 241
     192:	98 0f       	add	r25, r24
     194:	90 31       	cpi	r25, 0x10	; 16
     196:	08 f0       	brcs	.+2      	; 0x19a <App_GetUserInput+0x8a>
				return int_keys ;
			}
			else {
				return 0 ; 		
     198:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	08 95       	ret

000001a8 <App_MeasureCurrentTemp>:
inputs		: none
outputs		: return value of measured temperature	 
*/
uint8_t App_MeasureCurrentTemp(void) {
	uint8_t current_temp = 0 ; 
	current_temp = Lm35_GetTemp (LM35_ID0) ; 
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 8b 03 	call	0x716	; 0x716 <Lm35_GetTemp>
	return current_temp ; 
}							
     1ae:	08 95       	ret

000001b0 <App_AdjustTemp>:
outputs		: none	
*/
void App_AdjustTemp(uint8_t currentTemp ,uint8_t desiredTemp) {
	/*if currentTemp > desired FAN On*/
	/*else Fan OFF*/
	if (currentTemp > desiredTemp) {
     1b0:	68 17       	cp	r22, r24
     1b2:	70 f4       	brcc	.+28     	; 0x1d0 <App_AdjustTemp+0x20>
		Motor_moveForward(MOTOR_1_config , 80) ;     // FAN ON 
     1b4:	20 e5       	ldi	r18, 0x50	; 80
     1b6:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ba:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1be:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     1c2:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     1c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     1ca:	0e 94 c3 03 	call	0x786	; 0x786 <Motor_moveForward>
     1ce:	08 95       	ret
	}
	else {
		Motor_moveForward(MOTOR_1_config , 0) ;     // FAN OFF 
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1d6:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1da:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     1de:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     1e2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
     1e6:	0e 94 c3 03 	call	0x786	; 0x786 <Motor_moveForward>
     1ea:	08 95       	ret

000001ec <convert_2DigitInt_to_str>:
	}
}			

void convert_2DigitInt_to_str(uint8_t number,uint8_t* arr){
     1ec:	fb 01       	movw	r30, r22
	arr[0] = (number / 10);
     1ee:	9d ec       	ldi	r25, 0xCD	; 205
     1f0:	89 9f       	mul	r24, r25
     1f2:	91 2d       	mov	r25, r1
     1f4:	11 24       	eor	r1, r1
     1f6:	96 95       	lsr	r25
     1f8:	96 95       	lsr	r25
     1fa:	96 95       	lsr	r25
     1fc:	90 83       	st	Z, r25

	if (arr[0] == 0){
     1fe:	91 11       	cpse	r25, r1
     200:	04 c0       	rjmp	.+8      	; 0x20a <convert_2DigitInt_to_str+0x1e>
		arr[0] = number + '0';
     202:	80 5d       	subi	r24, 0xD0	; 208
     204:	80 83       	st	Z, r24
		arr[1] = '\0';
     206:	11 82       	std	Z+1, r1	; 0x01
		return;
     208:	08 95       	ret
	}
	else{
		arr[1]= (number - (arr[0]*10));
     20a:	39 2f       	mov	r19, r25
     20c:	33 0f       	add	r19, r19
     20e:	23 2f       	mov	r18, r19
     210:	22 0f       	add	r18, r18
     212:	22 0f       	add	r18, r18
     214:	23 0f       	add	r18, r19
     216:	82 1b       	sub	r24, r18
		arr[0]+= '0';
     218:	90 5d       	subi	r25, 0xD0	; 208
     21a:	90 83       	st	Z, r25
		arr[1]+='0';
     21c:	80 5d       	subi	r24, 0xD0	; 208
     21e:	81 83       	std	Z+1, r24	; 0x01
		arr[2]= '\0';
     220:	12 82       	std	Z+2, r1	; 0x02
     222:	08 95       	ret

00000224 <App_PrintCurrenTemp>:
}

void App_PrintCurrenTemp(uint8_t current)								/*Print Temp values on LCD*/
{
	uint8_t* Str_number = '\0';
	convert_2DigitInt_to_str(current,Str_number);
     224:	60 e0       	ldi	r22, 0x00	; 0
     226:	70 e0       	ldi	r23, 0x00	; 0
     228:	0e 94 f6 00 	call	0x1ec	; 0x1ec <convert_2DigitInt_to_str>
	LCD_clearScreen();
     22c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_clearScreen>
	LCD_displayString(Str_number);
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_displayString>
     238:	08 95       	ret

0000023a <App_PrintDesiredMode>:
}

void App_PrintDesiredMode()
{
	uint8_t* Str_number = '\0';
	convert_2DigitInt_to_str(gDesired_temp,Str_number);
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     242:	0e 94 f6 00 	call	0x1ec	; 0x1ec <convert_2DigitInt_to_str>
	LCD_clearScreen();
     246:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_clearScreen>
	LCD_displayString(Str_number);
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_displayString>
     252:	08 95       	ret

00000254 <app>:
}

void app(){
     254:	cf 93       	push	r28
	uint8_t current_temp = App_MeasureCurrentTemp();
     256:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <App_MeasureCurrentTemp>
     25a:	c8 2f       	mov	r28, r24
	uint8_t stopwatch_started = 0;
	gDesired_temp = App_GetUserInput();
     25c:	0e 94 88 00 	call	0x110	; 0x110 <App_GetUserInput>
     260:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end>
	
	if (gDesired_temp !=0){
     264:	88 23       	and	r24, r24
     266:	59 f0       	breq	.+22     	; 0x27e <app+0x2a>
		gLcd_mode = DESIRED_MODE;
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <gLcd_mode>
		gTimeOut = 0;										/*start counting 5 secs (reset counter to zero mode)*/
     26e:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <gTimeOut>
		stopwatch_started = 1;	
		App_AdjustTemp(current_temp,gDesired_temp);		
     272:	68 2f       	mov	r22, r24
     274:	8c 2f       	mov	r24, r28
     276:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <App_AdjustTemp>
	gDesired_temp = App_GetUserInput();
	
	if (gDesired_temp !=0){
		gLcd_mode = DESIRED_MODE;
		gTimeOut = 0;										/*start counting 5 secs (reset counter to zero mode)*/
		stopwatch_started = 1;	
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	01 c0       	rjmp	.+2      	; 0x280 <app+0x2c>
	LCD_displayString(Str_number);
}

void app(){
	uint8_t current_temp = App_MeasureCurrentTemp();
	uint8_t stopwatch_started = 0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
		gLcd_mode = DESIRED_MODE;
		gTimeOut = 0;										/*start counting 5 secs (reset counter to zero mode)*/
		stopwatch_started = 1;	
		App_AdjustTemp(current_temp,gDesired_temp);		
	}
	if (stopwatch_started == 1){							/*if stopwatch started counting*/
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	31 f4       	brne	.+12     	; 0x290 <app+0x3c>
		if(gTimeOut == 1){					/*if stopwatch finished counting	(check on count mode*/
     284:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <gTimeOut>
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	11 f4       	brne	.+4      	; 0x290 <app+0x3c>
			gLcd_mode = ACTUAL_MODE;
     28c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <gLcd_mode>
			stopwatch_started = 0;				
		}
	}
	
	if(gLcd_mode == DESIRED_MODE){							/*Desired temprature mode*/
     290:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <gLcd_mode>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	31 f4       	brne	.+12     	; 0x2a4 <app+0x50>
		App_PrintDesiredMode(gDesired_temp);
     298:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__data_end>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 1d 01 	call	0x23a	; 0x23a <App_PrintDesiredMode>
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <app+0x56>
	}
	else{													/*Actual temprature mode*/
		App_PrintCurrenTemp(current_temp);
     2a4:	8c 2f       	mov	r24, r28
     2a6:	0e 94 12 01 	call	0x224	; 0x224 <App_PrintCurrenTemp>
	}
}
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <KeyPad_4x4_adjustKeyNumber>:

#elif (N_col == 4)

static uint8_t KeyPad_4x4_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
     2ae:	48 2f       	mov	r20, r24
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	fa 01       	movw	r30, r20
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	e0 31       	cpi	r30, 0x10	; 16
     2b8:	f1 05       	cpc	r31, r1
     2ba:	18 f5       	brcc	.+70     	; 0x302 <KeyPad_4x4_adjustKeyNumber+0x54>
     2bc:	e6 5d       	subi	r30, 0xD6	; 214
     2be:	ff 4f       	sbci	r31, 0xFF	; 255
     2c0:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__tablejump2__>
	{
		case 1: return 7;
     2c4:	87 e0       	ldi	r24, 0x07	; 7
     2c6:	08 95       	ret
				break;
		case 2: return 8;
				break;
		case 3: return 9;
     2c8:	89 e0       	ldi	r24, 0x09	; 9
     2ca:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
     2cc:	85 e2       	ldi	r24, 0x25	; 37
     2ce:	08 95       	ret
				break;
		case 5: return 4;
     2d0:	84 e0       	ldi	r24, 0x04	; 4
     2d2:	08 95       	ret
				break;
		case 6: return 5;
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	08 95       	ret
				break;
		case 7: return 6;
     2d8:	86 e0       	ldi	r24, 0x06	; 6
     2da:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     2dc:	8a e2       	ldi	r24, 0x2A	; 42
     2de:	08 95       	ret
				break;
		case 9: return 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	08 95       	ret
				break;
		case 10: return 2;
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	08 95       	ret
				break;
		case 11: return 3;
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     2ec:	8d e2       	ldi	r24, 0x2D	; 45
     2ee:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
     2f0:	8d e0       	ldi	r24, 0x0D	; 13
     2f2:	08 95       	ret
				break;
		case 14: return 0;
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
     2f8:	8d e3       	ldi	r24, 0x3D	; 61
     2fa:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     2fc:	8b e2       	ldi	r24, 0x2B	; 43
     2fe:	08 95       	ret
{
	switch(button_number)
	{
		case 1: return 7;
				break;
		case 2: return 8;
     300:	88 e0       	ldi	r24, 0x08	; 8
				break;
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return button_number;
	}
}
     302:	08 95       	ret

00000304 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     308:	d0 e0       	ldi	r29, 0x00	; 0
     30a:	2a c0       	rjmp	.+84     	; 0x360 <KeyPad_getPressedKey+0x5c>
			/*
			 * each time only one of the column pins will be output and
			 * the rest will be input pins include the row pins
			 */
			//KEYPAD_PORT_DIR = (0b00010000<<col);
			DIO_SetPortDirection(KEYPAD_PORT_DIR,INPUT);
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	82 e0       	ldi	r24, 0x02	; 2
     310:	0e 94 2d 05 	call	0xa5a	; 0xa5a <DIO_SetPortDirection>
			DIO_SetPinDirection(KEYPAD_PORT_DIR, 4 + col, OUTPUT);
     314:	41 e0       	ldi	r20, 0x01	; 1
     316:	64 e0       	ldi	r22, 0x04	; 4
     318:	6d 0f       	add	r22, r29
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
			 * clear the output pin column in this trace and enable the internal
			 * pull up resistors for the rows pins
			 */
			
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));
     320:	60 e1       	ldi	r22, 0x10	; 16
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	0d 2e       	mov	r0, r29
     326:	02 c0       	rjmp	.+4      	; 0x32c <KeyPad_getPressedKey+0x28>
     328:	66 0f       	add	r22, r22
     32a:	77 1f       	adc	r23, r23
     32c:	0a 94       	dec	r0
     32e:	e2 f7       	brpl	.-8      	; 0x328 <KeyPad_getPressedKey+0x24>
     330:	60 95       	com	r22
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_SetPortValue>

			for(row=0;row<N_row;row++) /* loop for rows */
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	0f c0       	rjmp	.+30     	; 0x35a <KeyPad_getPressedKey+0x56>
			{
				//BIT_IS_CLEAR(KEYPAD_PORT_IN,row)
				if(DIO_GetPinValue(KEYPAD_PORT_IN, row) == 0) /* if the switch is press in this row */
     33c:	6c 2f       	mov	r22, r28
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 85 05 	call	0xb0a	; 0xb0a <DIO_GetPinValue>
     344:	81 11       	cpse	r24, r1
     346:	08 c0       	rjmp	.+16     	; 0x358 <KeyPad_getPressedKey+0x54>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     348:	cc 0f       	add	r28, r28
     34a:	cc 0f       	add	r28, r28
     34c:	8c 2f       	mov	r24, r28
     34e:	8d 0f       	add	r24, r29
     350:	8f 5f       	subi	r24, 0xFF	; 255
     352:	0e 94 57 01 	call	0x2ae	; 0x2ae <KeyPad_4x4_adjustKeyNumber>
     356:	07 c0       	rjmp	.+14     	; 0x366 <KeyPad_getPressedKey+0x62>
			 */
			
			//KEYPAD_PORT_OUT = (~(0b00010000<<col));
			DIO_SetPortValue(KEYPAD_PORT_OUT,(~(0b00010000<<col)));

			for(row=0;row<N_row;row++) /* loop for rows */
     358:	cf 5f       	subi	r28, 0xFF	; 255
     35a:	c4 30       	cpi	r28, 0x04	; 4
     35c:	78 f3       	brcs	.-34     	; 0x33c <KeyPad_getPressedKey+0x38>
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     35e:	df 5f       	subi	r29, 0xFF	; 255
     360:	d4 30       	cpi	r29, 0x04	; 4
     362:	a0 f2       	brcs	.-88     	; 0x30c <KeyPad_getPressedKey+0x8>
     364:	d1 cf       	rjmp	.-94     	; 0x308 <KeyPad_getPressedKey+0x4>
					#endif
				}
			}
		}
	}
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8_t command)
{
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	c8 2f       	mov	r28, r24
	//CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, LOW);
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	62 e0       	ldi	r22, 0x02	; 2
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tas = 50ns */
	Timer_Delay(0.000001, timer0_config1);
     388:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     38c:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     390:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     394:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     398:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     39c:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     3a0:	6d eb       	ldi	r22, 0xBD	; 189
     3a2:	77 e3       	ldi	r23, 0x37	; 55
     3a4:	86 e8       	ldi	r24, 0x86	; 134
     3a6:	95 e3       	ldi	r25, 0x35	; 53
     3a8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     3ac:	41 e0       	ldi	r20, 0x01	; 1
     3ae:	63 e0       	ldi	r22, 0x03	; 3
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     3b6:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     3ba:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     3be:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     3c2:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     3c6:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     3ca:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     3ce:	6d eb       	ldi	r22, 0xBD	; 189
     3d0:	77 e3       	ldi	r23, 0x37	; 55
     3d2:	86 e8       	ldi	r24, 0x86	; 134
     3d4:	95 e3       	ldi	r25, 0x35	; 53
     3d6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	#ifdef UPPER_PORT_PINS
		//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
		DIO_SetUpperHalfPortValue(LCD_DATA_PORT, (command & 0xF0));
     3da:	6c 2f       	mov	r22, r28
     3dc:	60 7f       	andi	r22, 0xF0	; 240
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_SetUpperHalfPortValue>
		//DIO_SetPortValue(LCD_DATA_PORT, (command & 0xF0) >> 4);
		DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (command & 0xF0) >> 4);
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     3e4:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     3e8:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     3ec:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     3f0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     3f4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     3f8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     3fc:	6d eb       	ldi	r22, 0xBD	; 189
     3fe:	77 e3       	ldi	r23, 0x37	; 55
     400:	86 e8       	ldi	r24, 0x86	; 134
     402:	95 e3       	ldi	r25, 0x35	; 53
     404:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	63 e0       	ldi	r22, 0x03	; 3
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     412:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     416:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     41a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     41e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     422:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     426:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     42a:	6d eb       	ldi	r22, 0xBD	; 189
     42c:	77 e3       	ldi	r23, 0x37	; 55
     42e:	86 e8       	ldi	r24, 0x86	; 134
     430:	95 e3       	ldi	r25, 0x35	; 53
     432:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
//	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	63 e0       	ldi	r22, 0x03	; 3
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     440:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     444:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     448:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     44c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     450:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     454:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     458:	6d eb       	ldi	r22, 0xBD	; 189
     45a:	77 e3       	ldi	r23, 0x37	; 55
     45c:	86 e8       	ldi	r24, 0x86	; 134
     45e:	95 e3       	ldi	r25, 0x35	; 53
     460:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, ((command & 0x0F) << 4));
     464:	80 e1       	ldi	r24, 0x10	; 16
     466:	c8 9f       	mul	r28, r24
     468:	b0 01       	movw	r22, r0
     46a:	11 24       	eor	r1, r1
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_SetUpperHalfPortValue>
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (command & 0x0F));
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     472:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     476:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     47a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     47e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     482:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     486:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     48a:	6d eb       	ldi	r22, 0xBD	; 189
     48c:	77 e3       	ldi	r23, 0x37	; 55
     48e:	86 e8       	ldi	r24, 0x86	; 134
     490:	95 e3       	ldi	r25, 0x35	; 53
     492:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	63 e0       	ldi	r22, 0x03	; 3
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     4a0:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     4a4:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     4a8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     4ac:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     4b0:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     4b4:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     4b8:	6d eb       	ldi	r22, 0xBD	; 189
     4ba:	77 e3       	ldi	r23, 0x37	; 55
     4bc:	86 e8       	ldi	r24, 0x86	; 134
     4be:	95 e3       	ldi	r25, 0x35	; 53
     4c0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
#endif
}
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <LCD_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
//	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, E, OUTPUT);
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	63 e0       	ldi	r22, 0x03	; 3
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT);
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT);
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	62 e0       	ldi	r22, 0x02	; 2
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
	
	DIO_SetPortValue(LCD_CTRL_PORT_DIR, 0x00);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_SetPortValue>
	DIO_SetPortValue(LCD_DATA_PORT_DIR, 0x00);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_SetPortValue>

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			//LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 4, OUTPUT);
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 5, OUTPUT);
     504:	41 e0       	ldi	r20, 0x01	; 1
     506:	65 e0       	ldi	r22, 0x05	; 5
     508:	83 e0       	ldi	r24, 0x03	; 3
     50a:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 6, OUTPUT);
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	66 e0       	ldi	r22, 0x06	; 6
     512:	83 e0       	ldi	r24, 0x03	; 3
     514:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 7, OUTPUT);
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	67 e0       	ldi	r22, 0x07	; 7
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 0, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 1, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 2, OUTPUT);
			DIO_SetPinDirection(LCD_DATA_PORT_DIR, 3, OUTPUT);
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     528:	88 e2       	ldi	r24, 0x28	; 40
     52a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
		//LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		DIO_SetPortDirection(LCD_DATA_PORT_DIR, OUTPUT);
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     52e:	8c e0       	ldi	r24, 0x0C	; 12
     530:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
     53a:	08 95       	ret

0000053c <LCD_displayCharacter>:
	Timer_Delay(0.000001, timer0_config1);
#endif
}

void LCD_displayCharacter(uint8_t data)
{
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	c8 2f       	mov	r28, r24
	//SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, RS, HIGH);
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, RW, LOW);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tas = 50ns */
	Timer_Delay(0.000001, timer0_config1);
     558:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     55c:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     560:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     564:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     568:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     56c:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     570:	6d eb       	ldi	r22, 0xBD	; 189
     572:	77 e3       	ldi	r23, 0x37	; 55
     574:	86 e8       	ldi	r24, 0x86	; 134
     576:	95 e3       	ldi	r25, 0x35	; 53
     578:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	63 e0       	ldi	r22, 0x03	; 3
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     586:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     58a:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     58e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     592:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     596:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     59a:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     59e:	6d eb       	ldi	r22, 0xBD	; 189
     5a0:	77 e3       	ldi	r23, 0x37	; 55
     5a2:	86 e8       	ldi	r24, 0x86	; 134
     5a4:	95 e3       	ldi	r25, 0x35	; 53
     5a6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, (data & 0xF0));
     5aa:	6c 2f       	mov	r22, r28
     5ac:	60 7f       	andi	r22, 0xF0	; 240
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_SetUpperHalfPortValue>
//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (data & 0xF0)>>4);
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     5b4:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     5b8:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     5bc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     5c0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     5c4:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     5c8:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     5cc:	6d eb       	ldi	r22, 0xBD	; 189
     5ce:	77 e3       	ldi	r23, 0x37	; 55
     5d0:	86 e8       	ldi	r24, 0x86	; 134
     5d2:	95 e3       	ldi	r25, 0x35	; 53
     5d4:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	63 e0       	ldi	r22, 0x03	; 3
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     5e2:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     5e6:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     5ea:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     5ee:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     5f2:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     5f6:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     5fa:	6d eb       	ldi	r22, 0xBD	; 189
     5fc:	77 e3       	ldi	r23, 0x37	; 55
     5fe:	86 e8       	ldi	r24, 0x86	; 134
     600:	95 e3       	ldi	r25, 0x35	; 53
     602:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
//	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, HIGH);
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	83 e0       	ldi	r24, 0x03	; 3
     60c:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Tpw - Tdws = 190ns */
	Timer_Delay(0.000001, timer0_config1);
     610:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     614:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     618:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     61c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     620:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     624:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     628:	6d eb       	ldi	r22, 0xBD	; 189
     62a:	77 e3       	ldi	r23, 0x37	; 55
     62c:	86 e8       	ldi	r24, 0x86	; 134
     62e:	95 e3       	ldi	r25, 0x35	; 53
     630:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
	DIO_SetUpperHalfPortValue(LCD_DATA_PORT, ((data & 0x0F) << 4));
     634:	80 e1       	ldi	r24, 0x10	; 16
     636:	c8 9f       	mul	r28, r24
     638:	b0 01       	movw	r22, r0
     63a:	11 24       	eor	r1, r1
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	0e 94 69 05 	call	0xad2	; 0xad2 <DIO_SetUpperHalfPortValue>
	//LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
	DIO_SetLowerHalfPortValue(LCD_DATA_PORT, (data & 0x0F));
#endif

	//delay_us(1); /* delay for processing Tdsw = 100ns */
	Timer_Delay(0.000001, timer0_config1);
     642:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     646:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     64a:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     64e:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     652:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     656:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     65a:	6d eb       	ldi	r22, 0xBD	; 189
     65c:	77 e3       	ldi	r23, 0x37	; 55
     65e:	86 e8       	ldi	r24, 0x86	; 134
     660:	95 e3       	ldi	r25, 0x35	; 53
     662:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	
	//CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
     670:	00 91 65 00 	lds	r16, 0x0065	; 0x800065 <timer0_config1>
     674:	10 91 66 00 	lds	r17, 0x0066	; 0x800066 <timer0_config1+0x1>
     678:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <timer0_config1+0x2>
     67c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <timer0_config1+0x3>
     680:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <timer0_config1+0x4>
     684:	50 91 6a 00 	lds	r21, 0x006A	; 0x80006a <timer0_config1+0x5>
     688:	6d eb       	ldi	r22, 0xBD	; 189
     68a:	77 e3       	ldi	r23, 0x37	; 55
     68c:	86 e8       	ldi	r24, 0x86	; 134
     68e:	95 e3       	ldi	r25, 0x35	; 53
     690:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_Delay>
	DIO_SetPinValue(LCD_CTRL_PORT, E, LOW);
	
	//delay_us(1); /* delay for processing Th = 13ns */
	Timer_Delay(0.000001, timer0_config1);
#endif
}
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <LCD_displayString>:

void LCD_displayString(uint8_t *Str)
{
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <LCD_displayString+0x12>
	{
		LCD_displayCharacter(Str[i]);
     6a8:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_displayCharacter>
		i++;
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
     6ae:	f8 01       	movw	r30, r16
     6b0:	ec 0f       	add	r30, r28
     6b2:	f1 1d       	adc	r31, r1
     6b4:	80 81       	ld	r24, Z
     6b6:	81 11       	cpse	r24, r1
     6b8:	f7 cf       	rjmp	.-18     	; 0x6a8 <LCD_displayString+0xc>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address = 0;

	/* first of all calculate the required address */
	switch(row)
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	39 f0       	breq	.+14     	; 0x6d4 <LCD_goToRowColumn+0x12>
     6c6:	58 f0       	brcs	.+22     	; 0x6de <LCD_goToRowColumn+0x1c>
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	31 f0       	breq	.+12     	; 0x6d8 <LCD_goToRowColumn+0x16>
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	31 f0       	breq	.+12     	; 0x6dc <LCD_goToRowColumn+0x1a>
	*********************************************************/
}

void LCD_goToRowColumn(uint8_t row,uint8_t col)
	{
	uint8_t Address = 0;
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <LCD_goToRowColumn+0x1c>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
     6d4:	60 5c       	subi	r22, 0xC0	; 192
				break;
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <LCD_goToRowColumn+0x1c>
		case 2:
				Address=col+0x10;
     6d8:	60 5f       	subi	r22, 0xF0	; 240
				break;
     6da:	01 c0       	rjmp	.+2      	; 0x6de <LCD_goToRowColumn+0x1c>
		case 3:
				Address=col+0x50;
     6dc:	60 5b       	subi	r22, 0xB0	; 176
				break;
			
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
     6de:	86 2f       	mov	r24, r22
     6e0:	80 68       	ori	r24, 0x80	; 128
     6e2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
     6e6:	08 95       	ret

000006e8 <LCD_displayStringRowColumn>:
}

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,uint8_t *Str)
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
     6ee:	0e 94 61 03 	call	0x6c2	; 0x6c2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
     6f2:	ce 01       	movw	r24, r28
     6f4:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_displayString>
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <LCD_clearScreen>:
   LCD_displayString(buff);
}

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_sendCommand>
     704:	08 95       	ret

00000706 <Lm35_init>:
 */ 

#include "LM35.h"
void Lm35_init(EN_SensorID_t SensorID)
{
	ADC_Init(AutoTrig_FreeRun, ADC_Div_128, ADC_Polling, _2_56V_VoltREF); // initialize ADC
     706:	20 ec       	ldi	r18, 0xC0	; 192
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	67 e0       	ldi	r22, 0x07	; 7
     70c:	80 e2       	ldi	r24, 0x20	; 32
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 21 04 	call	0x842	; 0x842 <ADC_Init>
     714:	08 95       	ret

00000716 <Lm35_GetTemp>:
}
uint8_t Lm35_GetTemp(EN_SensorID_t SensorID)
{
	return ADC_GetReading(SensorID); // get the converted reading from ADC data register
     716:	0e 94 35 04 	call	0x86a	; 0x86a <ADC_GetReading>
}
     71a:	08 95       	ret

0000071c <Motor_init>:
 * Expected OUTPUT: Setting Pins of PWM and Direction as output.
					Initializing PWM.
 */

void Motor_init(ST_MOTORconfig_t config)
{
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	00 d0       	rcall	.+0      	; 0x724 <Motor_init+0x8>
     724:	00 d0       	rcall	.+0      	; 0x726 <Motor_init+0xa>
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	49 83       	std	Y+1, r20	; 0x01
     72e:	5a 83       	std	Y+2, r21	; 0x02
     730:	6b 83       	std	Y+3, r22	; 0x03
     732:	7c 83       	std	Y+4, r23	; 0x04
	if(config.PWM_ID == PWM1)
     734:	18 2f       	mov	r17, r24
     736:	81 11       	cpse	r24, r1
     738:	06 c0       	rjmp	.+12     	; 0x746 <Motor_init+0x2a>
		pwm_init(PWM1,NON_INVERTING_MODE,PRESCALAR);
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 b3 05 	call	0xb66	; 0xb66 <pwm_init>
		
	if(config.PWM_ID == PWM2)
     746:	11 30       	cpi	r17, 0x01	; 1
     748:	31 f4       	brne	.+12     	; 0x756 <Motor_init+0x3a>
		pwm_init(PWM2,NON_INVERTING_MODE,PRESCALAR);
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 b3 05 	call	0xb66	; 0xb66 <pwm_init>
			
	if (config.DIR1_PIN <= 7 && config.DIR2_PIN <= 7 ){
     756:	6a 81       	ldd	r22, Y+2	; 0x02
     758:	68 30       	cpi	r22, 0x08	; 8
     75a:	60 f4       	brcc	.+24     	; 0x774 <Motor_init+0x58>
     75c:	1c 81       	ldd	r17, Y+4	; 0x04
     75e:	18 30       	cpi	r17, 0x08	; 8
     760:	48 f4       	brcc	.+18     	; 0x774 <Motor_init+0x58>
		DIO_SetPinDirection(config.DIR1_PORT,config.DIR1_PIN,OUTPUT);
     762:	41 e0       	ldi	r20, 0x01	; 1
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>
		DIO_SetPinDirection(config.DIR2_PORT,config.DIR2_PIN,OUTPUT);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	61 2f       	mov	r22, r17
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	0e 94 43 04 	call	0x886	; 0x886 <DIO_SetPinDirection>

	}

	
}
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	08 95       	ret

00000786 <Motor_moveForward>:
 *	Inputs ST_MOTORconfig_t motor ID config , uint8_t speed percentage from 0 to 100
 *	void return. 
 *	Expected output: Motor rotate clockwise if inputs are valid 
 */
void Motor_moveForward(ST_MOTORconfig_t config,uint8_t speed)
{
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	00 d0       	rcall	.+0      	; 0x78e <Motor_moveForward+0x8>
     78e:	00 d0       	rcall	.+0      	; 0x790 <Motor_moveForward+0xa>
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	94 2f       	mov	r25, r20
     798:	6b 83       	std	Y+3, r22	; 0x03
     79a:	7c 83       	std	Y+4, r23	; 0x04
     79c:	8d 83       	std	Y+5, r24	; 0x05
     79e:	12 2f       	mov	r17, r18
	DIO_SetPinValue(config.DIR1_PORT,config.DIR1_PIN,MOTOR_LOW);
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	65 2f       	mov	r22, r21
     7a4:	89 2f       	mov	r24, r25
     7a6:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>
	DIO_SetPinValue(config.DIR2_PORT,config.DIR2_PIN,MOTOR_HIGH);
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	6c 81       	ldd	r22, Y+4	; 0x04
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	0e 94 b8 04 	call	0x970	; 0x970 <DIO_SetPinValue>

	if (speed>=0 && speed <=100)
     7b4:	15 36       	cpi	r17, 0x65	; 101
     7b6:	20 f4       	brcc	.+8      	; 0x7c0 <Motor_moveForward+0x3a>
		pwm_SetSpeed(config.PWM_ID,speed);
     7b8:	61 2f       	mov	r22, r17
     7ba:	8d 81       	ldd	r24, Y+5	; 0x05
     7bc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pwm_SetSpeed>
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	08 95       	ret

000007d2 <set_stopWatch>:
 */ 
#include "stopwatch.h"
ST_TIMER_config_t StopWatchConfig = {TIMER1, FREQ_1_MHZ, CTC_MODE}; // configure timer

void set_stopWatch(float delay, void (*function)(void), uint8_t repeating_number)
{
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	cf 92       	push	r12
     7dc:	df 92       	push	r13
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	4b 01       	movw	r8, r22
     7ec:	5c 01       	movw	r10, r24
     7ee:	6a 01       	movw	r12, r20
     7f0:	d2 2f       	mov	r29, r18
	for(uint8_t iterator=0; iterator < repeating_number; iterator++)
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	{
		Timer_Schedule_Fun(delay, StopWatchConfig, function); // set desired delay and callback function
     7f6:	76 01       	movw	r14, r12
     7f8:	00 91 6b 00 	lds	r16, 0x006B	; 0x80006b <StopWatchConfig>
     7fc:	10 91 6c 00 	lds	r17, 0x006C	; 0x80006c <StopWatchConfig+0x1>
     800:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <StopWatchConfig+0x2>
     804:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <StopWatchConfig+0x3>
     808:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <StopWatchConfig+0x4>
     80c:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <StopWatchConfig+0x5>
     810:	c5 01       	movw	r24, r10
     812:	b4 01       	movw	r22, r8
     814:	0e 94 3d 08 	call	0x107a	; 0x107a <Timer_Schedule_Fun>
#include "stopwatch.h"
ST_TIMER_config_t StopWatchConfig = {TIMER1, FREQ_1_MHZ, CTC_MODE}; // configure timer

void set_stopWatch(float delay, void (*function)(void), uint8_t repeating_number)
{
	for(uint8_t iterator=0; iterator < repeating_number; iterator++)
     818:	cf 5f       	subi	r28, 0xFF	; 255
     81a:	cd 17       	cp	r28, r29
     81c:	60 f3       	brcs	.-40     	; 0x7f6 <set_stopWatch+0x24>
	{
		Timer_Schedule_Fun(delay, StopWatchConfig, function); // set desired delay and callback function
	}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	08 95       	ret

00000838 <main>:
#include "APP/App.h"


int main(void)
{
	App_Init();
     838:	0e 94 60 00 	call	0xc0	; 0xc0 <App_Init>
    /* Replace with your application code */
    while (1) 
    {
		app();
     83c:	0e 94 2a 01 	call	0x254	; 0x254 <app>
     840:	fd cf       	rjmp	.-6      	; 0x83c <main+0x4>

00000842 <ADC_Init>:
 */
void ADC_Init(ADC_Mode Mode, ADC_Prescale Prescaler, ADC_ConvCompleteCheck int_or_pol,
               ADC_VoltRef ref_volt)
{
	// reset registers
	ADMUX  = 0x00;
     842:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
     844:	16 b8       	out	0x06, r1	; 6
    // set ADEN in ADCSRA (ADC Enable)
    SET_BIT(ADCSRA,7);
     846:	36 b1       	in	r19, 0x06	; 6
     848:	30 68       	ori	r19, 0x80	; 128
     84a:	36 b9       	out	0x06, r19	; 6
	// enable channel & define the refrence voltage
	ADMUX |= ref_volt;  //0b11000010
     84c:	37 b1       	in	r19, 0x07	; 7
     84e:	23 2b       	or	r18, r19
     850:	27 b9       	out	0x07, r18	; 7
	// set preescaler & trigger mode & int_or_polling
	ADCSRA |=  (Prescaler | Mode | int_or_pol); //0b00011011;
     852:	26 b1       	in	r18, 0x06	; 6
     854:	86 2b       	or	r24, r22
     856:	48 2b       	or	r20, r24
     858:	24 2b       	or	r18, r20
     85a:	26 b9       	out	0x06, r18	; 6
	// clear SFIOR (last 4 bits)
	SFIOR &= ~(0xE0);
     85c:	80 b7       	in	r24, 0x30	; 48
     85e:	8f 71       	andi	r24, 0x1F	; 31
     860:	80 bf       	out	0x30, r24	; 48
	// set auto-trigger mode
	SFIOR |= (Mode>>8);
     862:	80 b7       	in	r24, 0x30	; 48
     864:	98 2b       	or	r25, r24
     866:	90 bf       	out	0x30, r25	; 48
     868:	08 95       	ret

0000086a <ADC_GetReading>:
 * Ex: uint16_t result = Adc_getReading(ADC3_Channel);
 */
uint16_t ADC_GetReading(ADC_Ch_Select channel)
{
	// select ADC channel
	ADMUX |=  channel;
     86a:	97 b1       	in	r25, 0x07	; 7
     86c:	89 2b       	or	r24, r25
     86e:	87 b9       	out	0x07, r24	; 7
	// set ADSC in ADCSRA ADC (start conversion)
	SET_BIT(ADCSRA,6);
     870:	86 b1       	in	r24, 0x06	; 6
     872:	80 64       	ori	r24, 0x40	; 64
     874:	86 b9       	out	0x06, r24	; 6
	// wait until flag is set (conversion completed)
	while(!GET_BIT(ADCSRA,4));
     876:	34 9b       	sbis	0x06, 4	; 6
     878:	fe cf       	rjmp	.-4      	; 0x876 <ADC_GetReading+0xc>
	// clear the flag
	SET_BIT(ADCSRA,4);
     87a:	86 b1       	in	r24, 0x06	; 6
     87c:	80 61       	ori	r24, 0x10	; 16
     87e:	86 b9       	out	0x06, r24	; 6
	uint16_t reading = ADC_DATA;
     880:	84 b1       	in	r24, 0x04	; 4
     882:	95 b1       	in	r25, 0x05	; 5
	
	return reading;
}
     884:	08 95       	ret

00000886 <DIO_SetPinDirection>:
		case portC :
		PORTC_REG = (PORTC_REG & 0xF0) | Value ;
		break;
		
		case portD :
		PORTD_REG = (PORTD_REG & 0xF0) |  Value  ;
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	11 f1       	breq	.+68     	; 0x8ce <DIO_SetPinDirection+0x48>
     88a:	30 f0       	brcs	.+12     	; 0x898 <DIO_SetPinDirection+0x12>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	d1 f1       	breq	.+116    	; 0x904 <DIO_SetPinDirection+0x7e>
     890:	83 30       	cpi	r24, 0x03	; 3
     892:	09 f4       	brne	.+2      	; 0x896 <DIO_SetPinDirection+0x10>
     894:	52 c0       	rjmp	.+164    	; 0x93a <DIO_SetPinDirection+0xb4>
     896:	08 95       	ret
     898:	41 30       	cpi	r20, 0x01	; 1
     89a:	59 f4       	brne	.+22     	; 0x8b2 <DIO_SetPinDirection+0x2c>
     89c:	2a b3       	in	r18, 0x1a	; 26
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <DIO_SetPinDirection+0x22>
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	6a 95       	dec	r22
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <DIO_SetPinDirection+0x1e>
     8ac:	82 2b       	or	r24, r18
     8ae:	8a bb       	out	0x1a, r24	; 26
     8b0:	08 95       	ret
     8b2:	41 11       	cpse	r20, r1
     8b4:	5c c0       	rjmp	.+184    	; 0x96e <DIO_SetPinDirection+0xe8>
     8b6:	2a b3       	in	r18, 0x1a	; 26
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <DIO_SetPinDirection+0x3c>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	6a 95       	dec	r22
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <DIO_SetPinDirection+0x38>
     8c6:	80 95       	com	r24
     8c8:	82 23       	and	r24, r18
     8ca:	8a bb       	out	0x1a, r24	; 26
     8cc:	08 95       	ret
     8ce:	41 30       	cpi	r20, 0x01	; 1
     8d0:	59 f4       	brne	.+22     	; 0x8e8 <DIO_SetPinDirection+0x62>
     8d2:	27 b3       	in	r18, 0x17	; 23
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <DIO_SetPinDirection+0x58>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	6a 95       	dec	r22
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <DIO_SetPinDirection+0x54>
     8e2:	82 2b       	or	r24, r18
     8e4:	87 bb       	out	0x17, r24	; 23
     8e6:	08 95       	ret
     8e8:	41 11       	cpse	r20, r1
     8ea:	41 c0       	rjmp	.+130    	; 0x96e <DIO_SetPinDirection+0xe8>
     8ec:	27 b3       	in	r18, 0x17	; 23
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <DIO_SetPinDirection+0x72>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	6a 95       	dec	r22
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <DIO_SetPinDirection+0x6e>
     8fc:	80 95       	com	r24
     8fe:	82 23       	and	r24, r18
     900:	87 bb       	out	0x17, r24	; 23
     902:	08 95       	ret
     904:	41 30       	cpi	r20, 0x01	; 1
     906:	59 f4       	brne	.+22     	; 0x91e <DIO_SetPinDirection+0x98>
     908:	24 b3       	in	r18, 0x14	; 20
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_SetPinDirection+0x8e>
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	6a 95       	dec	r22
     916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_SetPinDirection+0x8a>
     918:	82 2b       	or	r24, r18
     91a:	84 bb       	out	0x14, r24	; 20
     91c:	08 95       	ret
     91e:	41 11       	cpse	r20, r1
     920:	26 c0       	rjmp	.+76     	; 0x96e <DIO_SetPinDirection+0xe8>
     922:	24 b3       	in	r18, 0x14	; 20
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <DIO_SetPinDirection+0xa8>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	6a 95       	dec	r22
     930:	e2 f7       	brpl	.-8      	; 0x92a <DIO_SetPinDirection+0xa4>
     932:	80 95       	com	r24
     934:	82 23       	and	r24, r18
     936:	84 bb       	out	0x14, r24	; 20
     938:	08 95       	ret
     93a:	41 30       	cpi	r20, 0x01	; 1
     93c:	59 f4       	brne	.+22     	; 0x954 <DIO_SetPinDirection+0xce>
     93e:	21 b3       	in	r18, 0x11	; 17
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_SetPinDirection+0xc4>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	6a 95       	dec	r22
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_SetPinDirection+0xc0>
     94e:	82 2b       	or	r24, r18
     950:	81 bb       	out	0x11, r24	; 17
     952:	08 95       	ret
     954:	41 11       	cpse	r20, r1
     956:	0b c0       	rjmp	.+22     	; 0x96e <DIO_SetPinDirection+0xe8>
     958:	21 b3       	in	r18, 0x11	; 17
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_SetPinDirection+0xde>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	6a 95       	dec	r22
     966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_SetPinDirection+0xda>
     968:	80 95       	com	r24
     96a:	82 23       	and	r24, r18
     96c:	81 bb       	out	0x11, r24	; 17
     96e:	08 95       	ret

00000970 <DIO_SetPinValue>:
     970:	81 30       	cpi	r24, 0x01	; 1
     972:	11 f1       	breq	.+68     	; 0x9b8 <DIO_SetPinValue+0x48>
     974:	30 f0       	brcs	.+12     	; 0x982 <DIO_SetPinValue+0x12>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	d1 f1       	breq	.+116    	; 0x9ee <DIO_SetPinValue+0x7e>
     97a:	83 30       	cpi	r24, 0x03	; 3
     97c:	09 f4       	brne	.+2      	; 0x980 <DIO_SetPinValue+0x10>
     97e:	52 c0       	rjmp	.+164    	; 0xa24 <DIO_SetPinValue+0xb4>
     980:	08 95       	ret
     982:	41 30       	cpi	r20, 0x01	; 1
     984:	59 f4       	brne	.+22     	; 0x99c <DIO_SetPinValue+0x2c>
     986:	2b b3       	in	r18, 0x1b	; 27
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_SetPinValue+0x22>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	6a 95       	dec	r22
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_SetPinValue+0x1e>
     996:	82 2b       	or	r24, r18
     998:	8b bb       	out	0x1b, r24	; 27
     99a:	08 95       	ret
     99c:	41 11       	cpse	r20, r1
     99e:	5c c0       	rjmp	.+184    	; 0xa58 <DIO_SetPinValue+0xe8>
     9a0:	2b b3       	in	r18, 0x1b	; 27
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <DIO_SetPinValue+0x3c>
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	6a 95       	dec	r22
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <DIO_SetPinValue+0x38>
     9b0:	80 95       	com	r24
     9b2:	82 23       	and	r24, r18
     9b4:	8b bb       	out	0x1b, r24	; 27
     9b6:	08 95       	ret
     9b8:	41 30       	cpi	r20, 0x01	; 1
     9ba:	59 f4       	brne	.+22     	; 0x9d2 <DIO_SetPinValue+0x62>
     9bc:	28 b3       	in	r18, 0x18	; 24
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_SetPinValue+0x58>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	6a 95       	dec	r22
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_SetPinValue+0x54>
     9cc:	82 2b       	or	r24, r18
     9ce:	88 bb       	out	0x18, r24	; 24
     9d0:	08 95       	ret
     9d2:	41 11       	cpse	r20, r1
     9d4:	41 c0       	rjmp	.+130    	; 0xa58 <DIO_SetPinValue+0xe8>
     9d6:	28 b3       	in	r18, 0x18	; 24
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_SetPinValue+0x72>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	6a 95       	dec	r22
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_SetPinValue+0x6e>
     9e6:	80 95       	com	r24
     9e8:	82 23       	and	r24, r18
     9ea:	88 bb       	out	0x18, r24	; 24
     9ec:	08 95       	ret
     9ee:	41 30       	cpi	r20, 0x01	; 1
     9f0:	59 f4       	brne	.+22     	; 0xa08 <DIO_SetPinValue+0x98>
     9f2:	25 b3       	in	r18, 0x15	; 21
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_SetPinValue+0x8e>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	6a 95       	dec	r22
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_SetPinValue+0x8a>
     a02:	82 2b       	or	r24, r18
     a04:	85 bb       	out	0x15, r24	; 21
     a06:	08 95       	ret
     a08:	41 11       	cpse	r20, r1
     a0a:	26 c0       	rjmp	.+76     	; 0xa58 <DIO_SetPinValue+0xe8>
     a0c:	25 b3       	in	r18, 0x15	; 21
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_SetPinValue+0xa8>
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	6a 95       	dec	r22
     a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_SetPinValue+0xa4>
     a1c:	80 95       	com	r24
     a1e:	82 23       	and	r24, r18
     a20:	85 bb       	out	0x15, r24	; 21
     a22:	08 95       	ret
     a24:	41 30       	cpi	r20, 0x01	; 1
     a26:	59 f4       	brne	.+22     	; 0xa3e <DIO_SetPinValue+0xce>
     a28:	22 b3       	in	r18, 0x12	; 18
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_SetPinValue+0xc4>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	6a 95       	dec	r22
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_SetPinValue+0xc0>
     a38:	82 2b       	or	r24, r18
     a3a:	82 bb       	out	0x12, r24	; 18
     a3c:	08 95       	ret
     a3e:	41 11       	cpse	r20, r1
     a40:	0b c0       	rjmp	.+22     	; 0xa58 <DIO_SetPinValue+0xe8>
     a42:	22 b3       	in	r18, 0x12	; 18
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_SetPinValue+0xde>
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	6a 95       	dec	r22
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_SetPinValue+0xda>
     a52:	80 95       	com	r24
     a54:	82 23       	and	r24, r18
     a56:	82 bb       	out	0x12, r24	; 18
     a58:	08 95       	ret

00000a5a <DIO_SetPortDirection>:
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	79 f0       	breq	.+30     	; 0xa7c <DIO_SetPortDirection+0x22>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <DIO_SetPortDirection+0x10>
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	a9 f0       	breq	.+42     	; 0xa8e <DIO_SetPortDirection+0x34>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	e1 f0       	breq	.+56     	; 0xaa0 <DIO_SetPortDirection+0x46>
     a68:	08 95       	ret
     a6a:	61 30       	cpi	r22, 0x01	; 1
     a6c:	19 f4       	brne	.+6      	; 0xa74 <DIO_SetPortDirection+0x1a>
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	8a bb       	out	0x1a, r24	; 26
     a72:	08 95       	ret
     a74:	61 11       	cpse	r22, r1
     a76:	1c c0       	rjmp	.+56     	; 0xab0 <DIO_SetPortDirection+0x56>
     a78:	1a ba       	out	0x1a, r1	; 26
     a7a:	08 95       	ret
     a7c:	61 30       	cpi	r22, 0x01	; 1
     a7e:	19 f4       	brne	.+6      	; 0xa86 <DIO_SetPortDirection+0x2c>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	87 bb       	out	0x17, r24	; 23
     a84:	08 95       	ret
     a86:	61 11       	cpse	r22, r1
     a88:	13 c0       	rjmp	.+38     	; 0xab0 <DIO_SetPortDirection+0x56>
     a8a:	17 ba       	out	0x17, r1	; 23
     a8c:	08 95       	ret
     a8e:	61 30       	cpi	r22, 0x01	; 1
     a90:	19 f4       	brne	.+6      	; 0xa98 <DIO_SetPortDirection+0x3e>
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	84 bb       	out	0x14, r24	; 20
     a96:	08 95       	ret
     a98:	61 11       	cpse	r22, r1
     a9a:	0a c0       	rjmp	.+20     	; 0xab0 <DIO_SetPortDirection+0x56>
     a9c:	14 ba       	out	0x14, r1	; 20
     a9e:	08 95       	ret
     aa0:	61 30       	cpi	r22, 0x01	; 1
     aa2:	19 f4       	brne	.+6      	; 0xaaa <DIO_SetPortDirection+0x50>
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	81 bb       	out	0x11, r24	; 17
     aa8:	08 95       	ret
     aaa:	61 11       	cpse	r22, r1
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <DIO_SetPortDirection+0x56>
     aae:	11 ba       	out	0x11, r1	; 17
     ab0:	08 95       	ret

00000ab2 <DIO_SetPortValue>:
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	41 f0       	breq	.+16     	; 0xac6 <DIO_SetPortValue+0x14>
     ab6:	28 f0       	brcs	.+10     	; 0xac2 <DIO_SetPortValue+0x10>
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	39 f0       	breq	.+14     	; 0xaca <DIO_SetPortValue+0x18>
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	39 f0       	breq	.+14     	; 0xace <DIO_SetPortValue+0x1c>
     ac0:	08 95       	ret
     ac2:	6b bb       	out	0x1b, r22	; 27
     ac4:	08 95       	ret
     ac6:	68 bb       	out	0x18, r22	; 24
     ac8:	08 95       	ret
     aca:	65 bb       	out	0x15, r22	; 21
     acc:	08 95       	ret
     ace:	62 bb       	out	0x12, r22	; 18
     ad0:	08 95       	ret

00000ad2 <DIO_SetUpperHalfPortValue>:
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	59 f0       	breq	.+22     	; 0xaec <DIO_SetUpperHalfPortValue+0x1a>
     ad6:	28 f0       	brcs	.+10     	; 0xae2 <DIO_SetUpperHalfPortValue+0x10>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	69 f0       	breq	.+26     	; 0xaf6 <DIO_SetUpperHalfPortValue+0x24>
     adc:	83 30       	cpi	r24, 0x03	; 3
     ade:	81 f0       	breq	.+32     	; 0xb00 <DIO_SetUpperHalfPortValue+0x2e>
     ae0:	08 95       	ret
     ae2:	8b b3       	in	r24, 0x1b	; 27
     ae4:	8f 70       	andi	r24, 0x0F	; 15
     ae6:	68 2b       	or	r22, r24
     ae8:	6b bb       	out	0x1b, r22	; 27
     aea:	08 95       	ret
     aec:	88 b3       	in	r24, 0x18	; 24
     aee:	8f 70       	andi	r24, 0x0F	; 15
     af0:	68 2b       	or	r22, r24
     af2:	68 bb       	out	0x18, r22	; 24
     af4:	08 95       	ret
     af6:	85 b3       	in	r24, 0x15	; 21
     af8:	8f 70       	andi	r24, 0x0F	; 15
     afa:	68 2b       	or	r22, r24
     afc:	65 bb       	out	0x15, r22	; 21
     afe:	08 95       	ret
     b00:	82 b3       	in	r24, 0x12	; 18
     b02:	8f 70       	andi	r24, 0x0F	; 15
     b04:	68 2b       	or	r22, r24
     b06:	62 bb       	out	0x12, r22	; 18
     b08:	08 95       	ret

00000b0a <DIO_GetPinValue>:
}


uint8_t DIO_GetPinValue (uint8_t PortNumber , uint8_t PinNumber) {
	uint8_t value = 0 ; 
	switch (PortNumber) {
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	79 f0       	breq	.+30     	; 0xb2c <DIO_GetPinValue+0x22>
     b0e:	28 f0       	brcs	.+10     	; 0xb1a <DIO_GetPinValue+0x10>
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	a9 f0       	breq	.+42     	; 0xb3e <DIO_GetPinValue+0x34>
     b14:	83 30       	cpi	r24, 0x03	; 3
     b16:	e1 f0       	breq	.+56     	; 0xb50 <DIO_GetPinValue+0x46>
     b18:	24 c0       	rjmp	.+72     	; 0xb62 <DIO_GetPinValue+0x58>
		case portA : 
			value = (PINA_REG >> PinNumber) & 0x01 ; 	
     b1a:	89 b3       	in	r24, 0x19	; 25
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <DIO_GetPinValue+0x1a>
     b20:	95 95       	asr	r25
     b22:	87 95       	ror	r24
     b24:	6a 95       	dec	r22
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <DIO_GetPinValue+0x16>
     b28:	81 70       	andi	r24, 0x01	; 1
		break;
     b2a:	08 95       	ret
		
		case portB :
			value = (PINB_REG >> PinNumber) & 0x01 ;
     b2c:	86 b3       	in	r24, 0x16	; 22
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_GetPinValue+0x2c>
     b32:	95 95       	asr	r25
     b34:	87 95       	ror	r24
     b36:	6a 95       	dec	r22
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <DIO_GetPinValue+0x28>
     b3a:	81 70       	andi	r24, 0x01	; 1
		break;
     b3c:	08 95       	ret
		
		case portC :
			value = (PINC_REG >> PinNumber) & 0x01 ;
     b3e:	83 b3       	in	r24, 0x13	; 19
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <DIO_GetPinValue+0x3e>
     b44:	95 95       	asr	r25
     b46:	87 95       	ror	r24
     b48:	6a 95       	dec	r22
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <DIO_GetPinValue+0x3a>
     b4c:	81 70       	andi	r24, 0x01	; 1
		break;
     b4e:	08 95       	ret

		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
     b50:	80 b3       	in	r24, 0x10	; 16
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	02 c0       	rjmp	.+4      	; 0xb5a <DIO_GetPinValue+0x50>
     b56:	95 95       	asr	r25
     b58:	87 95       	ror	r24
     b5a:	6a 95       	dec	r22
     b5c:	e2 f7       	brpl	.-8      	; 0xb56 <DIO_GetPinValue+0x4c>
     b5e:	81 70       	andi	r24, 0x01	; 1
		break;
     b60:	08 95       	ret
	}
}


uint8_t DIO_GetPinValue (uint8_t PortNumber , uint8_t PinNumber) {
	uint8_t value = 0 ; 
     b62:	80 e0       	ldi	r24, 0x00	; 0
		case portD :
			value = (PIND_REG >> PinNumber) & 0x01 ;
		break;
	}
	return value ; 
}
     b64:	08 95       	ret

00000b66 <pwm_init>:
pwm mode	>> NON_INVERTING_MODE , INVERTING_MODE
prescalar	>> 0 , 8 , 64 , 256 , 1024
*/

void pwm_init (uint8_t ID , uint8_t mode , uint16_t prescalar) {
	if (ID == PWM1) {
     b66:	81 11       	cpse	r24, r1
     b68:	56 c0       	rjmp	.+172    	; 0xc16 <pwm_init+0xb0>
		portb_DIR |= (1<<3) ;
     b6a:	87 b3       	in	r24, 0x17	; 23
     b6c:	88 60       	ori	r24, 0x08	; 8
     b6e:	87 bb       	out	0x17, r24	; 23
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
     b70:	61 11       	cpse	r22, r1
     b72:	27 c0       	rjmp	.+78     	; 0xbc2 <pwm_init+0x5c>
			switch (prescalar) {
     b74:	40 34       	cpi	r20, 0x40	; 64
     b76:	51 05       	cpc	r21, r1
     b78:	c1 f0       	breq	.+48     	; 0xbaa <pwm_init+0x44>
     b7a:	38 f4       	brcc	.+14     	; 0xb8a <pwm_init+0x24>
     b7c:	41 15       	cp	r20, r1
     b7e:	51 05       	cpc	r21, r1
     b80:	61 f0       	breq	.+24     	; 0xb9a <pwm_init+0x34>
     b82:	48 30       	cpi	r20, 0x08	; 8
     b84:	51 05       	cpc	r21, r1
     b86:	69 f0       	breq	.+26     	; 0xba2 <pwm_init+0x3c>
     b88:	08 95       	ret
     b8a:	41 15       	cp	r20, r1
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	58 07       	cpc	r21, r24
     b90:	81 f0       	breq	.+32     	; 0xbb2 <pwm_init+0x4c>
     b92:	41 15       	cp	r20, r1
     b94:	54 40       	sbci	r21, 0x04	; 4
     b96:	89 f0       	breq	.+34     	; 0xbba <pwm_init+0x54>
     b98:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x69 ;
     b9a:	83 b7       	in	r24, 0x33	; 51
     b9c:	89 66       	ori	r24, 0x69	; 105
     b9e:	83 bf       	out	0x33, r24	; 51
					break ;
     ba0:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x6A ;
     ba2:	83 b7       	in	r24, 0x33	; 51
     ba4:	8a 66       	ori	r24, 0x6A	; 106
     ba6:	83 bf       	out	0x33, r24	; 51
					break ;
     ba8:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x6B ;
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	8b 66       	ori	r24, 0x6B	; 107
     bae:	83 bf       	out	0x33, r24	; 51
					break ;
     bb0:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x6C ;
     bb2:	83 b7       	in	r24, 0x33	; 51
     bb4:	8c 66       	ori	r24, 0x6C	; 108
     bb6:	83 bf       	out	0x33, r24	; 51
					break ;
     bb8:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x6D ;
     bba:	83 b7       	in	r24, 0x33	; 51
     bbc:	8d 66       	ori	r24, 0x6D	; 109
     bbe:	83 bf       	out	0x33, r24	; 51
					break ;
     bc0:	08 95       	ret
				}
			}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
     bc2:	61 30       	cpi	r22, 0x01	; 1
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <pwm_init+0x62>
     bc6:	7e c0       	rjmp	.+252    	; 0xcc4 <pwm_init+0x15e>
			switch (prescalar) {
     bc8:	40 34       	cpi	r20, 0x40	; 64
     bca:	51 05       	cpc	r21, r1
     bcc:	c1 f0       	breq	.+48     	; 0xbfe <pwm_init+0x98>
     bce:	38 f4       	brcc	.+14     	; 0xbde <pwm_init+0x78>
     bd0:	41 15       	cp	r20, r1
     bd2:	51 05       	cpc	r21, r1
     bd4:	61 f0       	breq	.+24     	; 0xbee <pwm_init+0x88>
     bd6:	48 30       	cpi	r20, 0x08	; 8
     bd8:	51 05       	cpc	r21, r1
     bda:	69 f0       	breq	.+26     	; 0xbf6 <pwm_init+0x90>
     bdc:	08 95       	ret
     bde:	41 15       	cp	r20, r1
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	58 07       	cpc	r21, r24
     be4:	81 f0       	breq	.+32     	; 0xc06 <pwm_init+0xa0>
     be6:	41 15       	cp	r20, r1
     be8:	54 40       	sbci	r21, 0x04	; 4
     bea:	89 f0       	breq	.+34     	; 0xc0e <pwm_init+0xa8>
     bec:	08 95       	ret
				case 0 :
					T0_Control_REG |= 0x79 ;
     bee:	83 b7       	in	r24, 0x33	; 51
     bf0:	89 67       	ori	r24, 0x79	; 121
     bf2:	83 bf       	out	0x33, r24	; 51
					break ;
     bf4:	08 95       	ret
				case 8 :
					T0_Control_REG |= 0x7A ;
     bf6:	83 b7       	in	r24, 0x33	; 51
     bf8:	8a 67       	ori	r24, 0x7A	; 122
     bfa:	83 bf       	out	0x33, r24	; 51
					break ;
     bfc:	08 95       	ret
				case 64 :
					T0_Control_REG |= 0x7B ;
     bfe:	83 b7       	in	r24, 0x33	; 51
     c00:	8b 67       	ori	r24, 0x7B	; 123
     c02:	83 bf       	out	0x33, r24	; 51
					break ;
     c04:	08 95       	ret
				case 256 :
					T0_Control_REG |= 0x7C ;
     c06:	83 b7       	in	r24, 0x33	; 51
     c08:	8c 67       	ori	r24, 0x7C	; 124
     c0a:	83 bf       	out	0x33, r24	; 51
					break ;
     c0c:	08 95       	ret
				case 1024 :
					T0_Control_REG |= 0x7D ;
     c0e:	83 b7       	in	r24, 0x33	; 51
     c10:	8d 67       	ori	r24, 0x7D	; 125
     c12:	83 bf       	out	0x33, r24	; 51
					break ;
     c14:	08 95       	ret
				}
			}
	}
	else if (ID == PWM2) {
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	09 f0       	breq	.+2      	; 0xc1c <pwm_init+0xb6>
     c1a:	54 c0       	rjmp	.+168    	; 0xcc4 <pwm_init+0x15e>
		 portd_DIR |= ( 1<< 7 ) ;
     c1c:	81 b3       	in	r24, 0x11	; 17
     c1e:	80 68       	ori	r24, 0x80	; 128
     c20:	81 bb       	out	0x11, r24	; 17
		if (mode == NON_INVERTING_MODE) {		// fast pwm - non inverting mode
     c22:	61 11       	cpse	r22, r1
     c24:	27 c0       	rjmp	.+78     	; 0xc74 <pwm_init+0x10e>
			switch (prescalar) {
     c26:	40 34       	cpi	r20, 0x40	; 64
     c28:	51 05       	cpc	r21, r1
     c2a:	c1 f0       	breq	.+48     	; 0xc5c <pwm_init+0xf6>
     c2c:	38 f4       	brcc	.+14     	; 0xc3c <pwm_init+0xd6>
     c2e:	41 15       	cp	r20, r1
     c30:	51 05       	cpc	r21, r1
     c32:	61 f0       	breq	.+24     	; 0xc4c <pwm_init+0xe6>
     c34:	48 30       	cpi	r20, 0x08	; 8
     c36:	51 05       	cpc	r21, r1
     c38:	69 f0       	breq	.+26     	; 0xc54 <pwm_init+0xee>
     c3a:	08 95       	ret
     c3c:	41 15       	cp	r20, r1
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	58 07       	cpc	r21, r24
     c42:	81 f0       	breq	.+32     	; 0xc64 <pwm_init+0xfe>
     c44:	41 15       	cp	r20, r1
     c46:	54 40       	sbci	r21, 0x04	; 4
     c48:	89 f0       	breq	.+34     	; 0xc6c <pwm_init+0x106>
     c4a:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x69 ;
     c4c:	85 b5       	in	r24, 0x25	; 37
     c4e:	89 66       	ori	r24, 0x69	; 105
     c50:	85 bd       	out	0x25, r24	; 37
					break ;
     c52:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x6A ;
     c54:	85 b5       	in	r24, 0x25	; 37
     c56:	8a 66       	ori	r24, 0x6A	; 106
     c58:	85 bd       	out	0x25, r24	; 37
					break ;
     c5a:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x6B ;
     c5c:	85 b5       	in	r24, 0x25	; 37
     c5e:	8b 66       	ori	r24, 0x6B	; 107
     c60:	85 bd       	out	0x25, r24	; 37
					break ;
     c62:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x6C ;
     c64:	85 b5       	in	r24, 0x25	; 37
     c66:	8c 66       	ori	r24, 0x6C	; 108
     c68:	85 bd       	out	0x25, r24	; 37
					break ;
     c6a:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x6D ;
     c6c:	85 b5       	in	r24, 0x25	; 37
     c6e:	8d 66       	ori	r24, 0x6D	; 109
     c70:	85 bd       	out	0x25, r24	; 37
					break ;
     c72:	08 95       	ret
			}
		}
		else if (mode == INVERTING_MODE) {		// fast pwm - inverting mode
     c74:	61 30       	cpi	r22, 0x01	; 1
     c76:	31 f5       	brne	.+76     	; 0xcc4 <pwm_init+0x15e>
			switch (prescalar) {
     c78:	40 34       	cpi	r20, 0x40	; 64
     c7a:	51 05       	cpc	r21, r1
     c7c:	c1 f0       	breq	.+48     	; 0xcae <pwm_init+0x148>
     c7e:	38 f4       	brcc	.+14     	; 0xc8e <pwm_init+0x128>
     c80:	41 15       	cp	r20, r1
     c82:	51 05       	cpc	r21, r1
     c84:	61 f0       	breq	.+24     	; 0xc9e <pwm_init+0x138>
     c86:	48 30       	cpi	r20, 0x08	; 8
     c88:	51 05       	cpc	r21, r1
     c8a:	69 f0       	breq	.+26     	; 0xca6 <pwm_init+0x140>
     c8c:	08 95       	ret
     c8e:	41 15       	cp	r20, r1
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	58 07       	cpc	r21, r24
     c94:	81 f0       	breq	.+32     	; 0xcb6 <pwm_init+0x150>
     c96:	41 15       	cp	r20, r1
     c98:	54 40       	sbci	r21, 0x04	; 4
     c9a:	89 f0       	breq	.+34     	; 0xcbe <pwm_init+0x158>
     c9c:	08 95       	ret
				case 0 :
					T2_Control_REG |= 0x79 ;
     c9e:	85 b5       	in	r24, 0x25	; 37
     ca0:	89 67       	ori	r24, 0x79	; 121
     ca2:	85 bd       	out	0x25, r24	; 37
					break ;
     ca4:	08 95       	ret
				case 8 :
					T2_Control_REG |= 0x7A ;
     ca6:	85 b5       	in	r24, 0x25	; 37
     ca8:	8a 67       	ori	r24, 0x7A	; 122
     caa:	85 bd       	out	0x25, r24	; 37
					break ;
     cac:	08 95       	ret
				case 64 :
					T2_Control_REG |= 0x7B ;
     cae:	85 b5       	in	r24, 0x25	; 37
     cb0:	8b 67       	ori	r24, 0x7B	; 123
     cb2:	85 bd       	out	0x25, r24	; 37
					break ;
     cb4:	08 95       	ret
				case 256 :
					T2_Control_REG |= 0x7C ;
     cb6:	85 b5       	in	r24, 0x25	; 37
     cb8:	8c 67       	ori	r24, 0x7C	; 124
     cba:	85 bd       	out	0x25, r24	; 37
					break ;
     cbc:	08 95       	ret
				case 1024 :
					T2_Control_REG |= 0x7D ;
     cbe:	85 b5       	in	r24, 0x25	; 37
     cc0:	8d 67       	ori	r24, 0x7D	; 125
     cc2:	85 bd       	out	0x25, r24	; 37
     cc4:	08 95       	ret

00000cc6 <pwm_SetSpeed>:
					break ;
			}
		}
	}
}
void pwm_SetSpeed (uint8_t ID ,uint8_t percentage) {
     cc6:	28 2f       	mov	r18, r24
	uint8_t duty_cycle = 255 * percentage / 100 ; 
     cc8:	3f ef       	ldi	r19, 0xFF	; 255
     cca:	63 9f       	mul	r22, r19
     ccc:	c0 01       	movw	r24, r0
     cce:	11 24       	eor	r1, r1
     cd0:	64 e6       	ldi	r22, 0x64	; 100
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__divmodhi4>
	if (ID == PWM1) {
     cd8:	21 11       	cpse	r18, r1
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <pwm_SetSpeed+0x1a>
		T0_OutCmp_REG = duty_cycle ; 
     cdc:	6c bf       	out	0x3c, r22	; 60
     cde:	08 95       	ret
	}
	else if (ID == PWM2) {
     ce0:	21 30       	cpi	r18, 0x01	; 1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <pwm_SetSpeed+0x20>
		T2_OutCmp_REG = duty_cycle ;
     ce4:	63 bd       	out	0x23, r22	; 35
     ce6:	08 95       	ret

00000ce8 <adjustPrescalarT0>:
void Timer_Stop(EN_TIMER_t timer){
	if (timer == TIMER1){
		TCCR1B =0x00;
	}
	else{
		REG(timer) = 0x00;
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	51 f4       	brne	.+20     	; 0xd02 <adjustPrescalarT0+0x1a>
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	83 bf       	out	0x33, r24	; 51
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	83 bf       	out	0x33, r24	; 51
     cfa:	83 b7       	in	r24, 0x33	; 51
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	83 bf       	out	0x33, r24	; 51
     d00:	08 95       	ret
     d02:	88 30       	cpi	r24, 0x08	; 8
     d04:	91 05       	cpc	r25, r1
     d06:	51 f4       	brne	.+20     	; 0xd1c <adjustPrescalarT0+0x34>
     d08:	83 b7       	in	r24, 0x33	; 51
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	83 bf       	out	0x33, r24	; 51
     d0e:	83 b7       	in	r24, 0x33	; 51
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	83 bf       	out	0x33, r24	; 51
     d14:	83 b7       	in	r24, 0x33	; 51
     d16:	8b 7f       	andi	r24, 0xFB	; 251
     d18:	83 bf       	out	0x33, r24	; 51
     d1a:	08 95       	ret
     d1c:	80 34       	cpi	r24, 0x40	; 64
     d1e:	91 05       	cpc	r25, r1
     d20:	51 f4       	brne	.+20     	; 0xd36 <adjustPrescalarT0+0x4e>
     d22:	83 b7       	in	r24, 0x33	; 51
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	83 bf       	out	0x33, r24	; 51
     d28:	83 b7       	in	r24, 0x33	; 51
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	83 bf       	out	0x33, r24	; 51
     d2e:	83 b7       	in	r24, 0x33	; 51
     d30:	8b 7f       	andi	r24, 0xFB	; 251
     d32:	83 bf       	out	0x33, r24	; 51
     d34:	08 95       	ret
     d36:	81 15       	cp	r24, r1
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	92 07       	cpc	r25, r18
     d3c:	51 f4       	brne	.+20     	; 0xd52 <adjustPrescalarT0+0x6a>
     d3e:	83 b7       	in	r24, 0x33	; 51
     d40:	8e 7f       	andi	r24, 0xFE	; 254
     d42:	83 bf       	out	0x33, r24	; 51
     d44:	83 b7       	in	r24, 0x33	; 51
     d46:	8d 7f       	andi	r24, 0xFD	; 253
     d48:	83 bf       	out	0x33, r24	; 51
     d4a:	83 b7       	in	r24, 0x33	; 51
     d4c:	84 60       	ori	r24, 0x04	; 4
     d4e:	83 bf       	out	0x33, r24	; 51
     d50:	08 95       	ret
     d52:	81 15       	cp	r24, r1
     d54:	94 40       	sbci	r25, 0x04	; 4
     d56:	49 f4       	brne	.+18     	; 0xd6a <adjustPrescalarT0+0x82>
     d58:	83 b7       	in	r24, 0x33	; 51
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	83 bf       	out	0x33, r24	; 51
     d5e:	83 b7       	in	r24, 0x33	; 51
     d60:	8d 7f       	andi	r24, 0xFD	; 253
     d62:	83 bf       	out	0x33, r24	; 51
     d64:	83 b7       	in	r24, 0x33	; 51
     d66:	84 60       	ori	r24, 0x04	; 4
     d68:	83 bf       	out	0x33, r24	; 51
     d6a:	08 95       	ret

00000d6c <adjustPrescalarT1>:
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	51 f4       	brne	.+20     	; 0xd86 <adjustPrescalarT1+0x1a>
     d72:	8e b5       	in	r24, 0x2e	; 46
     d74:	81 60       	ori	r24, 0x01	; 1
     d76:	8e bd       	out	0x2e, r24	; 46
     d78:	8e b5       	in	r24, 0x2e	; 46
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	8e bd       	out	0x2e, r24	; 46
     d7e:	8e b5       	in	r24, 0x2e	; 46
     d80:	8b 7f       	andi	r24, 0xFB	; 251
     d82:	8e bd       	out	0x2e, r24	; 46
     d84:	08 95       	ret
     d86:	88 30       	cpi	r24, 0x08	; 8
     d88:	91 05       	cpc	r25, r1
     d8a:	51 f4       	brne	.+20     	; 0xda0 <adjustPrescalarT1+0x34>
     d8c:	8e b5       	in	r24, 0x2e	; 46
     d8e:	8e 7f       	andi	r24, 0xFE	; 254
     d90:	8e bd       	out	0x2e, r24	; 46
     d92:	8e b5       	in	r24, 0x2e	; 46
     d94:	82 60       	ori	r24, 0x02	; 2
     d96:	8e bd       	out	0x2e, r24	; 46
     d98:	8e b5       	in	r24, 0x2e	; 46
     d9a:	8b 7f       	andi	r24, 0xFB	; 251
     d9c:	8e bd       	out	0x2e, r24	; 46
     d9e:	08 95       	ret
     da0:	80 34       	cpi	r24, 0x40	; 64
     da2:	91 05       	cpc	r25, r1
     da4:	51 f4       	brne	.+20     	; 0xdba <adjustPrescalarT1+0x4e>
     da6:	8e b5       	in	r24, 0x2e	; 46
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	8e bd       	out	0x2e, r24	; 46
     dac:	8e b5       	in	r24, 0x2e	; 46
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	8e bd       	out	0x2e, r24	; 46
     db2:	8e b5       	in	r24, 0x2e	; 46
     db4:	8b 7f       	andi	r24, 0xFB	; 251
     db6:	8e bd       	out	0x2e, r24	; 46
     db8:	08 95       	ret
     dba:	81 15       	cp	r24, r1
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	92 07       	cpc	r25, r18
     dc0:	51 f4       	brne	.+20     	; 0xdd6 <adjustPrescalarT1+0x6a>
     dc2:	8e b5       	in	r24, 0x2e	; 46
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	8e bd       	out	0x2e, r24	; 46
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	8d 7f       	andi	r24, 0xFD	; 253
     dcc:	8e bd       	out	0x2e, r24	; 46
     dce:	8e b5       	in	r24, 0x2e	; 46
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	8e bd       	out	0x2e, r24	; 46
     dd4:	08 95       	ret
     dd6:	81 15       	cp	r24, r1
     dd8:	94 40       	sbci	r25, 0x04	; 4
     dda:	49 f4       	brne	.+18     	; 0xdee <adjustPrescalarT1+0x82>
     ddc:	8e b5       	in	r24, 0x2e	; 46
     dde:	81 60       	ori	r24, 0x01	; 1
     de0:	8e bd       	out	0x2e, r24	; 46
     de2:	8e b5       	in	r24, 0x2e	; 46
     de4:	8d 7f       	andi	r24, 0xFD	; 253
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	84 60       	ori	r24, 0x04	; 4
     dec:	8e bd       	out	0x2e, r24	; 46
     dee:	08 95       	ret

00000df0 <Timer_Delay>:
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	2a 97       	sbiw	r28, 0x0a	; 10
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
     e24:	09 83       	std	Y+1, r16	; 0x01
     e26:	1a 83       	std	Y+2, r17	; 0x02
     e28:	2b 83       	std	Y+3, r18	; 0x03
     e2a:	3c 83       	std	Y+4, r19	; 0x04
     e2c:	4d 83       	std	Y+5, r20	; 0x05
     e2e:	5e 83       	std	Y+6, r21	; 0x06
     e30:	03 35       	cpi	r16, 0x53	; 83
     e32:	09 f0       	breq	.+2      	; 0xe36 <Timer_Delay+0x46>
     e34:	71 c0       	rjmp	.+226    	; 0xf18 <Timer_Delay+0x128>
     e36:	37 c0       	rjmp	.+110    	; 0xea6 <Timer_Delay+0xb6>
     e38:	6a 81       	ldd	r22, Y+2	; 0x02
     e3a:	7b 81       	ldd	r23, Y+3	; 0x03
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	e1 2f       	mov	r30, r17
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ef 58       	subi	r30, 0x8F	; 143
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	a0 80       	ld	r10, Z
     e4e:	b1 80       	ldd	r11, Z+1	; 0x01
     e50:	95 01       	movw	r18, r10
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	0e 94 30 0c 	call	0x1860	; 0x1860 <__udivmodsi4>
     e5a:	84 2f       	mov	r24, r20
     e5c:	95 2f       	mov	r25, r21
     e5e:	42 2e       	mov	r4, r18
     e60:	53 2e       	mov	r5, r19
     e62:	64 2e       	mov	r6, r20
     e64:	75 2e       	mov	r7, r21
     e66:	62 2f       	mov	r22, r18
     e68:	73 2f       	mov	r23, r19
     e6a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     e6e:	6f 83       	std	Y+7, r22	; 0x07
     e70:	78 87       	std	Y+8, r23	; 0x08
     e72:	89 87       	std	Y+9, r24	; 0x09
     e74:	9a 87       	std	Y+10, r25	; 0x0a
     e76:	a7 01       	movw	r20, r14
     e78:	96 01       	movw	r18, r12
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	8f e7       	ldi	r24, 0x7F	; 127
     e80:	93 e4       	ldi	r25, 0x43	; 67
     e82:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__cmpsf2>
     e96:	88 23       	and	r24, r24
     e98:	24 f4       	brge	.+8      	; 0xea2 <Timer_Delay+0xb2>
     e9a:	45 28       	or	r4, r5
     e9c:	46 28       	or	r4, r6
     e9e:	47 28       	or	r4, r7
     ea0:	49 f4       	brne	.+18     	; 0xeb4 <Timer_Delay+0xc4>
     ea2:	1f 5f       	subi	r17, 0xFF	; 255
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <Timer_Delay+0xb8>
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	15 30       	cpi	r17, 0x05	; 5
     eaa:	30 f2       	brcs	.-116    	; 0xe38 <Timer_Delay+0x48>
     eac:	01 e0       	ldi	r16, 0x01	; 1
     eae:	10 e0       	ldi	r17, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <Timer_Delay+0xc8>
     eb4:	85 01       	movw	r16, r10
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	88 23       	and	r24, r24
     eba:	09 f4       	brne	.+2      	; 0xebe <Timer_Delay+0xce>
     ebc:	c4 c0       	rjmp	.+392    	; 0x1046 <Timer_Delay+0x256>
     ebe:	c8 01       	movw	r24, r16
     ec0:	0e 94 74 06 	call	0xce8	; 0xce8 <adjustPrescalarT0>
     ec4:	6a 81       	ldd	r22, Y+2	; 0x02
     ec6:	7b 81       	ldd	r23, Y+3	; 0x03
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     ed0:	a7 01       	movw	r20, r14
     ed2:	96 01       	movw	r18, r12
     ed4:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
     ed8:	6b 01       	movw	r12, r22
     eda:	7c 01       	movw	r14, r24
     edc:	b8 01       	movw	r22, r16
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	c7 01       	movw	r24, r14
     eec:	b6 01       	movw	r22, r12
     eee:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	8f e7       	ldi	r24, 0x7F	; 127
     efc:	93 e4       	ldi	r25, 0x43	; 67
     efe:	0e 94 de 09 	call	0x13bc	; 0x13bc <__subsf3>
     f02:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fixsfsi>
     f06:	62 bf       	out	0x32, r22	; 50
     f08:	08 b6       	in	r0, 0x38	; 56
     f0a:	00 fe       	sbrs	r0, 0
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <Timer_Delay+0x118>
     f0e:	88 b7       	in	r24, 0x38	; 56
     f10:	81 60       	ori	r24, 0x01	; 1
     f12:	88 bf       	out	0x38, r24	; 56
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	9a c0       	rjmp	.+308    	; 0x104c <Timer_Delay+0x25c>
     f18:	0f 34       	cpi	r16, 0x4F	; 79
     f1a:	e9 f1       	breq	.+122    	; 0xf96 <Timer_Delay+0x1a6>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	96 c0       	rjmp	.+300    	; 0x104c <Timer_Delay+0x25c>
     f20:	6a 81       	ldd	r22, Y+2	; 0x02
     f22:	7b 81       	ldd	r23, Y+3	; 0x03
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	e1 2f       	mov	r30, r17
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ef 58       	subi	r30, 0x8F	; 143
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	a0 80       	ld	r10, Z
     f36:	b1 80       	ldd	r11, Z+1	; 0x01
     f38:	95 01       	movw	r18, r10
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 30 0c 	call	0x1860	; 0x1860 <__udivmodsi4>
     f42:	29 01       	movw	r4, r18
     f44:	3a 01       	movw	r6, r20
     f46:	b9 01       	movw	r22, r18
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     f50:	6f 83       	std	Y+7, r22	; 0x07
     f52:	78 87       	std	Y+8, r23	; 0x08
     f54:	89 87       	std	Y+9, r24	; 0x09
     f56:	9a 87       	std	Y+10, r25	; 0x0a
     f58:	a7 01       	movw	r20, r14
     f5a:	96 01       	movw	r18, r12
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	80 e8       	ldi	r24, 0x80	; 128
     f62:	97 e4       	ldi	r25, 0x47	; 71
     f64:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
     f68:	9b 01       	movw	r18, r22
     f6a:	ac 01       	movw	r20, r24
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	9a 85       	ldd	r25, Y+10	; 0x0a
     f74:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__cmpsf2>
     f78:	88 23       	and	r24, r24
     f7a:	5c f4       	brge	.+22     	; 0xf92 <Timer_Delay+0x1a2>
     f7c:	c3 01       	movw	r24, r6
     f7e:	b2 01       	movw	r22, r4
     f80:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	a9 01       	movw	r20, r18
     f8a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gesf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f0       	brlt	.+18     	; 0xfa4 <Timer_Delay+0x1b4>
     f92:	1f 5f       	subi	r17, 0xFF	; 255
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <Timer_Delay+0x1a8>
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	15 30       	cpi	r17, 0x05	; 5
     f9a:	10 f2       	brcs	.-124    	; 0xf20 <Timer_Delay+0x130>
     f9c:	01 e0       	ldi	r16, 0x01	; 1
     f9e:	10 e0       	ldi	r17, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <Timer_Delay+0x1b8>
     fa4:	85 01       	movw	r16, r10
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <Timer_Delay+0x1be>
     fac:	4e c0       	rjmp	.+156    	; 0x104a <Timer_Delay+0x25a>
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <adjustPrescalarT1>
     fb4:	6a 81       	ldd	r22, Y+2	; 0x02
     fb6:	7b 81       	ldd	r23, Y+3	; 0x03
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     fc0:	a7 01       	movw	r20, r14
     fc2:	96 01       	movw	r18, r12
     fc4:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
     fc8:	2b 01       	movw	r4, r22
     fca:	3c 01       	movw	r6, r24
     fcc:	b8 01       	movw	r22, r16
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
     fd6:	4b 01       	movw	r8, r22
     fd8:	5c 01       	movw	r10, r24
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	c3 01       	movw	r24, r6
     fe0:	b2 01       	movw	r22, r4
     fe2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	97 e4       	ldi	r25, 0x47	; 71
     ff2:	0e 94 de 09 	call	0x13bc	; 0x13bc <__subsf3>
     ff6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fixunssfsi>
     ffa:	7d bd       	out	0x2d, r23	; 45
     ffc:	6a 81       	ldd	r22, Y+2	; 0x02
     ffe:	7b 81       	ldd	r23, Y+3	; 0x03
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    1008:	a7 01       	movw	r20, r14
    100a:	96 01       	movw	r18, r12
    100c:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    1010:	a5 01       	movw	r20, r10
    1012:	94 01       	movw	r18, r8
    1014:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    1018:	9b 01       	movw	r18, r22
    101a:	ac 01       	movw	r20, r24
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	80 e8       	ldi	r24, 0x80	; 128
    1022:	97 e4       	ldi	r25, 0x47	; 71
    1024:	0e 94 de 09 	call	0x13bc	; 0x13bc <__subsf3>
    1028:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fixunssfsi>
    102c:	21 e0       	ldi	r18, 0x01	; 1
    102e:	67 2b       	or	r22, r23
    1030:	09 f4       	brne	.+2      	; 0x1034 <Timer_Delay+0x244>
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	2c bd       	out	0x2c, r18	; 44
    1036:	08 b6       	in	r0, 0x38	; 56
    1038:	02 fe       	sbrs	r0, 2
    103a:	fd cf       	rjmp	.-6      	; 0x1036 <Timer_Delay+0x246>
    103c:	88 b7       	in	r24, 0x38	; 56
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	88 bf       	out	0x38, r24	; 56
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	03 c0       	rjmp	.+6      	; 0x104c <Timer_Delay+0x25c>
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	01 c0       	rjmp	.+2      	; 0x104c <Timer_Delay+0x25c>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	2a 96       	adiw	r28, 0x0a	; 10
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	9f 90       	pop	r9
    106e:	8f 90       	pop	r8
    1070:	7f 90       	pop	r7
    1072:	6f 90       	pop	r6
    1074:	5f 90       	pop	r5
    1076:	4f 90       	pop	r4
    1078:	08 95       	ret

0000107a <Timer_Schedule_Fun>:
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	00 d0       	rcall	.+0      	; 0x109c <Timer_Schedule_Fun+0x22>
    109c:	00 d0       	rcall	.+0      	; 0x109e <Timer_Schedule_Fun+0x24>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <Timer_Schedule_Fun+0x26>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	09 83       	std	Y+1, r16	; 0x01
    10a6:	1a 83       	std	Y+2, r17	; 0x02
    10a8:	2b 83       	std	Y+3, r18	; 0x03
    10aa:	3c 83       	std	Y+4, r19	; 0x04
    10ac:	4d 83       	std	Y+5, r20	; 0x05
    10ae:	5e 83       	std	Y+6, r21	; 0x06
    10b0:	52 30       	cpi	r21, 0x02	; 2
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <Timer_Schedule_Fun+0x3c>
    10b4:	f0 c0       	rjmp	.+480    	; 0x1296 <Timer_Schedule_Fun+0x21c>
    10b6:	97 01       	movw	r18, r14
    10b8:	6b 01       	movw	r12, r22
    10ba:	7c 01       	movw	r14, r24
    10bc:	8f b7       	in	r24, 0x3f	; 63
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	8f bf       	out	0x3f, r24	; 63
    10c2:	89 b7       	in	r24, 0x39	; 57
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	89 bf       	out	0x39, r24	; 57
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	83 35       	cpi	r24, 0x53	; 83
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <Timer_Schedule_Fun+0x56>
    10ce:	63 c0       	rjmp	.+198    	; 0x1196 <Timer_Schedule_Fun+0x11c>
    10d0:	30 93 92 00 	sts	0x0092, r19	; 0x800092 <TIMER0_CM_ISR+0x1>
    10d4:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <TIMER0_CM_ISR>
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	33 c0       	rjmp	.+102    	; 0x1142 <Timer_Schedule_Fun+0xc8>
    10dc:	6a 81       	ldd	r22, Y+2	; 0x02
    10de:	7b 81       	ldd	r23, Y+3	; 0x03
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	9d 81       	ldd	r25, Y+5	; 0x05
    10e4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    10e8:	a7 01       	movw	r20, r14
    10ea:	96 01       	movw	r18, r12
    10ec:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    10f0:	2b 01       	movw	r4, r22
    10f2:	3c 01       	movw	r6, r24
    10f4:	e1 2f       	mov	r30, r17
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ef 58       	subi	r30, 0x8F	; 143
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	a0 80       	ld	r10, Z
    1102:	b1 80       	ldd	r11, Z+1	; 0x01
    1104:	b5 01       	movw	r22, r10
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	c3 01       	movw	r24, r6
    1114:	b2 01       	movw	r22, r4
    1116:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    111a:	2b 01       	movw	r4, r22
    111c:	3c 01       	movw	r6, r24
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4f e7       	ldi	r20, 0x7F	; 127
    1124:	53 e4       	ldi	r21, 0x43	; 67
    1126:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__cmpsf2>
    112a:	88 23       	and	r24, r24
    112c:	4c f4       	brge	.+18     	; 0x1140 <Timer_Schedule_Fun+0xc6>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	c3 01       	movw	r24, r6
    1136:	b2 01       	movw	r22, r4
    1138:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gesf2>
    113c:	18 16       	cp	r1, r24
    113e:	3c f0       	brlt	.+14     	; 0x114e <Timer_Schedule_Fun+0xd4>
    1140:	1f 5f       	subi	r17, 0xFF	; 255
    1142:	15 30       	cpi	r17, 0x05	; 5
    1144:	58 f2       	brcs	.-106    	; 0x10dc <Timer_Schedule_Fun+0x62>
    1146:	01 e0       	ldi	r16, 0x01	; 1
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <Timer_Schedule_Fun+0xd8>
    114e:	85 01       	movw	r16, r10
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <Timer_Schedule_Fun+0xde>
    1156:	a1 c0       	rjmp	.+322    	; 0x129a <Timer_Schedule_Fun+0x220>
    1158:	c8 01       	movw	r24, r16
    115a:	0e 94 74 06 	call	0xce8	; 0xce8 <adjustPrescalarT0>
    115e:	6a 81       	ldd	r22, Y+2	; 0x02
    1160:	7b 81       	ldd	r23, Y+3	; 0x03
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    116a:	a7 01       	movw	r20, r14
    116c:	96 01       	movw	r18, r12
    116e:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
    1176:	b8 01       	movw	r22, r16
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    118c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__fixsfsi>
    1190:	6c bf       	out	0x3c, r22	; 60
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	87 c0       	rjmp	.+270    	; 0x12a4 <Timer_Schedule_Fun+0x22a>
    1196:	89 b7       	in	r24, 0x39	; 57
    1198:	80 61       	ori	r24, 0x10	; 16
    119a:	89 bf       	out	0x39, r24	; 57
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	8f 34       	cpi	r24, 0x4F	; 79
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <Timer_Schedule_Fun+0x12a>
    11a2:	7d c0       	rjmp	.+250    	; 0x129e <Timer_Schedule_Fun+0x224>
    11a4:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <TIMER1_CMA_ISR+0x1>
    11a8:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <TIMER1_CMA_ISR>
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	33 c0       	rjmp	.+102    	; 0x1216 <Timer_Schedule_Fun+0x19c>
    11b0:	6a 81       	ldd	r22, Y+2	; 0x02
    11b2:	7b 81       	ldd	r23, Y+3	; 0x03
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    11bc:	a7 01       	movw	r20, r14
    11be:	96 01       	movw	r18, r12
    11c0:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    11c4:	2b 01       	movw	r4, r22
    11c6:	3c 01       	movw	r6, r24
    11c8:	e1 2f       	mov	r30, r17
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	ef 58       	subi	r30, 0x8F	; 143
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	a0 80       	ld	r10, Z
    11d6:	b1 80       	ldd	r11, Z+1	; 0x01
    11d8:	b5 01       	movw	r22, r10
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	c3 01       	movw	r24, r6
    11e8:	b2 01       	movw	r22, r4
    11ea:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    11ee:	2b 01       	movw	r4, r22
    11f0:	3c 01       	movw	r6, r24
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__cmpsf2>
    11fe:	88 23       	and	r24, r24
    1200:	4c f4       	brge	.+18     	; 0x1214 <Timer_Schedule_Fun+0x19a>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	c3 01       	movw	r24, r6
    120a:	b2 01       	movw	r22, r4
    120c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__gesf2>
    1210:	18 16       	cp	r1, r24
    1212:	3c f0       	brlt	.+14     	; 0x1222 <Timer_Schedule_Fun+0x1a8>
    1214:	1f 5f       	subi	r17, 0xFF	; 255
    1216:	15 30       	cpi	r17, 0x05	; 5
    1218:	58 f2       	brcs	.-106    	; 0x11b0 <Timer_Schedule_Fun+0x136>
    121a:	01 e0       	ldi	r16, 0x01	; 1
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <Timer_Schedule_Fun+0x1ac>
    1222:	85 01       	movw	r16, r10
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	88 23       	and	r24, r24
    1228:	e1 f1       	breq	.+120    	; 0x12a2 <Timer_Schedule_Fun+0x228>
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <adjustPrescalarT1>
    1230:	6a 81       	ldd	r22, Y+2	; 0x02
    1232:	7b 81       	ldd	r23, Y+3	; 0x03
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    123c:	a7 01       	movw	r20, r14
    123e:	96 01       	movw	r18, r12
    1240:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    1244:	2b 01       	movw	r4, r22
    1246:	3c 01       	movw	r6, r24
    1248:	b8 01       	movw	r22, r16
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    1252:	4b 01       	movw	r8, r22
    1254:	5c 01       	movw	r10, r24
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	c3 01       	movw	r24, r6
    125c:	b2 01       	movw	r22, r4
    125e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    1262:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fixunssfsi>
    1266:	7b bd       	out	0x2b, r23	; 43
    1268:	6a 81       	ldd	r22, Y+2	; 0x02
    126a:	7b 81       	ldd	r23, Y+3	; 0x03
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__floatunsisf>
    1274:	a7 01       	movw	r20, r14
    1276:	96 01       	movw	r18, r12
    1278:	0e 94 af 0b 	call	0x175e	; 0x175e <__mulsf3>
    127c:	a5 01       	movw	r20, r10
    127e:	94 01       	movw	r18, r8
    1280:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__divsf3>
    1284:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fixunssfsi>
    1288:	21 e0       	ldi	r18, 0x01	; 1
    128a:	67 2b       	or	r22, r23
    128c:	09 f4       	brne	.+2      	; 0x1290 <Timer_Schedule_Fun+0x216>
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	2a bd       	out	0x2a, r18	; 42
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <Timer_Schedule_Fun+0x22a>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <Timer_Schedule_Fun+0x22a>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <Timer_Schedule_Fun+0x22a>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <Timer_Schedule_Fun+0x22a>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	26 96       	adiw	r28, 0x06	; 6
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	bf 90       	pop	r11
    12c2:	af 90       	pop	r10
    12c4:	9f 90       	pop	r9
    12c6:	8f 90       	pop	r8
    12c8:	7f 90       	pop	r7
    12ca:	6f 90       	pop	r6
    12cc:	5f 90       	pop	r5
    12ce:	4f 90       	pop	r4
    12d0:	08 95       	ret

000012d2 <__vector_10>:
}


/* ISR DEFINITIONS */

void __vector_10(){
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
	TIMER0_CM_ISR();
    12f4:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <TIMER0_CM_ISR>
    12f8:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <TIMER0_CM_ISR+0x1>
    12fc:	09 95       	icall
}
    12fe:	ff 91       	pop	r31
    1300:	ef 91       	pop	r30
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	9f 91       	pop	r25
    1308:	8f 91       	pop	r24
    130a:	7f 91       	pop	r23
    130c:	6f 91       	pop	r22
    130e:	5f 91       	pop	r21
    1310:	4f 91       	pop	r20
    1312:	3f 91       	pop	r19
    1314:	2f 91       	pop	r18
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <__vector_7>:

void __vector_7(){
    1320:	1f 92       	push	r1
    1322:	0f 92       	push	r0
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	0f 92       	push	r0
    1328:	11 24       	eor	r1, r1
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	TIMER1_CMA_ISR();
    1342:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <TIMER1_CMA_ISR>
    1346:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <TIMER1_CMA_ISR+0x1>
    134a:	09 95       	icall
}
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_4>:

void __vector_4(){
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
	TIMER2_CM_ISR();
    1390:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <TIMER2_CM_ISR>
    1394:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <TIMER2_CM_ISR+0x1>
    1398:	09 95       	icall
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <__subsf3>:
    13bc:	50 58       	subi	r21, 0x80	; 128

000013be <__addsf3>:
    13be:	bb 27       	eor	r27, r27
    13c0:	aa 27       	eor	r26, r26
    13c2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__addsf3x>
    13c6:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_round>
    13ca:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscA>
    13ce:	38 f0       	brcs	.+14     	; 0x13de <__addsf3+0x20>
    13d0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_pscB>
    13d4:	20 f0       	brcs	.+8      	; 0x13de <__addsf3+0x20>
    13d6:	39 f4       	brne	.+14     	; 0x13e6 <__addsf3+0x28>
    13d8:	9f 3f       	cpi	r25, 0xFF	; 255
    13da:	19 f4       	brne	.+6      	; 0x13e2 <__addsf3+0x24>
    13dc:	26 f4       	brtc	.+8      	; 0x13e6 <__addsf3+0x28>
    13de:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_nan>
    13e2:	0e f4       	brtc	.+2      	; 0x13e6 <__addsf3+0x28>
    13e4:	e0 95       	com	r30
    13e6:	e7 fb       	bst	r30, 7
    13e8:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__fp_inf>

000013ec <__addsf3x>:
    13ec:	e9 2f       	mov	r30, r25
    13ee:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_split3>
    13f2:	58 f3       	brcs	.-42     	; 0x13ca <__addsf3+0xc>
    13f4:	ba 17       	cp	r27, r26
    13f6:	62 07       	cpc	r22, r18
    13f8:	73 07       	cpc	r23, r19
    13fa:	84 07       	cpc	r24, r20
    13fc:	95 07       	cpc	r25, r21
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__addsf3x+0x1c>
    1400:	79 f4       	brne	.+30     	; 0x1420 <__addsf3x+0x34>
    1402:	a6 f5       	brtc	.+104    	; 0x146c <__addsf3x+0x80>
    1404:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__fp_zero>
    1408:	0e f4       	brtc	.+2      	; 0x140c <__addsf3x+0x20>
    140a:	e0 95       	com	r30
    140c:	0b 2e       	mov	r0, r27
    140e:	ba 2f       	mov	r27, r26
    1410:	a0 2d       	mov	r26, r0
    1412:	0b 01       	movw	r0, r22
    1414:	b9 01       	movw	r22, r18
    1416:	90 01       	movw	r18, r0
    1418:	0c 01       	movw	r0, r24
    141a:	ca 01       	movw	r24, r20
    141c:	a0 01       	movw	r20, r0
    141e:	11 24       	eor	r1, r1
    1420:	ff 27       	eor	r31, r31
    1422:	59 1b       	sub	r21, r25
    1424:	99 f0       	breq	.+38     	; 0x144c <__addsf3x+0x60>
    1426:	59 3f       	cpi	r21, 0xF9	; 249
    1428:	50 f4       	brcc	.+20     	; 0x143e <__addsf3x+0x52>
    142a:	50 3e       	cpi	r21, 0xE0	; 224
    142c:	68 f1       	brcs	.+90     	; 0x1488 <__addsf3x+0x9c>
    142e:	1a 16       	cp	r1, r26
    1430:	f0 40       	sbci	r31, 0x00	; 0
    1432:	a2 2f       	mov	r26, r18
    1434:	23 2f       	mov	r18, r19
    1436:	34 2f       	mov	r19, r20
    1438:	44 27       	eor	r20, r20
    143a:	58 5f       	subi	r21, 0xF8	; 248
    143c:	f3 cf       	rjmp	.-26     	; 0x1424 <__addsf3x+0x38>
    143e:	46 95       	lsr	r20
    1440:	37 95       	ror	r19
    1442:	27 95       	ror	r18
    1444:	a7 95       	ror	r26
    1446:	f0 40       	sbci	r31, 0x00	; 0
    1448:	53 95       	inc	r21
    144a:	c9 f7       	brne	.-14     	; 0x143e <__addsf3x+0x52>
    144c:	7e f4       	brtc	.+30     	; 0x146c <__addsf3x+0x80>
    144e:	1f 16       	cp	r1, r31
    1450:	ba 0b       	sbc	r27, r26
    1452:	62 0b       	sbc	r22, r18
    1454:	73 0b       	sbc	r23, r19
    1456:	84 0b       	sbc	r24, r20
    1458:	ba f0       	brmi	.+46     	; 0x1488 <__addsf3x+0x9c>
    145a:	91 50       	subi	r25, 0x01	; 1
    145c:	a1 f0       	breq	.+40     	; 0x1486 <__addsf3x+0x9a>
    145e:	ff 0f       	add	r31, r31
    1460:	bb 1f       	adc	r27, r27
    1462:	66 1f       	adc	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	88 1f       	adc	r24, r24
    1468:	c2 f7       	brpl	.-16     	; 0x145a <__addsf3x+0x6e>
    146a:	0e c0       	rjmp	.+28     	; 0x1488 <__addsf3x+0x9c>
    146c:	ba 0f       	add	r27, r26
    146e:	62 1f       	adc	r22, r18
    1470:	73 1f       	adc	r23, r19
    1472:	84 1f       	adc	r24, r20
    1474:	48 f4       	brcc	.+18     	; 0x1488 <__addsf3x+0x9c>
    1476:	87 95       	ror	r24
    1478:	77 95       	ror	r23
    147a:	67 95       	ror	r22
    147c:	b7 95       	ror	r27
    147e:	f7 95       	ror	r31
    1480:	9e 3f       	cpi	r25, 0xFE	; 254
    1482:	08 f0       	brcs	.+2      	; 0x1486 <__addsf3x+0x9a>
    1484:	b0 cf       	rjmp	.-160    	; 0x13e6 <__addsf3+0x28>
    1486:	93 95       	inc	r25
    1488:	88 0f       	add	r24, r24
    148a:	08 f0       	brcs	.+2      	; 0x148e <__addsf3x+0xa2>
    148c:	99 27       	eor	r25, r25
    148e:	ee 0f       	add	r30, r30
    1490:	97 95       	ror	r25
    1492:	87 95       	ror	r24
    1494:	08 95       	ret

00001496 <__cmpsf2>:
    1496:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_cmp>
    149a:	08 f4       	brcc	.+2      	; 0x149e <__cmpsf2+0x8>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	08 95       	ret

000014a0 <__divsf3>:
    14a0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__divsf3x>
    14a4:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_round>
    14a8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_pscB>
    14ac:	58 f0       	brcs	.+22     	; 0x14c4 <__divsf3+0x24>
    14ae:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscA>
    14b2:	40 f0       	brcs	.+16     	; 0x14c4 <__divsf3+0x24>
    14b4:	29 f4       	brne	.+10     	; 0x14c0 <__divsf3+0x20>
    14b6:	5f 3f       	cpi	r21, 0xFF	; 255
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <__divsf3+0x24>
    14ba:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__fp_inf>
    14be:	51 11       	cpse	r21, r1
    14c0:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_szero>
    14c4:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_nan>

000014c8 <__divsf3x>:
    14c8:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_split3>
    14cc:	68 f3       	brcs	.-38     	; 0x14a8 <__divsf3+0x8>

000014ce <__divsf3_pse>:
    14ce:	99 23       	and	r25, r25
    14d0:	b1 f3       	breq	.-20     	; 0x14be <__divsf3+0x1e>
    14d2:	55 23       	and	r21, r21
    14d4:	91 f3       	breq	.-28     	; 0x14ba <__divsf3+0x1a>
    14d6:	95 1b       	sub	r25, r21
    14d8:	55 0b       	sbc	r21, r21
    14da:	bb 27       	eor	r27, r27
    14dc:	aa 27       	eor	r26, r26
    14de:	62 17       	cp	r22, r18
    14e0:	73 07       	cpc	r23, r19
    14e2:	84 07       	cpc	r24, r20
    14e4:	38 f0       	brcs	.+14     	; 0x14f4 <__divsf3_pse+0x26>
    14e6:	9f 5f       	subi	r25, 0xFF	; 255
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	44 1f       	adc	r20, r20
    14f0:	aa 1f       	adc	r26, r26
    14f2:	a9 f3       	breq	.-22     	; 0x14de <__divsf3_pse+0x10>
    14f4:	35 d0       	rcall	.+106    	; 0x1560 <__divsf3_pse+0x92>
    14f6:	0e 2e       	mov	r0, r30
    14f8:	3a f0       	brmi	.+14     	; 0x1508 <__divsf3_pse+0x3a>
    14fa:	e0 e8       	ldi	r30, 0x80	; 128
    14fc:	32 d0       	rcall	.+100    	; 0x1562 <__divsf3_pse+0x94>
    14fe:	91 50       	subi	r25, 0x01	; 1
    1500:	50 40       	sbci	r21, 0x00	; 0
    1502:	e6 95       	lsr	r30
    1504:	00 1c       	adc	r0, r0
    1506:	ca f7       	brpl	.-14     	; 0x14fa <__divsf3_pse+0x2c>
    1508:	2b d0       	rcall	.+86     	; 0x1560 <__divsf3_pse+0x92>
    150a:	fe 2f       	mov	r31, r30
    150c:	29 d0       	rcall	.+82     	; 0x1560 <__divsf3_pse+0x92>
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	bb 1f       	adc	r27, r27
    1516:	26 17       	cp	r18, r22
    1518:	37 07       	cpc	r19, r23
    151a:	48 07       	cpc	r20, r24
    151c:	ab 07       	cpc	r26, r27
    151e:	b0 e8       	ldi	r27, 0x80	; 128
    1520:	09 f0       	breq	.+2      	; 0x1524 <__divsf3_pse+0x56>
    1522:	bb 0b       	sbc	r27, r27
    1524:	80 2d       	mov	r24, r0
    1526:	bf 01       	movw	r22, r30
    1528:	ff 27       	eor	r31, r31
    152a:	93 58       	subi	r25, 0x83	; 131
    152c:	5f 4f       	sbci	r21, 0xFF	; 255
    152e:	3a f0       	brmi	.+14     	; 0x153e <__divsf3_pse+0x70>
    1530:	9e 3f       	cpi	r25, 0xFE	; 254
    1532:	51 05       	cpc	r21, r1
    1534:	78 f0       	brcs	.+30     	; 0x1554 <__divsf3_pse+0x86>
    1536:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__fp_inf>
    153a:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_szero>
    153e:	5f 3f       	cpi	r21, 0xFF	; 255
    1540:	e4 f3       	brlt	.-8      	; 0x153a <__divsf3_pse+0x6c>
    1542:	98 3e       	cpi	r25, 0xE8	; 232
    1544:	d4 f3       	brlt	.-12     	; 0x153a <__divsf3_pse+0x6c>
    1546:	86 95       	lsr	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b7 95       	ror	r27
    154e:	f7 95       	ror	r31
    1550:	9f 5f       	subi	r25, 0xFF	; 255
    1552:	c9 f7       	brne	.-14     	; 0x1546 <__divsf3_pse+0x78>
    1554:	88 0f       	add	r24, r24
    1556:	91 1d       	adc	r25, r1
    1558:	96 95       	lsr	r25
    155a:	87 95       	ror	r24
    155c:	97 f9       	bld	r25, 7
    155e:	08 95       	ret
    1560:	e1 e0       	ldi	r30, 0x01	; 1
    1562:	66 0f       	add	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	88 1f       	adc	r24, r24
    1568:	bb 1f       	adc	r27, r27
    156a:	62 17       	cp	r22, r18
    156c:	73 07       	cpc	r23, r19
    156e:	84 07       	cpc	r24, r20
    1570:	ba 07       	cpc	r27, r26
    1572:	20 f0       	brcs	.+8      	; 0x157c <__divsf3_pse+0xae>
    1574:	62 1b       	sub	r22, r18
    1576:	73 0b       	sbc	r23, r19
    1578:	84 0b       	sbc	r24, r20
    157a:	ba 0b       	sbc	r27, r26
    157c:	ee 1f       	adc	r30, r30
    157e:	88 f7       	brcc	.-30     	; 0x1562 <__divsf3_pse+0x94>
    1580:	e0 95       	com	r30
    1582:	08 95       	ret

00001584 <__fixsfsi>:
    1584:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fixunssfsi>
    1588:	68 94       	set
    158a:	b1 11       	cpse	r27, r1
    158c:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_szero>
    1590:	08 95       	ret

00001592 <__fixunssfsi>:
    1592:	0e 94 89 0b 	call	0x1712	; 0x1712 <__fp_splitA>
    1596:	88 f0       	brcs	.+34     	; 0x15ba <__fixunssfsi+0x28>
    1598:	9f 57       	subi	r25, 0x7F	; 127
    159a:	98 f0       	brcs	.+38     	; 0x15c2 <__fixunssfsi+0x30>
    159c:	b9 2f       	mov	r27, r25
    159e:	99 27       	eor	r25, r25
    15a0:	b7 51       	subi	r27, 0x17	; 23
    15a2:	b0 f0       	brcs	.+44     	; 0x15d0 <__fixunssfsi+0x3e>
    15a4:	e1 f0       	breq	.+56     	; 0x15de <__fixunssfsi+0x4c>
    15a6:	66 0f       	add	r22, r22
    15a8:	77 1f       	adc	r23, r23
    15aa:	88 1f       	adc	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	1a f0       	brmi	.+6      	; 0x15b6 <__fixunssfsi+0x24>
    15b0:	ba 95       	dec	r27
    15b2:	c9 f7       	brne	.-14     	; 0x15a6 <__fixunssfsi+0x14>
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <__fixunssfsi+0x4c>
    15b6:	b1 30       	cpi	r27, 0x01	; 1
    15b8:	91 f0       	breq	.+36     	; 0x15de <__fixunssfsi+0x4c>
    15ba:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__fp_zero>
    15be:	b1 e0       	ldi	r27, 0x01	; 1
    15c0:	08 95       	ret
    15c2:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__fp_zero>
    15c6:	67 2f       	mov	r22, r23
    15c8:	78 2f       	mov	r23, r24
    15ca:	88 27       	eor	r24, r24
    15cc:	b8 5f       	subi	r27, 0xF8	; 248
    15ce:	39 f0       	breq	.+14     	; 0x15de <__fixunssfsi+0x4c>
    15d0:	b9 3f       	cpi	r27, 0xF9	; 249
    15d2:	cc f3       	brlt	.-14     	; 0x15c6 <__fixunssfsi+0x34>
    15d4:	86 95       	lsr	r24
    15d6:	77 95       	ror	r23
    15d8:	67 95       	ror	r22
    15da:	b3 95       	inc	r27
    15dc:	d9 f7       	brne	.-10     	; 0x15d4 <__fixunssfsi+0x42>
    15de:	3e f4       	brtc	.+14     	; 0x15ee <__fixunssfsi+0x5c>
    15e0:	90 95       	com	r25
    15e2:	80 95       	com	r24
    15e4:	70 95       	com	r23
    15e6:	61 95       	neg	r22
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__floatunsisf>:
    15f0:	e8 94       	clt
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <__floatsisf+0x12>

000015f4 <__floatsisf>:
    15f4:	97 fb       	bst	r25, 7
    15f6:	3e f4       	brtc	.+14     	; 0x1606 <__floatsisf+0x12>
    15f8:	90 95       	com	r25
    15fa:	80 95       	com	r24
    15fc:	70 95       	com	r23
    15fe:	61 95       	neg	r22
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	8f 4f       	sbci	r24, 0xFF	; 255
    1604:	9f 4f       	sbci	r25, 0xFF	; 255
    1606:	99 23       	and	r25, r25
    1608:	a9 f0       	breq	.+42     	; 0x1634 <__floatsisf+0x40>
    160a:	f9 2f       	mov	r31, r25
    160c:	96 e9       	ldi	r25, 0x96	; 150
    160e:	bb 27       	eor	r27, r27
    1610:	93 95       	inc	r25
    1612:	f6 95       	lsr	r31
    1614:	87 95       	ror	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b7 95       	ror	r27
    161c:	f1 11       	cpse	r31, r1
    161e:	f8 cf       	rjmp	.-16     	; 0x1610 <__floatsisf+0x1c>
    1620:	fa f4       	brpl	.+62     	; 0x1660 <__floatsisf+0x6c>
    1622:	bb 0f       	add	r27, r27
    1624:	11 f4       	brne	.+4      	; 0x162a <__floatsisf+0x36>
    1626:	60 ff       	sbrs	r22, 0
    1628:	1b c0       	rjmp	.+54     	; 0x1660 <__floatsisf+0x6c>
    162a:	6f 5f       	subi	r22, 0xFF	; 255
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	8f 4f       	sbci	r24, 0xFF	; 255
    1630:	9f 4f       	sbci	r25, 0xFF	; 255
    1632:	16 c0       	rjmp	.+44     	; 0x1660 <__floatsisf+0x6c>
    1634:	88 23       	and	r24, r24
    1636:	11 f0       	breq	.+4      	; 0x163c <__floatsisf+0x48>
    1638:	96 e9       	ldi	r25, 0x96	; 150
    163a:	11 c0       	rjmp	.+34     	; 0x165e <__floatsisf+0x6a>
    163c:	77 23       	and	r23, r23
    163e:	21 f0       	breq	.+8      	; 0x1648 <__floatsisf+0x54>
    1640:	9e e8       	ldi	r25, 0x8E	; 142
    1642:	87 2f       	mov	r24, r23
    1644:	76 2f       	mov	r23, r22
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <__floatsisf+0x5e>
    1648:	66 23       	and	r22, r22
    164a:	71 f0       	breq	.+28     	; 0x1668 <__floatsisf+0x74>
    164c:	96 e8       	ldi	r25, 0x86	; 134
    164e:	86 2f       	mov	r24, r22
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	2a f0       	brmi	.+10     	; 0x1660 <__floatsisf+0x6c>
    1656:	9a 95       	dec	r25
    1658:	66 0f       	add	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	da f7       	brpl	.-10     	; 0x1656 <__floatsisf+0x62>
    1660:	88 0f       	add	r24, r24
    1662:	96 95       	lsr	r25
    1664:	87 95       	ror	r24
    1666:	97 f9       	bld	r25, 7
    1668:	08 95       	ret

0000166a <__fp_cmp>:
    166a:	99 0f       	add	r25, r25
    166c:	00 08       	sbc	r0, r0
    166e:	55 0f       	add	r21, r21
    1670:	aa 0b       	sbc	r26, r26
    1672:	e0 e8       	ldi	r30, 0x80	; 128
    1674:	fe ef       	ldi	r31, 0xFE	; 254
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	e8 07       	cpc	r30, r24
    167c:	f9 07       	cpc	r31, r25
    167e:	c0 f0       	brcs	.+48     	; 0x16b0 <__fp_cmp+0x46>
    1680:	12 16       	cp	r1, r18
    1682:	13 06       	cpc	r1, r19
    1684:	e4 07       	cpc	r30, r20
    1686:	f5 07       	cpc	r31, r21
    1688:	98 f0       	brcs	.+38     	; 0x16b0 <__fp_cmp+0x46>
    168a:	62 1b       	sub	r22, r18
    168c:	73 0b       	sbc	r23, r19
    168e:	84 0b       	sbc	r24, r20
    1690:	95 0b       	sbc	r25, r21
    1692:	39 f4       	brne	.+14     	; 0x16a2 <__fp_cmp+0x38>
    1694:	0a 26       	eor	r0, r26
    1696:	61 f0       	breq	.+24     	; 0x16b0 <__fp_cmp+0x46>
    1698:	23 2b       	or	r18, r19
    169a:	24 2b       	or	r18, r20
    169c:	25 2b       	or	r18, r21
    169e:	21 f4       	brne	.+8      	; 0x16a8 <__fp_cmp+0x3e>
    16a0:	08 95       	ret
    16a2:	0a 26       	eor	r0, r26
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__fp_cmp+0x3e>
    16a6:	a1 40       	sbci	r26, 0x01	; 1
    16a8:	a6 95       	lsr	r26
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	81 1d       	adc	r24, r1
    16ae:	81 1d       	adc	r24, r1
    16b0:	08 95       	ret

000016b2 <__fp_inf>:
    16b2:	97 f9       	bld	r25, 7
    16b4:	9f 67       	ori	r25, 0x7F	; 127
    16b6:	80 e8       	ldi	r24, 0x80	; 128
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	08 95       	ret

000016be <__fp_nan>:
    16be:	9f ef       	ldi	r25, 0xFF	; 255
    16c0:	80 ec       	ldi	r24, 0xC0	; 192
    16c2:	08 95       	ret

000016c4 <__fp_pscA>:
    16c4:	00 24       	eor	r0, r0
    16c6:	0a 94       	dec	r0
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	18 06       	cpc	r1, r24
    16ce:	09 06       	cpc	r0, r25
    16d0:	08 95       	ret

000016d2 <__fp_pscB>:
    16d2:	00 24       	eor	r0, r0
    16d4:	0a 94       	dec	r0
    16d6:	12 16       	cp	r1, r18
    16d8:	13 06       	cpc	r1, r19
    16da:	14 06       	cpc	r1, r20
    16dc:	05 06       	cpc	r0, r21
    16de:	08 95       	ret

000016e0 <__fp_round>:
    16e0:	09 2e       	mov	r0, r25
    16e2:	03 94       	inc	r0
    16e4:	00 0c       	add	r0, r0
    16e6:	11 f4       	brne	.+4      	; 0x16ec <__fp_round+0xc>
    16e8:	88 23       	and	r24, r24
    16ea:	52 f0       	brmi	.+20     	; 0x1700 <__fp_round+0x20>
    16ec:	bb 0f       	add	r27, r27
    16ee:	40 f4       	brcc	.+16     	; 0x1700 <__fp_round+0x20>
    16f0:	bf 2b       	or	r27, r31
    16f2:	11 f4       	brne	.+4      	; 0x16f8 <__fp_round+0x18>
    16f4:	60 ff       	sbrs	r22, 0
    16f6:	04 c0       	rjmp	.+8      	; 0x1700 <__fp_round+0x20>
    16f8:	6f 5f       	subi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	08 95       	ret

00001702 <__fp_split3>:
    1702:	57 fd       	sbrc	r21, 7
    1704:	90 58       	subi	r25, 0x80	; 128
    1706:	44 0f       	add	r20, r20
    1708:	55 1f       	adc	r21, r21
    170a:	59 f0       	breq	.+22     	; 0x1722 <__fp_splitA+0x10>
    170c:	5f 3f       	cpi	r21, 0xFF	; 255
    170e:	71 f0       	breq	.+28     	; 0x172c <__fp_splitA+0x1a>
    1710:	47 95       	ror	r20

00001712 <__fp_splitA>:
    1712:	88 0f       	add	r24, r24
    1714:	97 fb       	bst	r25, 7
    1716:	99 1f       	adc	r25, r25
    1718:	61 f0       	breq	.+24     	; 0x1732 <__fp_splitA+0x20>
    171a:	9f 3f       	cpi	r25, 0xFF	; 255
    171c:	79 f0       	breq	.+30     	; 0x173c <__fp_splitA+0x2a>
    171e:	87 95       	ror	r24
    1720:	08 95       	ret
    1722:	12 16       	cp	r1, r18
    1724:	13 06       	cpc	r1, r19
    1726:	14 06       	cpc	r1, r20
    1728:	55 1f       	adc	r21, r21
    172a:	f2 cf       	rjmp	.-28     	; 0x1710 <__fp_split3+0xe>
    172c:	46 95       	lsr	r20
    172e:	f1 df       	rcall	.-30     	; 0x1712 <__fp_splitA>
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <__fp_splitA+0x30>
    1732:	16 16       	cp	r1, r22
    1734:	17 06       	cpc	r1, r23
    1736:	18 06       	cpc	r1, r24
    1738:	99 1f       	adc	r25, r25
    173a:	f1 cf       	rjmp	.-30     	; 0x171e <__fp_splitA+0xc>
    173c:	86 95       	lsr	r24
    173e:	71 05       	cpc	r23, r1
    1740:	61 05       	cpc	r22, r1
    1742:	08 94       	sec
    1744:	08 95       	ret

00001746 <__fp_zero>:
    1746:	e8 94       	clt

00001748 <__fp_szero>:
    1748:	bb 27       	eor	r27, r27
    174a:	66 27       	eor	r22, r22
    174c:	77 27       	eor	r23, r23
    174e:	cb 01       	movw	r24, r22
    1750:	97 f9       	bld	r25, 7
    1752:	08 95       	ret

00001754 <__gesf2>:
    1754:	0e 94 35 0b 	call	0x166a	; 0x166a <__fp_cmp>
    1758:	08 f4       	brcc	.+2      	; 0x175c <__gesf2+0x8>
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	08 95       	ret

0000175e <__mulsf3>:
    175e:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__mulsf3x>
    1762:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__fp_round>
    1766:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__fp_pscA>
    176a:	38 f0       	brcs	.+14     	; 0x177a <__mulsf3+0x1c>
    176c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_pscB>
    1770:	20 f0       	brcs	.+8      	; 0x177a <__mulsf3+0x1c>
    1772:	95 23       	and	r25, r21
    1774:	11 f0       	breq	.+4      	; 0x177a <__mulsf3+0x1c>
    1776:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__fp_inf>
    177a:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_nan>
    177e:	11 24       	eor	r1, r1
    1780:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_szero>

00001784 <__mulsf3x>:
    1784:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_split3>
    1788:	70 f3       	brcs	.-36     	; 0x1766 <__mulsf3+0x8>

0000178a <__mulsf3_pse>:
    178a:	95 9f       	mul	r25, r21
    178c:	c1 f3       	breq	.-16     	; 0x177e <__mulsf3+0x20>
    178e:	95 0f       	add	r25, r21
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	55 1f       	adc	r21, r21
    1794:	62 9f       	mul	r22, r18
    1796:	f0 01       	movw	r30, r0
    1798:	72 9f       	mul	r23, r18
    179a:	bb 27       	eor	r27, r27
    179c:	f0 0d       	add	r31, r0
    179e:	b1 1d       	adc	r27, r1
    17a0:	63 9f       	mul	r22, r19
    17a2:	aa 27       	eor	r26, r26
    17a4:	f0 0d       	add	r31, r0
    17a6:	b1 1d       	adc	r27, r1
    17a8:	aa 1f       	adc	r26, r26
    17aa:	64 9f       	mul	r22, r20
    17ac:	66 27       	eor	r22, r22
    17ae:	b0 0d       	add	r27, r0
    17b0:	a1 1d       	adc	r26, r1
    17b2:	66 1f       	adc	r22, r22
    17b4:	82 9f       	mul	r24, r18
    17b6:	22 27       	eor	r18, r18
    17b8:	b0 0d       	add	r27, r0
    17ba:	a1 1d       	adc	r26, r1
    17bc:	62 1f       	adc	r22, r18
    17be:	73 9f       	mul	r23, r19
    17c0:	b0 0d       	add	r27, r0
    17c2:	a1 1d       	adc	r26, r1
    17c4:	62 1f       	adc	r22, r18
    17c6:	83 9f       	mul	r24, r19
    17c8:	a0 0d       	add	r26, r0
    17ca:	61 1d       	adc	r22, r1
    17cc:	22 1f       	adc	r18, r18
    17ce:	74 9f       	mul	r23, r20
    17d0:	33 27       	eor	r19, r19
    17d2:	a0 0d       	add	r26, r0
    17d4:	61 1d       	adc	r22, r1
    17d6:	23 1f       	adc	r18, r19
    17d8:	84 9f       	mul	r24, r20
    17da:	60 0d       	add	r22, r0
    17dc:	21 1d       	adc	r18, r1
    17de:	82 2f       	mov	r24, r18
    17e0:	76 2f       	mov	r23, r22
    17e2:	6a 2f       	mov	r22, r26
    17e4:	11 24       	eor	r1, r1
    17e6:	9f 57       	subi	r25, 0x7F	; 127
    17e8:	50 40       	sbci	r21, 0x00	; 0
    17ea:	9a f0       	brmi	.+38     	; 0x1812 <__mulsf3_pse+0x88>
    17ec:	f1 f0       	breq	.+60     	; 0x182a <__mulsf3_pse+0xa0>
    17ee:	88 23       	and	r24, r24
    17f0:	4a f0       	brmi	.+18     	; 0x1804 <__mulsf3_pse+0x7a>
    17f2:	ee 0f       	add	r30, r30
    17f4:	ff 1f       	adc	r31, r31
    17f6:	bb 1f       	adc	r27, r27
    17f8:	66 1f       	adc	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	91 50       	subi	r25, 0x01	; 1
    1800:	50 40       	sbci	r21, 0x00	; 0
    1802:	a9 f7       	brne	.-22     	; 0x17ee <__mulsf3_pse+0x64>
    1804:	9e 3f       	cpi	r25, 0xFE	; 254
    1806:	51 05       	cpc	r21, r1
    1808:	80 f0       	brcs	.+32     	; 0x182a <__mulsf3_pse+0xa0>
    180a:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__fp_inf>
    180e:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__fp_szero>
    1812:	5f 3f       	cpi	r21, 0xFF	; 255
    1814:	e4 f3       	brlt	.-8      	; 0x180e <__mulsf3_pse+0x84>
    1816:	98 3e       	cpi	r25, 0xE8	; 232
    1818:	d4 f3       	brlt	.-12     	; 0x180e <__mulsf3_pse+0x84>
    181a:	86 95       	lsr	r24
    181c:	77 95       	ror	r23
    181e:	67 95       	ror	r22
    1820:	b7 95       	ror	r27
    1822:	f7 95       	ror	r31
    1824:	e7 95       	ror	r30
    1826:	9f 5f       	subi	r25, 0xFF	; 255
    1828:	c1 f7       	brne	.-16     	; 0x181a <__mulsf3_pse+0x90>
    182a:	fe 2b       	or	r31, r30
    182c:	88 0f       	add	r24, r24
    182e:	91 1d       	adc	r25, r1
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	97 f9       	bld	r25, 7
    1836:	08 95       	ret

00001838 <__divmodhi4>:
    1838:	97 fb       	bst	r25, 7
    183a:	07 2e       	mov	r0, r23
    183c:	16 f4       	brtc	.+4      	; 0x1842 <__divmodhi4+0xa>
    183e:	00 94       	com	r0
    1840:	07 d0       	rcall	.+14     	; 0x1850 <__divmodhi4_neg1>
    1842:	77 fd       	sbrc	r23, 7
    1844:	09 d0       	rcall	.+18     	; 0x1858 <__divmodhi4_neg2>
    1846:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__udivmodhi4>
    184a:	07 fc       	sbrc	r0, 7
    184c:	05 d0       	rcall	.+10     	; 0x1858 <__divmodhi4_neg2>
    184e:	3e f4       	brtc	.+14     	; 0x185e <__divmodhi4_exit>

00001850 <__divmodhi4_neg1>:
    1850:	90 95       	com	r25
    1852:	81 95       	neg	r24
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	08 95       	ret

00001858 <__divmodhi4_neg2>:
    1858:	70 95       	com	r23
    185a:	61 95       	neg	r22
    185c:	7f 4f       	sbci	r23, 0xFF	; 255

0000185e <__divmodhi4_exit>:
    185e:	08 95       	ret

00001860 <__udivmodsi4>:
    1860:	a1 e2       	ldi	r26, 0x21	; 33
    1862:	1a 2e       	mov	r1, r26
    1864:	aa 1b       	sub	r26, r26
    1866:	bb 1b       	sub	r27, r27
    1868:	fd 01       	movw	r30, r26
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <__udivmodsi4_ep>

0000186c <__udivmodsi4_loop>:
    186c:	aa 1f       	adc	r26, r26
    186e:	bb 1f       	adc	r27, r27
    1870:	ee 1f       	adc	r30, r30
    1872:	ff 1f       	adc	r31, r31
    1874:	a2 17       	cp	r26, r18
    1876:	b3 07       	cpc	r27, r19
    1878:	e4 07       	cpc	r30, r20
    187a:	f5 07       	cpc	r31, r21
    187c:	20 f0       	brcs	.+8      	; 0x1886 <__udivmodsi4_ep>
    187e:	a2 1b       	sub	r26, r18
    1880:	b3 0b       	sbc	r27, r19
    1882:	e4 0b       	sbc	r30, r20
    1884:	f5 0b       	sbc	r31, r21

00001886 <__udivmodsi4_ep>:
    1886:	66 1f       	adc	r22, r22
    1888:	77 1f       	adc	r23, r23
    188a:	88 1f       	adc	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	1a 94       	dec	r1
    1890:	69 f7       	brne	.-38     	; 0x186c <__udivmodsi4_loop>
    1892:	60 95       	com	r22
    1894:	70 95       	com	r23
    1896:	80 95       	com	r24
    1898:	90 95       	com	r25
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	bd 01       	movw	r22, r26
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret

000018a4 <__tablejump2__>:
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	05 90       	lpm	r0, Z+
    18aa:	f4 91       	lpm	r31, Z
    18ac:	e0 2d       	mov	r30, r0
    18ae:	09 94       	ijmp

000018b0 <__udivmodhi4>:
    18b0:	aa 1b       	sub	r26, r26
    18b2:	bb 1b       	sub	r27, r27
    18b4:	51 e1       	ldi	r21, 0x11	; 17
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <__udivmodhi4_ep>

000018b8 <__udivmodhi4_loop>:
    18b8:	aa 1f       	adc	r26, r26
    18ba:	bb 1f       	adc	r27, r27
    18bc:	a6 17       	cp	r26, r22
    18be:	b7 07       	cpc	r27, r23
    18c0:	10 f0       	brcs	.+4      	; 0x18c6 <__udivmodhi4_ep>
    18c2:	a6 1b       	sub	r26, r22
    18c4:	b7 0b       	sbc	r27, r23

000018c6 <__udivmodhi4_ep>:
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	5a 95       	dec	r21
    18cc:	a9 f7       	brne	.-22     	; 0x18b8 <__udivmodhi4_loop>
    18ce:	80 95       	com	r24
    18d0:	90 95       	com	r25
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	08 95       	ret

000018d8 <_exit>:
    18d8:	f8 94       	cli

000018da <__stop_program>:
    18da:	ff cf       	rjmp	.-2      	; 0x18da <__stop_program>
